var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// dist/generate.js
var require_generate = __commonJS((exports) => {
  (function(scope) {
    function F(arity, fun, wrapper) {
      wrapper.a = arity;
      wrapper.f = fun;
      return wrapper;
    }
    function F2(fun) {
      return F(2, fun, function(a) {
        return function(b) {
          return fun(a, b);
        };
      });
    }
    function F3(fun) {
      return F(3, fun, function(a) {
        return function(b) {
          return function(c) {
            return fun(a, b, c);
          };
        };
      });
    }
    function F4(fun) {
      return F(4, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fun(a, b, c, d);
            };
          };
        };
      });
    }
    function F5(fun) {
      return F(5, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fun(a, b, c, d, e);
              };
            };
          };
        };
      });
    }
    function F6(fun) {
      return F(6, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fun(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      });
    }
    function F7(fun) {
      return F(7, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g2) {
                    return fun(a, b, c, d, e, f, g2);
                  };
                };
              };
            };
          };
        };
      });
    }
    function F8(fun) {
      return F(8, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g2) {
                    return function(h2) {
                      return fun(a, b, c, d, e, f, g2, h2);
                    };
                  };
                };
              };
            };
          };
        };
      });
    }
    function F9(fun) {
      return F(9, fun, function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g2) {
                    return function(h2) {
                      return function(i) {
                        return fun(a, b, c, d, e, f, g2, h2, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      });
    }
    function A2(fun, a, b) {
      return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
      return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
      return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
      return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
      return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g2) {
      return fun.a === 7 ? fun.f(a, b, c, d, e, f, g2) : fun(a)(b)(c)(d)(e)(f)(g2);
    }
    function A8(fun, a, b, c, d, e, f, g2, h2) {
      return fun.a === 8 ? fun.f(a, b, c, d, e, f, g2, h2) : fun(a)(b)(c)(d)(e)(f)(g2)(h2);
    }
    function A9(fun, a, b, c, d, e, f, g2, h2, i) {
      return fun.a === 9 ? fun.f(a, b, c, d, e, f, g2, h2, i) : fun(a)(b)(c)(d)(e)(f)(g2)(h2)(i);
    }
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
      return [value];
    }
    function _JsArray_length(array) {
      return array.length;
    }
    var _JsArray_initialize = F3(function(size, offset, func) {
      var result = new Array(size);
      for (var i = 0;i < size; i++) {
        result[i] = func(offset + i);
      }
      return result;
    });
    var _JsArray_initializeFromList = F2(function(max, ls) {
      var result = new Array(max);
      for (var i = 0;i < max && ls.b; i++) {
        result[i] = ls.a;
        ls = ls.b;
      }
      result.length = i;
      return _Utils_Tuple2(result, ls);
    });
    var _JsArray_unsafeGet = F2(function(index, array) {
      return array[index];
    });
    var _JsArray_unsafeSet = F3(function(index, value, array) {
      var length = array.length;
      var result = new Array(length);
      for (var i = 0;i < length; i++) {
        result[i] = array[i];
      }
      result[index] = value;
      return result;
    });
    var _JsArray_push = F2(function(value, array) {
      var length = array.length;
      var result = new Array(length + 1);
      for (var i = 0;i < length; i++) {
        result[i] = array[i];
      }
      result[length] = value;
      return result;
    });
    var _JsArray_foldl = F3(function(func, acc, array) {
      var length = array.length;
      for (var i = 0;i < length; i++) {
        acc = A2(func, array[i], acc);
      }
      return acc;
    });
    var _JsArray_foldr = F3(function(func, acc, array) {
      for (var i = array.length - 1;i >= 0; i--) {
        acc = A2(func, array[i], acc);
      }
      return acc;
    });
    var _JsArray_map = F2(function(func, array) {
      var length = array.length;
      var result = new Array(length);
      for (var i = 0;i < length; i++) {
        result[i] = func(array[i]);
      }
      return result;
    });
    var _JsArray_indexedMap = F3(function(func, offset, array) {
      var length = array.length;
      var result = new Array(length);
      for (var i = 0;i < length; i++) {
        result[i] = A2(func, offset + i, array[i]);
      }
      return result;
    });
    var _JsArray_slice = F3(function(from, to, array) {
      return array.slice(from, to);
    });
    var _JsArray_appendN = F3(function(n, dest, source) {
      var destLen = dest.length;
      var itemsToCopy = n - destLen;
      if (itemsToCopy > source.length) {
        itemsToCopy = source.length;
      }
      var size = destLen + itemsToCopy;
      var result = new Array(size);
      for (var i = 0;i < destLen; i++) {
        result[i] = dest[i];
      }
      for (var i = 0;i < itemsToCopy; i++) {
        result[i + destLen] = source[i];
      }
      return result;
    });
    var _Debug_log = F2(function(tag, value) {
      return value;
    });
    var _Debug_log_UNUSED = F2(function(tag, value) {
      console.log(tag + ": " + _Debug_toString(value));
      return value;
    });
    function _Debug_todo(moduleName, region) {
      return function(message) {
        _Debug_crash(8, moduleName, region, message);
      };
    }
    function _Debug_todoCase(moduleName, region, value) {
      return function(message) {
        _Debug_crash(9, moduleName, region, value, message);
      };
    }
    function _Debug_toString(value) {
      return "<internals>";
    }
    function _Debug_toString_UNUSED(value) {
      return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
      if (typeof value === "function") {
        return _Debug_internalColor(ansi, "<function>");
      }
      if (typeof value === "boolean") {
        return _Debug_ctorColor(ansi, value ? "True" : "False");
      }
      if (typeof value === "number") {
        return _Debug_numberColor(ansi, value + "");
      }
      if (value instanceof String) {
        return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
      }
      if (typeof value === "string") {
        return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
      }
      if (typeof value === "object" && "$" in value) {
        var tag = value.$;
        if (typeof tag === "number") {
          return _Debug_internalColor(ansi, "<internals>");
        }
        if (tag[0] === "#") {
          var output = [];
          for (var k2 in value) {
            if (k2 === "$")
              continue;
            output.push(_Debug_toAnsiString(ansi, value[k2]));
          }
          return "(" + output.join(",") + ")";
        }
        if (tag === "Set_elm_builtin") {
          return _Debug_ctorColor(ansi, "Set") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
        }
        if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
          return _Debug_ctorColor(ansi, "Dict") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
        }
        if (tag === "Array_elm_builtin") {
          return _Debug_ctorColor(ansi, "Array") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
        }
        if (tag === "::" || tag === "[]") {
          var output = "[";
          value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
          for (;value.b; value = value.b) {
            output += "," + _Debug_toAnsiString(ansi, value.a);
          }
          return output + "]";
        }
        var output = "";
        for (var i in value) {
          if (i === "$")
            continue;
          var str = _Debug_toAnsiString(ansi, value[i]);
          var c0 = str[0];
          var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === '"' || str.indexOf(" ") < 0;
          output += " " + (parenless ? str : "(" + str + ")");
        }
        return _Debug_ctorColor(ansi, tag) + output;
      }
      if (typeof DataView === "function" && value instanceof DataView) {
        return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
      }
      if (typeof File !== "undefined" && value instanceof File) {
        return _Debug_internalColor(ansi, "<" + value.name + ">");
      }
      if (typeof value === "object") {
        var output = [];
        for (var key in value) {
          var field = key[0] === "_" ? key.slice(1) : key;
          output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
        }
        if (output.length === 0) {
          return "{}";
        }
        return "{ " + output.join(", ") + " }";
      }
      return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
      var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
      if (isChar) {
        return s.replace(/\'/g, "\\'");
      } else {
        return s.replace(/\"/g, "\\\"");
      }
    }
    function _Debug_ctorColor(ansi, string) {
      return ansi ? "\x1B[96m" + string + "\x1B[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
      return ansi ? "\x1B[95m" + string + "\x1B[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
      return ansi ? "\x1B[93m" + string + "\x1B[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
      return ansi ? "\x1B[92m" + string + "\x1B[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
      return ansi ? "\x1B[37m" + string + "\x1B[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
      return ansi ? "\x1B[36m" + string + "\x1B[0m" : string;
    }
    function _Debug_toHexDigit(n) {
      return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    function _Debug_crash(identifier) {
      throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
      switch (identifier) {
        case 0:
          throw new Error(`What node should I take over? In JavaScript I need something like:

    Elm.Main.init({
        node: document.getElementById("elm-node")
    })

You need to do this with any Browser.sandbox or Browser.element program.`);
        case 1:
          throw new Error(`Browser.application programs cannot handle URLs like this:

    ` + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
        case 2:
          var jsonErrorString = fact1;
          throw new Error(`Problem with the flags given to your Elm program on initialization.

` + jsonErrorString);
        case 3:
          var portName = fact1;
          throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
        case 4:
          var portName = fact1;
          var problem = fact2;
          throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
        case 5:
          throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');
        case 6:
          var moduleName = fact1;
          throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
        case 8:
          var moduleName = fact1;
          var region = fact2;
          var message = fact3;
          throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + `

` + message);
        case 9:
          var moduleName = fact1;
          var region = fact2;
          var value = fact3;
          var message = fact4;
          throw new Error("TODO in module `" + moduleName + "` from the `case` expression " + _Debug_regionToString(region) + `

It received the following value:

    ` + _Debug_toString(value).replace(`
`, `
    `) + `

But the branch that handles it says:

    ` + message.replace(`
`, `
    `));
        case 10:
          throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
        case 11:
          throw new Error("Cannot perform mod 0. Division by zero error.");
      }
    }
    function _Debug_regionToString(region) {
      if (region.iy.aP === region.n.aP) {
        return "on line " + region.iy.aP;
      }
      return "on lines " + region.iy.aP + " through " + region.n.aP;
    }
    function _Utils_eq(x2, y2) {
      for (var pair, stack = [], isEqual = _Utils_eqHelp(x2, y2, 0, stack);isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) {
      }
      return isEqual;
    }
    function _Utils_eqHelp(x2, y2, depth, stack) {
      if (x2 === y2) {
        return true;
      }
      if (typeof x2 !== "object" || x2 === null || y2 === null) {
        typeof x2 === "function" && _Debug_crash(5);
        return false;
      }
      if (depth > 100) {
        stack.push(_Utils_Tuple2(x2, y2));
        return true;
      }
      if (x2.$ < 0) {
        x2 = $elm$core$Dict$toList(x2);
        y2 = $elm$core$Dict$toList(y2);
      }
      for (var key in x2) {
        if (!_Utils_eqHelp(x2[key], y2[key], depth + 1, stack)) {
          return false;
        }
      }
      return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual = F2(function(a, b) {
      return !_Utils_eq(a, b);
    });
    function _Utils_cmp(x2, y2, ord) {
      if (typeof x2 !== "object") {
        return x2 === y2 ? 0 : x2 < y2 ? -1 : 1;
      }
      if (typeof x2.$ === "undefined") {
        return (ord = _Utils_cmp(x2.a, y2.a)) ? ord : (ord = _Utils_cmp(x2.b, y2.b)) ? ord : _Utils_cmp(x2.c, y2.c);
      }
      for (;x2.b && y2.b && !(ord = _Utils_cmp(x2.a, y2.a)); x2 = x2.b, y2 = y2.b) {
      }
      return ord || (x2.b ? 1 : y2.b ? -1 : 0);
    }
    var _Utils_lt = F2(function(a, b) {
      return _Utils_cmp(a, b) < 0;
    });
    var _Utils_le = F2(function(a, b) {
      return _Utils_cmp(a, b) < 1;
    });
    var _Utils_gt = F2(function(a, b) {
      return _Utils_cmp(a, b) > 0;
    });
    var _Utils_ge = F2(function(a, b) {
      return _Utils_cmp(a, b) >= 0;
    });
    var _Utils_compare = F2(function(x2, y2) {
      var n = _Utils_cmp(x2, y2);
      return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    });
    var _Utils_Tuple0 = 0;
    var _Utils_Tuple0_UNUSED = { $: "#0" };
    function _Utils_Tuple2(a, b) {
      return { a, b };
    }
    function _Utils_Tuple2_UNUSED(a, b) {
      return { $: "#2", a, b };
    }
    function _Utils_Tuple3(a, b, c) {
      return { a, b, c };
    }
    function _Utils_Tuple3_UNUSED(a, b, c) {
      return { $: "#3", a, b, c };
    }
    function _Utils_chr(c) {
      return c;
    }
    function _Utils_chr_UNUSED(c) {
      return new String(c);
    }
    function _Utils_update(oldRecord, updatedFields) {
      var newRecord = {};
      for (var key in oldRecord) {
        newRecord[key] = oldRecord[key];
      }
      for (var key in updatedFields) {
        newRecord[key] = updatedFields[key];
      }
      return newRecord;
    }
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
      if (typeof xs === "string") {
        return xs + ys;
      }
      if (!xs.b) {
        return ys;
      }
      var root = _List_Cons(xs.a, ys);
      xs = xs.b;
      for (var curr = root;xs.b; xs = xs.b) {
        curr = curr.b = _List_Cons(xs.a, ys);
      }
      return root;
    }
    var _List_Nil = { $: 0 };
    var _List_Nil_UNUSED = { $: "[]" };
    function _List_Cons(hd, tl) {
      return { $: 1, a: hd, b: tl };
    }
    function _List_Cons_UNUSED(hd, tl) {
      return { $: "::", a: hd, b: tl };
    }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
      var out = _List_Nil;
      for (var i = arr.length;i--; ) {
        out = _List_Cons(arr[i], out);
      }
      return out;
    }
    function _List_toArray(xs) {
      for (var out = [];xs.b; xs = xs.b) {
        out.push(xs.a);
      }
      return out;
    }
    var _List_map2 = F3(function(f, xs, ys) {
      for (var arr = [];xs.b && ys.b; xs = xs.b, ys = ys.b) {
        arr.push(A2(f, xs.a, ys.a));
      }
      return _List_fromArray(arr);
    });
    var _List_map3 = F4(function(f, xs, ys, zs) {
      for (var arr = [];xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A3(f, xs.a, ys.a, zs.a));
      }
      return _List_fromArray(arr);
    });
    var _List_map4 = F5(function(f, ws, xs, ys, zs) {
      for (var arr = [];ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
      }
      return _List_fromArray(arr);
    });
    var _List_map5 = F6(function(f, vs, ws, xs, ys, zs) {
      for (var arr = [];vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
      }
      return _List_fromArray(arr);
    });
    var _List_sortBy = F2(function(f, xs) {
      return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
        return _Utils_cmp(f(a), f(b));
      }));
    });
    var _List_sortWith = F2(function(f, xs) {
      return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
        var ord = A2(f, a, b);
        return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
      }));
    });
    var _Basics_add = F2(function(a, b) {
      return a + b;
    });
    var _Basics_sub = F2(function(a, b) {
      return a - b;
    });
    var _Basics_mul = F2(function(a, b) {
      return a * b;
    });
    var _Basics_fdiv = F2(function(a, b) {
      return a / b;
    });
    var _Basics_idiv = F2(function(a, b) {
      return a / b | 0;
    });
    var _Basics_pow = F2(Math.pow);
    var _Basics_remainderBy = F2(function(b, a) {
      return a % b;
    });
    var _Basics_modBy = F2(function(modulus, x2) {
      var answer = x2 % modulus;
      return modulus === 0 ? _Debug_crash(11) : answer > 0 && modulus < 0 || answer < 0 && modulus > 0 ? answer + modulus : answer;
    });
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2 = F2(Math.atan2);
    function _Basics_toFloat(x2) {
      return x2;
    }
    function _Basics_truncate(n) {
      return n | 0;
    }
    function _Basics_isInfinite(n) {
      return n === Infinity || n === -Infinity;
    }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    function _Basics_not(bool) {
      return !bool;
    }
    var _Basics_and = F2(function(a, b) {
      return a && b;
    });
    var _Basics_or = F2(function(a, b) {
      return a || b;
    });
    var _Basics_xor = F2(function(a, b) {
      return a !== b;
    });
    var _String_cons = F2(function(chr, str) {
      return chr + str;
    });
    function _String_uncons(string) {
      var word = string.charCodeAt(0);
      return !isNaN(word) ? $elm$core$Maybe$Just(55296 <= word && word <= 56319 ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2)) : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))) : $elm$core$Maybe$Nothing;
    }
    var _String_append = F2(function(a, b) {
      return a + b;
    });
    function _String_length(str) {
      return str.length;
    }
    var _String_map = F2(function(func, string) {
      var len = string.length;
      var array = new Array(len);
      var i = 0;
      while (i < len) {
        var word = string.charCodeAt(i);
        if (55296 <= word && word <= 56319) {
          array[i] = func(_Utils_chr(string[i] + string[i + 1]));
          i += 2;
          continue;
        }
        array[i] = func(_Utils_chr(string[i]));
        i++;
      }
      return array.join("");
    });
    var _String_filter = F2(function(isGood, str) {
      var arr = [];
      var len = str.length;
      var i = 0;
      while (i < len) {
        var char = str[i];
        var word = str.charCodeAt(i);
        i++;
        if (55296 <= word && word <= 56319) {
          char += str[i];
          i++;
        }
        if (isGood(_Utils_chr(char))) {
          arr.push(char);
        }
      }
      return arr.join("");
    });
    function _String_reverse(str) {
      var len = str.length;
      var arr = new Array(len);
      var i = 0;
      while (i < len) {
        var word = str.charCodeAt(i);
        if (55296 <= word && word <= 56319) {
          arr[len - i] = str[i + 1];
          i++;
          arr[len - i] = str[i - 1];
          i++;
        } else {
          arr[len - i] = str[i];
          i++;
        }
      }
      return arr.join("");
    }
    var _String_foldl = F3(function(func, state, string) {
      var len = string.length;
      var i = 0;
      while (i < len) {
        var char = string[i];
        var word = string.charCodeAt(i);
        i++;
        if (55296 <= word && word <= 56319) {
          char += string[i];
          i++;
        }
        state = A2(func, _Utils_chr(char), state);
      }
      return state;
    });
    var _String_foldr = F3(function(func, state, string) {
      var i = string.length;
      while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
          i--;
          char = string[i] + char;
        }
        state = A2(func, _Utils_chr(char), state);
      }
      return state;
    });
    var _String_split = F2(function(sep, str) {
      return str.split(sep);
    });
    var _String_join = F2(function(sep, strs) {
      return strs.join(sep);
    });
    var _String_slice = F3(function(start, end, str) {
      return str.slice(start, end);
    });
    function _String_trim(str) {
      return str.trim();
    }
    function _String_trimLeft(str) {
      return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
      return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
      return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
      return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
      return str.toUpperCase();
    }
    function _String_toLower(str) {
      return str.toLowerCase();
    }
    var _String_any = F2(function(isGood, string) {
      var i = string.length;
      while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
          i--;
          char = string[i] + char;
        }
        if (isGood(_Utils_chr(char))) {
          return true;
        }
      }
      return false;
    });
    var _String_all = F2(function(isGood, string) {
      var i = string.length;
      while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
          i--;
          char = string[i] + char;
        }
        if (!isGood(_Utils_chr(char))) {
          return false;
        }
      }
      return true;
    });
    var _String_contains = F2(function(sub, str) {
      return str.indexOf(sub) > -1;
    });
    var _String_startsWith = F2(function(sub, str) {
      return str.indexOf(sub) === 0;
    });
    var _String_endsWith = F2(function(sub, str) {
      return str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;
    });
    var _String_indexes = F2(function(sub, str) {
      var subLen = sub.length;
      if (subLen < 1) {
        return _List_Nil;
      }
      var i = 0;
      var is = [];
      while ((i = str.indexOf(sub, i)) > -1) {
        is.push(i);
        i = i + subLen;
      }
      return _List_fromArray(is);
    });
    function _String_fromNumber(number) {
      return number + "";
    }
    function _String_toInt(str) {
      var total = 0;
      var code0 = str.charCodeAt(0);
      var start = code0 == 43 || code0 == 45 ? 1 : 0;
      for (var i = start;i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 48 || 57 < code) {
          return $elm$core$Maybe$Nothing;
        }
        total = 10 * total + code - 48;
      }
      return i == start ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
    }
    function _String_toFloat(s) {
      if (s.length === 0 || /[\sxbo]/.test(s)) {
        return $elm$core$Maybe$Nothing;
      }
      var n = +s;
      return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
      return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
      var code = char.charCodeAt(0);
      if (55296 <= code && code <= 56319) {
        return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
      }
      return code;
    }
    function _Char_fromCode(code) {
      return _Utils_chr(code < 0 || 1114111 < code ? "�" : code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320)));
    }
    function _Char_toUpper(char) {
      return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
      return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
      return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
      return _Utils_chr(char.toLocaleLowerCase());
    }
    function _Json_succeed(msg) {
      return {
        $: 0,
        a: msg
      };
    }
    function _Json_fail(msg) {
      return {
        $: 1,
        a: msg
      };
    }
    function _Json_decodePrim(decoder) {
      return { $: 2, b: decoder };
    }
    var _Json_decodeInt = _Json_decodePrim(function(value) {
      return typeof value !== "number" ? _Json_expecting("an INT", value) : -2147483647 < value && value < 2147483647 && (value | 0) === value ? $elm$core$Result$Ok(value) : isFinite(value) && !(value % 1) ? $elm$core$Result$Ok(value) : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function(value) {
      return typeof value === "boolean" ? $elm$core$Result$Ok(value) : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function(value) {
      return typeof value === "number" ? $elm$core$Result$Ok(value) : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function(value) {
      return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function(value) {
      return typeof value === "string" ? $elm$core$Result$Ok(value) : value instanceof String ? $elm$core$Result$Ok(value + "") : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) {
      return { $: 3, b: decoder };
    }
    function _Json_decodeArray(decoder) {
      return { $: 4, b: decoder };
    }
    function _Json_decodeNull(value) {
      return { $: 5, c: value };
    }
    var _Json_decodeField = F2(function(field, decoder) {
      return {
        $: 6,
        d: field,
        b: decoder
      };
    });
    var _Json_decodeIndex = F2(function(index, decoder) {
      return {
        $: 7,
        e: index,
        b: decoder
      };
    });
    function _Json_decodeKeyValuePairs(decoder) {
      return {
        $: 8,
        b: decoder
      };
    }
    function _Json_mapMany(f, decoders) {
      return {
        $: 9,
        f,
        g: decoders
      };
    }
    var _Json_andThen = F2(function(callback, decoder) {
      return {
        $: 10,
        b: decoder,
        h: callback
      };
    });
    function _Json_oneOf(decoders) {
      return {
        $: 11,
        g: decoders
      };
    }
    var _Json_map1 = F2(function(f, d1) {
      return _Json_mapMany(f, [d1]);
    });
    var _Json_map2 = F3(function(f, d1, d2) {
      return _Json_mapMany(f, [d1, d2]);
    });
    var _Json_map3 = F4(function(f, d1, d2, d3) {
      return _Json_mapMany(f, [d1, d2, d3]);
    });
    var _Json_map4 = F5(function(f, d1, d2, d3, d4) {
      return _Json_mapMany(f, [d1, d2, d3, d4]);
    });
    var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5) {
      return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
    });
    var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6) {
      return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
    });
    var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7) {
      return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
    });
    var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8) {
      return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
    });
    var _Json_runOnString = F2(function(decoder, string) {
      try {
        var value = JSON.parse(string);
        return _Json_runHelp(decoder, value);
      } catch (e) {
        return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "This is not valid JSON! " + e.message, _Json_wrap(string)));
      }
    });
    var _Json_run = F2(function(decoder, value) {
      return _Json_runHelp(decoder, _Json_unwrap(value));
    });
    function _Json_runHelp(decoder, value) {
      switch (decoder.$) {
        case 2:
          return decoder.b(value);
        case 5:
          return value === null ? $elm$core$Result$Ok(decoder.c) : _Json_expecting("null", value);
        case 3:
          if (!_Json_isArray(value)) {
            return _Json_expecting("a LIST", value);
          }
          return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
        case 4:
          if (!_Json_isArray(value)) {
            return _Json_expecting("an ARRAY", value);
          }
          return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
        case 6:
          var field = decoder.d;
          if (typeof value !== "object" || value === null || !(field in value)) {
            return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
          }
          var result = _Json_runHelp(decoder.b, value[field]);
          return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));
        case 7:
          var index = decoder.e;
          if (!_Json_isArray(value)) {
            return _Json_expecting("an ARRAY", value);
          }
          if (index >= value.length) {
            return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
          }
          var result = _Json_runHelp(decoder.b, value[index]);
          return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));
        case 8:
          if (typeof value !== "object" || value === null || _Json_isArray(value)) {
            return _Json_expecting("an OBJECT", value);
          }
          var keyValuePairs = _List_Nil;
          for (var key in value) {
            if (value.hasOwnProperty(key)) {
              var result = _Json_runHelp(decoder.b, value[key]);
              if (!$elm$core$Result$isOk(result)) {
                return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
              }
              keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
            }
          }
          return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
        case 9:
          var answer = decoder.f;
          var decoders = decoder.g;
          for (var i = 0;i < decoders.length; i++) {
            var result = _Json_runHelp(decoders[i], value);
            if (!$elm$core$Result$isOk(result)) {
              return result;
            }
            answer = answer(result.a);
          }
          return $elm$core$Result$Ok(answer);
        case 10:
          var result = _Json_runHelp(decoder.b, value);
          return !$elm$core$Result$isOk(result) ? result : _Json_runHelp(decoder.h(result.a), value);
        case 11:
          var errors = _List_Nil;
          for (var temp = decoder.g;temp.b; temp = temp.b) {
            var result = _Json_runHelp(temp.a, value);
            if ($elm$core$Result$isOk(result)) {
              return result;
            }
            errors = _List_Cons(result.a, errors);
          }
          return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
        case 1:
          return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));
        case 0:
          return $elm$core$Result$Ok(decoder.a);
      }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
      var len = value.length;
      var array = new Array(len);
      for (var i = 0;i < len; i++) {
        var result = _Json_runHelp(decoder, value[i]);
        if (!$elm$core$Result$isOk(result)) {
          return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
        }
        array[i] = result.a;
      }
      return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
      return Array.isArray(value) || typeof FileList !== "undefined" && value instanceof FileList;
    }
    function _Json_toElmArray(array) {
      return A2($elm$core$Array$initialize, array.length, function(i) {
        return array[i];
      });
    }
    function _Json_expecting(type, value) {
      return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "Expecting " + type, _Json_wrap(value)));
    }
    function _Json_equality(x2, y2) {
      if (x2 === y2) {
        return true;
      }
      if (x2.$ !== y2.$) {
        return false;
      }
      switch (x2.$) {
        case 0:
        case 1:
          return x2.a === y2.a;
        case 2:
          return x2.b === y2.b;
        case 5:
          return x2.c === y2.c;
        case 3:
        case 4:
        case 8:
          return _Json_equality(x2.b, y2.b);
        case 6:
          return x2.d === y2.d && _Json_equality(x2.b, y2.b);
        case 7:
          return x2.e === y2.e && _Json_equality(x2.b, y2.b);
        case 9:
          return x2.f === y2.f && _Json_listEquality(x2.g, y2.g);
        case 10:
          return x2.h === y2.h && _Json_equality(x2.b, y2.b);
        case 11:
          return _Json_listEquality(x2.g, y2.g);
      }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
      var len = aDecoders.length;
      if (len !== bDecoders.length) {
        return false;
      }
      for (var i = 0;i < len; i++) {
        if (!_Json_equality(aDecoders[i], bDecoders[i])) {
          return false;
        }
      }
      return true;
    }
    var _Json_encode = F2(function(indentLevel, value) {
      return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    });
    function _Json_wrap_UNUSED(value) {
      return { $: 0, a: value };
    }
    function _Json_unwrap_UNUSED(value) {
      return value.a;
    }
    function _Json_wrap(value) {
      return value;
    }
    function _Json_unwrap(value) {
      return value;
    }
    function _Json_emptyArray() {
      return [];
    }
    function _Json_emptyObject() {
      return {};
    }
    var _Json_addField = F3(function(key, value, object) {
      object[key] = _Json_unwrap(value);
      return object;
    });
    function _Json_addEntry(func) {
      return F2(function(entry, array) {
        array.push(_Json_unwrap(func(entry)));
        return array;
      });
    }
    var _Json_encodeNull = _Json_wrap(null);
    var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString) {
      var smallLength = smallString.length;
      var isGood = offset + smallLength <= bigString.length;
      for (var i = 0;isGood && i < smallLength; ) {
        var code = bigString.charCodeAt(offset);
        isGood = smallString[i++] === bigString[offset++] && (code === 10 ? (row++, col = 1) : (col++, (code & 63488) === 55296 ? smallString[i++] === bigString[offset++] : 1));
      }
      return _Utils_Tuple3(isGood ? offset : -1, row, col);
    });
    var _Parser_isSubChar = F3(function(predicate, offset, string) {
      return string.length <= offset ? -1 : (string.charCodeAt(offset) & 63488) === 55296 ? predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1 : predicate(_Utils_chr(string[offset])) ? string[offset] === `
` ? -2 : offset + 1 : -1;
    });
    var _Parser_isAsciiCode = F3(function(code, offset, string) {
      return string.charCodeAt(offset) === code;
    });
    var _Parser_chompBase10 = F2(function(offset, string) {
      for (;offset < string.length; offset++) {
        var code = string.charCodeAt(offset);
        if (code < 48 || 57 < code) {
          return offset;
        }
      }
      return offset;
    });
    var _Parser_consumeBase = F3(function(base, offset, string) {
      for (var total = 0;offset < string.length; offset++) {
        var digit = string.charCodeAt(offset) - 48;
        if (digit < 0 || base <= digit)
          break;
        total = base * total + digit;
      }
      return _Utils_Tuple2(offset, total);
    });
    var _Parser_consumeBase16 = F2(function(offset, string) {
      for (var total = 0;offset < string.length; offset++) {
        var code = string.charCodeAt(offset);
        if (48 <= code && code <= 57) {
          total = 16 * total + code - 48;
        } else if (65 <= code && code <= 70) {
          total = 16 * total + code - 55;
        } else if (97 <= code && code <= 102) {
          total = 16 * total + code - 87;
        } else {
          break;
        }
      }
      return _Utils_Tuple2(offset, total);
    });
    var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString) {
      var newOffset = bigString.indexOf(smallString, offset);
      var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;
      while (offset < target) {
        var code = bigString.charCodeAt(offset++);
        code === 10 ? (col = 1, row++) : (col++, (code & 63488) === 55296 && offset++);
      }
      return _Utils_Tuple3(newOffset, row, col);
    });
    var _Bitwise_and = F2(function(a, b) {
      return a & b;
    });
    var _Bitwise_or = F2(function(a, b) {
      return a | b;
    });
    var _Bitwise_xor = F2(function(a, b) {
      return a ^ b;
    });
    function _Bitwise_complement(a) {
      return ~a;
    }
    var _Bitwise_shiftLeftBy = F2(function(offset, a) {
      return a << offset;
    });
    var _Bitwise_shiftRightBy = F2(function(offset, a) {
      return a >> offset;
    });
    var _Bitwise_shiftRightZfBy = F2(function(offset, a) {
      return a >>> offset;
    });
    var _Regex_never = /.^/;
    var _Regex_fromStringWith = F2(function(options, string) {
      var flags = "g";
      if (options.lN) {
        flags += "m";
      }
      if (options.kl) {
        flags += "i";
      }
      try {
        return $elm$core$Maybe$Just(new RegExp(string, flags));
      } catch (error) {
        return $elm$core$Maybe$Nothing;
      }
    });
    var _Regex_contains = F2(function(re, string) {
      return string.match(re) !== null;
    });
    var _Regex_findAtMost = F3(function(n, re, str) {
      var out = [];
      var number = 0;
      var string = str;
      var lastIndex = re.lastIndex;
      var prevLastIndex = -1;
      var result;
      while (number++ < n && (result = re.exec(string))) {
        if (prevLastIndex == re.lastIndex)
          break;
        var i = result.length - 1;
        var subs = new Array(i);
        while (i > 0) {
          var submatch = result[i];
          subs[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
        }
        out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
        prevLastIndex = re.lastIndex;
      }
      re.lastIndex = lastIndex;
      return _List_fromArray(out);
    });
    var _Regex_replaceAtMost = F4(function(n, re, replacer, string) {
      var count = 0;
      function jsReplacer(match) {
        if (count++ >= n) {
          return match;
        }
        var i = arguments.length - 3;
        var submatches = new Array(i);
        while (i > 0) {
          var submatch = arguments[i];
          submatches[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
        }
        return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
      }
      return string.replace(re, jsReplacer);
    });
    var _Regex_splitAtMost = F3(function(n, re, str) {
      var string = str;
      var out = [];
      var start = re.lastIndex;
      var restoreLastIndex = re.lastIndex;
      while (n--) {
        var result = re.exec(string);
        if (!result)
          break;
        out.push(string.slice(start, result.index));
        start = re.lastIndex;
      }
      out.push(string.slice(start));
      re.lastIndex = restoreLastIndex;
      return _List_fromArray(out);
    });
    var _Regex_infinity = Infinity;
    function _Url_percentEncode(string) {
      return encodeURIComponent(string);
    }
    function _Url_percentDecode(string) {
      try {
        return $elm$core$Maybe$Just(decodeURIComponent(string));
      } catch (e) {
        return $elm$core$Maybe$Nothing;
      }
    }
    function _Scheduler_succeed(value) {
      return {
        $: 0,
        a: value
      };
    }
    function _Scheduler_fail(error) {
      return {
        $: 1,
        a: error
      };
    }
    function _Scheduler_binding(callback) {
      return {
        $: 2,
        b: callback,
        c: null
      };
    }
    var _Scheduler_andThen = F2(function(callback, task) {
      return {
        $: 3,
        b: callback,
        d: task
      };
    });
    var _Scheduler_onError = F2(function(callback, task) {
      return {
        $: 4,
        b: callback,
        d: task
      };
    });
    function _Scheduler_receive(callback) {
      return {
        $: 5,
        b: callback
      };
    }
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
      var proc = {
        $: 0,
        e: _Scheduler_guid++,
        f: task,
        g: null,
        h: []
      };
      _Scheduler_enqueue(proc);
      return proc;
    }
    function _Scheduler_spawn(task) {
      return _Scheduler_binding(function(callback) {
        callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
      });
    }
    function _Scheduler_rawSend(proc, msg) {
      proc.h.push(msg);
      _Scheduler_enqueue(proc);
    }
    var _Scheduler_send = F2(function(proc, msg) {
      return _Scheduler_binding(function(callback) {
        _Scheduler_rawSend(proc, msg);
        callback(_Scheduler_succeed(_Utils_Tuple0));
      });
    });
    function _Scheduler_kill(proc) {
      return _Scheduler_binding(function(callback) {
        var task = proc.f;
        if (task.$ === 2 && task.c) {
          task.c();
        }
        proc.f = null;
        callback(_Scheduler_succeed(_Utils_Tuple0));
      });
    }
    var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
      _Scheduler_queue.push(proc);
      if (_Scheduler_working) {
        return;
      }
      _Scheduler_working = true;
      while (proc = _Scheduler_queue.shift()) {
        _Scheduler_step(proc);
      }
      _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
      while (proc.f) {
        var rootTag = proc.f.$;
        if (rootTag === 0 || rootTag === 1) {
          while (proc.g && proc.g.$ !== rootTag) {
            proc.g = proc.g.i;
          }
          if (!proc.g) {
            return;
          }
          proc.f = proc.g.b(proc.f.a);
          proc.g = proc.g.i;
        } else if (rootTag === 2) {
          proc.f.c = proc.f.b(function(newRoot) {
            proc.f = newRoot;
            _Scheduler_enqueue(proc);
          });
          return;
        } else if (rootTag === 5) {
          if (proc.h.length === 0) {
            return;
          }
          proc.f = proc.f.b(proc.h.shift());
        } else {
          proc.g = {
            $: rootTag === 3 ? 0 : 1,
            b: proc.f.b,
            i: proc.g
          };
          proc.f = proc.f.d;
        }
      }
    }
    function _Process_sleep(time) {
      return _Scheduler_binding(function(callback) {
        var id = setTimeout(function() {
          callback(_Scheduler_succeed(_Utils_Tuple0));
        }, time);
        return function() {
          clearTimeout(id);
        };
      });
    }
    var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args) {
      return _Platform_initialize(flagDecoder, args, impl.bb, impl.mZ, impl.mK, function() {
        return function() {
        };
      });
    });
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
      var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
      $elm$core$Result$isOk(result) || _Debug_crash(2);
      var managers = {};
      var initPair = init(result.a);
      var model = initPair.a;
      var stepper = stepperBuilder(sendToApp, model);
      var ports = _Platform_setupEffects(managers, sendToApp);
      function sendToApp(msg, viewMetadata) {
        var pair = A2(update, msg, model);
        stepper(model = pair.a, viewMetadata);
        _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
      }
      _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
      return ports ? { ports } : {};
    }
    var _Platform_preload;
    function _Platform_registerPreload(url) {
      _Platform_preload.add(url);
    }
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
      var ports;
      for (var key in _Platform_effectManagers) {
        var manager = _Platform_effectManagers[key];
        if (manager.a) {
          ports = ports || {};
          ports[key] = manager.a(key, sendToApp);
        }
        managers[key] = _Platform_instantiateManager(manager, sendToApp);
      }
      return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
      return {
        b: init,
        c: onEffects,
        d: onSelfMsg,
        e: cmdMap,
        f: subMap
      };
    }
    function _Platform_instantiateManager(info, sendToApp) {
      var router = {
        g: sendToApp,
        h: undefined
      };
      var onEffects = info.c;
      var onSelfMsg = info.d;
      var cmdMap = info.e;
      var subMap = info.f;
      function loop(state) {
        return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg) {
          var value = msg.a;
          if (msg.$ === 0) {
            return A3(onSelfMsg, router, value, state);
          }
          return cmdMap && subMap ? A4(onEffects, router, value.i, value.j, state) : A3(onEffects, router, cmdMap ? value.i : value.j, state);
        }));
      }
      return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
    }
    var _Platform_sendToApp = F2(function(router, msg) {
      return _Scheduler_binding(function(callback) {
        router.g(msg);
        callback(_Scheduler_succeed(_Utils_Tuple0));
      });
    });
    var _Platform_sendToSelf = F2(function(router, msg) {
      return A2(_Scheduler_send, router.h, {
        $: 0,
        a: msg
      });
    });
    function _Platform_leaf(home) {
      return function(value) {
        return {
          $: 1,
          k: home,
          l: value
        };
      };
    }
    function _Platform_batch(list) {
      return {
        $: 2,
        m: list
      };
    }
    var _Platform_map = F2(function(tagger, bag) {
      return {
        $: 3,
        n: tagger,
        o: bag
      };
    });
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
      _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
      if (_Platform_effectsActive)
        return;
      _Platform_effectsActive = true;
      for (var fx;fx = _Platform_effectsQueue.shift(); ) {
        _Platform_dispatchEffects(fx.p, fx.q, fx.r);
      }
      _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
      var effectsDict = {};
      _Platform_gatherEffects(true, cmdBag, effectsDict, null);
      _Platform_gatherEffects(false, subBag, effectsDict, null);
      for (var home in managers) {
        _Scheduler_rawSend(managers[home], {
          $: "fx",
          a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
        });
      }
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
      switch (bag.$) {
        case 1:
          var home = bag.k;
          var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
          effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
          return;
        case 2:
          for (var list = bag.m;list.b; list = list.b) {
            _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
          }
          return;
        case 3:
          _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
            s: bag.n,
            t: taggers
          });
          return;
      }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
      function applyTaggers(x2) {
        for (var temp = taggers;temp; temp = temp.t) {
          x2 = temp.s(x2);
        }
        return x2;
      }
      var map = isCmd ? _Platform_effectManagers[home].e : _Platform_effectManagers[home].f;
      return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
      effects = effects || { i: _List_Nil, j: _List_Nil };
      isCmd ? effects.i = _List_Cons(newEffect, effects.i) : effects.j = _List_Cons(newEffect, effects.j);
      return effects;
    }
    function _Platform_checkPortName(name) {
      if (_Platform_effectManagers[name]) {
        _Debug_crash(3, name);
      }
    }
    function _Platform_outgoingPort(name, converter) {
      _Platform_checkPortName(name);
      _Platform_effectManagers[name] = {
        e: _Platform_outgoingPortMap,
        u: converter,
        a: _Platform_setupOutgoingPort
      };
      return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap = F2(function(tagger, value) {
      return value;
    });
    function _Platform_setupOutgoingPort(name) {
      var subs = [];
      var converter = _Platform_effectManagers[name].u;
      var init = _Process_sleep(0);
      _Platform_effectManagers[name].b = init;
      _Platform_effectManagers[name].c = F3(function(router, cmdList, state) {
        for (;cmdList.b; cmdList = cmdList.b) {
          var currentSubs = subs;
          var value = _Json_unwrap(converter(cmdList.a));
          for (var i = 0;i < currentSubs.length; i++) {
            currentSubs[i](value);
          }
        }
        return init;
      });
      function subscribe(callback) {
        subs.push(callback);
      }
      function unsubscribe(callback) {
        subs = subs.slice();
        var index = subs.indexOf(callback);
        if (index >= 0) {
          subs.splice(index, 1);
        }
      }
      return {
        subscribe,
        unsubscribe
      };
    }
    function _Platform_incomingPort(name, converter) {
      _Platform_checkPortName(name);
      _Platform_effectManagers[name] = {
        f: _Platform_incomingPortMap,
        u: converter,
        a: _Platform_setupIncomingPort
      };
      return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap = F2(function(tagger, finalTagger) {
      return function(value) {
        return tagger(finalTagger(value));
      };
    });
    function _Platform_setupIncomingPort(name, sendToApp) {
      var subs = _List_Nil;
      var converter = _Platform_effectManagers[name].u;
      var init = _Scheduler_succeed(null);
      _Platform_effectManagers[name].b = init;
      _Platform_effectManagers[name].c = F3(function(router, subList, state) {
        subs = subList;
        return init;
      });
      function send(incomingValue) {
        var result = A2(_Json_run, converter, _Json_wrap(incomingValue));
        $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
        var value = result.a;
        for (var temp = subs;temp.b; temp = temp.b) {
          sendToApp(temp.a(value));
        }
      }
      return { send };
    }
    function _Platform_export(exports2) {
      scope["Elm"] ? _Platform_mergeExportsProd(scope["Elm"], exports2) : scope["Elm"] = exports2;
    }
    function _Platform_mergeExportsProd(obj, exports2) {
      for (var name in exports2) {
        name in obj ? name == "init" ? _Debug_crash(6) : _Platform_mergeExportsProd(obj[name], exports2[name]) : obj[name] = exports2[name];
      }
    }
    function _Platform_export_UNUSED(exports2) {
      scope["Elm"] ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports2) : scope["Elm"] = exports2;
    }
    function _Platform_mergeExportsDebug(moduleName, obj, exports2) {
      for (var name in exports2) {
        name in obj ? name == "init" ? _Debug_crash(6, moduleName) : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports2[name]) : obj[name] = exports2[name];
      }
    }
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr = F3(function(func, baseCase, _v0) {
      var tree = _v0.c;
      var tail = _v0.d;
      var helper = F2(function(node, acc) {
        if (!node.$) {
          var subTree = node.a;
          return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
        } else {
          var values = node.a;
          return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
        }
      });
      return A3($elm$core$Elm$JsArray$foldr, helper, A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail), tree);
    });
    var $elm$core$Array$toList = function(array) {
      return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Dict$foldr = F3(function(func, acc, t) {
      foldr:
        while (true) {
          if (t.$ === -2) {
            return acc;
          } else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldr, func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldr;
          }
        }
    });
    var $elm$core$Dict$toList = function(dict) {
      return A3($elm$core$Dict$foldr, F3(function(key, value, list) {
        return A2($elm$core$List$cons, _Utils_Tuple2(key, value), list);
      }), _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function(dict) {
      return A3($elm$core$Dict$foldr, F3(function(key, value, keyList) {
        return A2($elm$core$List$cons, key, keyList);
      }), _List_Nil, dict);
    };
    var $elm$core$Set$toList = function(_v0) {
      var dict = _v0;
      return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Basics$EQ = 1;
    var $elm$core$Basics$GT = 2;
    var $elm$core$Basics$LT = 0;
    var $elm$core$Result$Err = function(a) {
      return { $: 1, a };
    };
    var $elm$core$Result$Ok = function(a) {
      return { $: 0, a };
    };
    var $author$project$Press$Model$One = 0;
    var $elm$core$Basics$apR = F2(function(x2, f) {
      return f(x2);
    });
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$List$foldl = F3(function(func, acc, list) {
      foldl:
        while (true) {
          if (!list.b) {
            return acc;
          } else {
            var x2 = list.a;
            var xs = list.b;
            var $temp$func = func, $temp$acc = A2(func, x2, acc), $temp$list = xs;
            func = $temp$func;
            acc = $temp$acc;
            list = $temp$list;
            continue foldl;
          }
        }
    });
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$List$reverse = function(list) {
      return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$List$foldrHelper = F4(function(fn, acc, ctr, ls) {
      if (!ls.b) {
        return acc;
      } else {
        var a = ls.a;
        var r1 = ls.b;
        if (!r1.b) {
          return A2(fn, a, acc);
        } else {
          var b = r1.a;
          var r2 = r1.b;
          if (!r2.b) {
            return A2(fn, a, A2(fn, b, acc));
          } else {
            var c = r2.a;
            var r3 = r2.b;
            if (!r3.b) {
              return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
            } else {
              var d = r3.a;
              var r4 = r3.b;
              var res = ctr > 500 ? A3($elm$core$List$foldl, fn, acc, $elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
              return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
            }
          }
        }
      }
    });
    var $elm$core$List$foldr = F3(function(fn, acc, ls) {
      return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
    });
    var $elm$core$List$append = F2(function(xs, ys) {
      if (!ys.b) {
        return xs;
      } else {
        return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
      }
    });
    var $elm$core$List$concat = function(lists) {
      return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
    };
    var $elm$core$Maybe$Just = function(a) {
      return { $: 0, a };
    };
    var $author$project$Run$Runs = F5(function(app, appView, assets, theme, docs) {
      return { cA: app, cC: appView, j_: assets, kU: docs, i$: theme };
    });
    var $author$project$Options$App$Options = F2(function(pages, stores) {
      return { l6: pages, mG: stores };
    });
    var $author$project$Options$App$PageUsage = F4(function(id, moduleName, urlOnly, route) {
      return { e4: id, lK: moduleName, mr: route, m$: urlOnly };
    });
    var $elm$json$Json$Decode$Failure = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $elm$json$Json$Decode$Field = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $elm$json$Json$Decode$Index = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $elm$json$Json$Decode$OneOf = function(a) {
      return { $: 2, a };
    };
    var $elm$core$Basics$False = 1;
    var $elm$core$Maybe$Nothing = { $: 1 };
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$core$Basics$append = _Utils_append;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join = F2(function(sep, chunks) {
      return A2(_String_join, sep, _List_toArray(chunks));
    });
    var $elm$core$String$split = F2(function(sep, string) {
      return _List_fromArray(A2(_String_split, sep, string));
    });
    var $elm$json$Json$Decode$indent = function(str) {
      return A2($elm$core$String$join, `
    `, A2($elm$core$String$split, `
`, str));
    };
    var $elm$core$List$length = function(xs) {
      return A3($elm$core$List$foldl, F2(function(_v0, i) {
        return i + 1;
      }), 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp = F3(function(lo, hi, list) {
      rangeHelp:
        while (true) {
          if (_Utils_cmp(lo, hi) < 1) {
            var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = A2($elm$core$List$cons, hi, list);
            lo = $temp$lo;
            hi = $temp$hi;
            list = $temp$list;
            continue rangeHelp;
          } else {
            return list;
          }
        }
    });
    var $elm$core$List$range = F2(function(lo, hi) {
      return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
    });
    var $elm$core$List$indexedMap = F2(function(f, xs) {
      return A3($elm$core$List$map2, f, A2($elm$core$List$range, 0, $elm$core$List$length(xs) - 1), xs);
    });
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function(_char) {
      var code = $elm$core$Char$toCode(_char);
      return 97 <= code && code <= 122;
    };
    var $elm$core$Char$isUpper = function(_char) {
      var code = $elm$core$Char$toCode(_char);
      return code <= 90 && 65 <= code;
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function(_char) {
      return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function(_char) {
      var code = $elm$core$Char$toCode(_char);
      return code <= 57 && 48 <= code;
    };
    var $elm$core$Char$isAlphaNum = function(_char) {
      return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf = F2(function(i, error) {
      return `

(` + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    });
    var $elm$json$Json$Decode$errorToString = function(error) {
      return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp = F2(function(error, context) {
      errorToStringHelp:
        while (true) {
          switch (error.$) {
            case 0:
              var f = error.a;
              var err = error.b;
              var isSimple = function() {
                var _v1 = $elm$core$String$uncons(f);
                if (_v1.$ === 1) {
                  return false;
                } else {
                  var _v2 = _v1.a;
                  var _char = _v2.a;
                  var rest = _v2.b;
                  return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
                }
              }();
              var fieldName = isSimple ? "." + f : "['" + (f + "']");
              var $temp$error = err, $temp$context = A2($elm$core$List$cons, fieldName, context);
              error = $temp$error;
              context = $temp$context;
              continue errorToStringHelp;
            case 1:
              var i = error.a;
              var err = error.b;
              var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
              var $temp$error = err, $temp$context = A2($elm$core$List$cons, indexName, context);
              error = $temp$error;
              context = $temp$context;
              continue errorToStringHelp;
            case 2:
              var errors = error.a;
              if (!errors.b) {
                return "Ran into a Json.Decode.oneOf with no possibilities" + function() {
                  if (!context.b) {
                    return "!";
                  } else {
                    return " at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                  }
                }();
              } else {
                if (!errors.b.b) {
                  var err = errors.a;
                  var $temp$error = err, $temp$context = context;
                  error = $temp$error;
                  context = $temp$context;
                  continue errorToStringHelp;
                } else {
                  var starter = function() {
                    if (!context.b) {
                      return "Json.Decode.oneOf";
                    } else {
                      return "The Json.Decode.oneOf at json" + A2($elm$core$String$join, "", $elm$core$List$reverse(context));
                    }
                  }();
                  var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                  return A2($elm$core$String$join, `

`, A2($elm$core$List$cons, introduction, A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
                }
              }
            default:
              var msg = error.a;
              var json = error.b;
              var introduction = function() {
                if (!context.b) {
                  return `Problem with the given value:

`;
                } else {
                  return "Problem with the value at json" + (A2($elm$core$String$join, "", $elm$core$List$reverse(context)) + `:

    `);
                }
              }();
              return introduction + ($elm$json$Json$Decode$indent(A2($elm$json$Json$Encode$encode, 4, json)) + (`

` + msg));
          }
        }
    });
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin = F4(function(a, b, c, d) {
      return { $: 0, a, b, c, d };
    });
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase = F2(function(base, number) {
      return _Basics_log(number) / _Basics_log(base);
    });
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function(a) {
      return { $: 1, a };
    };
    var $elm$core$Basics$apL = F2(function(f, x2) {
      return f(x2);
    });
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$max = F2(function(x2, y2) {
      return _Utils_cmp(x2, y2) > 0 ? x2 : y2;
    });
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function(a) {
      return { $: 0, a };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes = F2(function(nodes, acc) {
      compressNodes:
        while (true) {
          var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
          var node = _v0.a;
          var remainingNodes = _v0.b;
          var newAcc = A2($elm$core$List$cons, $elm$core$Array$SubTree(node), acc);
          if (!remainingNodes.b) {
            return $elm$core$List$reverse(newAcc);
          } else {
            var $temp$nodes = remainingNodes, $temp$acc = newAcc;
            nodes = $temp$nodes;
            acc = $temp$acc;
            continue compressNodes;
          }
        }
    });
    var $elm$core$Tuple$first = function(_v0) {
      var x2 = _v0.a;
      return x2;
    };
    var $elm$core$Array$treeFromBuilder = F2(function(nodeList, nodeListSize) {
      treeFromBuilder:
        while (true) {
          var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
          if (newNodeSize === 1) {
            return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
          } else {
            var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
            nodeList = $temp$nodeList;
            nodeListSize = $temp$nodeListSize;
            continue treeFromBuilder;
          }
        }
    });
    var $elm$core$Array$builderToArray = F2(function(reverseNodeList, builder) {
      if (!builder.x) {
        return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.iQ), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.iQ);
      } else {
        var treeLen = builder.x * $elm$core$Array$branchFactor;
        var depth = $elm$core$Basics$floor(A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
        var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.z) : builder.z;
        var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.x);
        return A4($elm$core$Array$Array_elm_builtin, $elm$core$Elm$JsArray$length(builder.iQ) + treeLen, A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep), tree, builder.iQ);
      }
    });
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp = F5(function(fn, fromIndex, len, nodeList, tail) {
      initializeHelp:
        while (true) {
          if (fromIndex < 0) {
            return A2($elm$core$Array$builderToArray, false, { z: nodeList, x: len / $elm$core$Array$branchFactor | 0, iQ: tail });
          } else {
            var leaf = $elm$core$Array$Leaf(A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
            var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = A2($elm$core$List$cons, leaf, nodeList), $temp$tail = tail;
            fn = $temp$fn;
            fromIndex = $temp$fromIndex;
            len = $temp$len;
            nodeList = $temp$nodeList;
            tail = $temp$tail;
            continue initializeHelp;
          }
        }
    });
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize = F2(function(len, fn) {
      if (len <= 0) {
        return $elm$core$Array$empty;
      } else {
        var tailLen = len % $elm$core$Array$branchFactor;
        var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
        var initialFromIndex = len - tailLen - $elm$core$Array$branchFactor;
        return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
      }
    });
    var $elm$core$Basics$True = 0;
    var $elm$core$Result$isOk = function(result) {
      if (!result.$) {
        return true;
      } else {
        return false;
      }
    };
    var $elm$json$Json$Decode$bool = _Json_decodeBool;
    var $author$project$Options$App$Route = F3(function(id, url, redirectFrom) {
      return { e4: id, b4: redirectFrom, m_: url };
    });
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $author$project$Options$App$UrlError = function(a) {
      return { $: 1, a };
    };
    var $author$project$Options$App$UrlParsedPattern = function(a) {
      return { $: 0, a };
    };
    var $elm$parser$Parser$Advanced$Bad = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $elm$parser$Parser$Advanced$Good = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $elm$core$Basics$identity = function(x2) {
      return x2;
    };
    var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
    var $elm$parser$Parser$Advanced$map2 = F3(function(func, _v0, _v1) {
      var parseA = _v0;
      var parseB = _v1;
      return function(s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
          var p = _v2.a;
          var x2 = _v2.b;
          return A2($elm$parser$Parser$Advanced$Bad, p, x2);
        } else {
          var p1 = _v2.a;
          var a = _v2.b;
          var s1 = _v2.c;
          var _v3 = parseB(s1);
          if (_v3.$ === 1) {
            var p2 = _v3.a;
            var x2 = _v3.b;
            return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x2);
          } else {
            var p2 = _v3.a;
            var b = _v3.b;
            var s2 = _v3.c;
            return A3($elm$parser$Parser$Advanced$Good, p1 || p2, A2(func, a, b), s2);
          }
        }
      };
    });
    var $elm$parser$Parser$Advanced$keeper = F2(function(parseFunc, parseArg) {
      return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
    });
    var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
    var $elm$parser$Parser$Done = function(a) {
      return { $: 1, a };
    };
    var $elm$parser$Parser$Loop = function(a) {
      return { $: 0, a };
    };
    var $author$project$Options$App$Token = function(a) {
      return { $: 0, a };
    };
    var $author$project$Options$App$Variable = function(a) {
      return { $: 1, a };
    };
    var $elm$parser$Parser$UnexpectedChar = { $: 11 };
    var $elm$parser$Parser$Advanced$AddRight = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $elm$parser$Parser$Advanced$DeadEnd = F4(function(row, col, problem, contextStack) {
      return { di: col, kH: contextStack, hk: problem, mu: row };
    });
    var $elm$parser$Parser$Advanced$Empty = { $: 0 };
    var $elm$parser$Parser$Advanced$fromState = F2(function(s, x2) {
      return A2($elm$parser$Parser$Advanced$AddRight, $elm$parser$Parser$Advanced$Empty, A4($elm$parser$Parser$Advanced$DeadEnd, s.mu, s.di, x2, s.m));
    });
    var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
    var $elm$core$Basics$negate = function(n) {
      return -n;
    };
    var $elm$parser$Parser$Advanced$chompIf = F2(function(isGood, expecting) {
      return function(s) {
        var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.f, s.iv);
        return _Utils_eq(newOffset, -1) ? A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : _Utils_eq(newOffset, -2) ? A3($elm$parser$Parser$Advanced$Good, true, 0, { di: 1, m: s.m, q: s.q, f: s.f + 1, mu: s.mu + 1, iv: s.iv }) : A3($elm$parser$Parser$Advanced$Good, true, 0, { di: s.di + 1, m: s.m, q: s.q, f: newOffset, mu: s.mu, iv: s.iv });
      };
    });
    var $elm$parser$Parser$chompIf = function(isGood) {
      return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
    };
    var $elm$parser$Parser$Advanced$chompWhileHelp = F5(function(isGood, offset, row, col, s0) {
      chompWhileHelp:
        while (true) {
          var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.iv);
          if (_Utils_eq(newOffset, -1)) {
            return A3($elm$parser$Parser$Advanced$Good, _Utils_cmp(s0.f, offset) < 0, 0, { di: col, m: s0.m, q: s0.q, f: offset, mu: row, iv: s0.iv });
          } else {
            if (_Utils_eq(newOffset, -2)) {
              var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$s0 = s0;
              isGood = $temp$isGood;
              offset = $temp$offset;
              row = $temp$row;
              col = $temp$col;
              s0 = $temp$s0;
              continue chompWhileHelp;
            } else {
              var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$s0 = s0;
              isGood = $temp$isGood;
              offset = $temp$offset;
              row = $temp$row;
              col = $temp$col;
              s0 = $temp$s0;
              continue chompWhileHelp;
            }
          }
        }
    });
    var $elm$parser$Parser$Advanced$chompWhile = function(isGood) {
      return function(s) {
        return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.f, s.mu, s.di, s);
      };
    };
    var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
    var $elm$parser$Parser$ExpectingEnd = { $: 10 };
    var $elm$core$String$length = _String_length;
    var $elm$parser$Parser$Advanced$end = function(x2) {
      return function(s) {
        return _Utils_eq($elm$core$String$length(s.iv), s.f) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, x2));
      };
    };
    var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
    var $elm$core$Basics$always = F2(function(a, _v0) {
      return a;
    });
    var $elm$core$String$slice = _String_slice;
    var $elm$parser$Parser$Advanced$mapChompedString = F2(function(func, _v0) {
      var parse = _v0;
      return function(s0) {
        var _v1 = parse(s0);
        if (_v1.$ === 1) {
          var p = _v1.a;
          var x2 = _v1.b;
          return A2($elm$parser$Parser$Advanced$Bad, p, x2);
        } else {
          var p = _v1.a;
          var a = _v1.b;
          var s1 = _v1.c;
          return A3($elm$parser$Parser$Advanced$Good, p, A2(func, A3($elm$core$String$slice, s0.f, s1.f, s0.iv), a), s1);
        }
      };
    });
    var $elm$parser$Parser$Advanced$getChompedString = function(parser) {
      return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
    };
    var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
    var $elm$parser$Parser$Advanced$ignorer = F2(function(keepParser, ignoreParser) {
      return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
    });
    var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
    var $elm$core$String$isEmpty = function(string) {
      return string === "";
    };
    var $elm$core$String$trim = _String_trim;
    var $author$project$Options$App$isBlank = function(str) {
      return $elm$core$String$isEmpty($elm$core$String$trim(str));
    };
    var $elm$parser$Parser$Advanced$loopHelp = F4(function(p, state, callback, s0) {
      loopHelp:
        while (true) {
          var _v0 = callback(state);
          var parse = _v0;
          var _v1 = parse(s0);
          if (!_v1.$) {
            var p1 = _v1.a;
            var step = _v1.b;
            var s1 = _v1.c;
            if (!step.$) {
              var newState = step.a;
              var $temp$p = p || p1, $temp$state = newState, $temp$callback = callback, $temp$s0 = s1;
              p = $temp$p;
              state = $temp$state;
              callback = $temp$callback;
              s0 = $temp$s0;
              continue loopHelp;
            } else {
              var result = step.a;
              return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
            }
          } else {
            var p1 = _v1.a;
            var x2 = _v1.b;
            return A2($elm$parser$Parser$Advanced$Bad, p || p1, x2);
          }
        }
    });
    var $elm$parser$Parser$Advanced$loop = F2(function(state, callback) {
      return function(s) {
        return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
      };
    });
    var $elm$parser$Parser$Advanced$map = F2(function(func, _v0) {
      var parse = _v0;
      return function(s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
          var p = _v1.a;
          var a = _v1.b;
          var s1 = _v1.c;
          return A3($elm$parser$Parser$Advanced$Good, p, func(a), s1);
        } else {
          var p = _v1.a;
          var x2 = _v1.b;
          return A2($elm$parser$Parser$Advanced$Bad, p, x2);
        }
      };
    });
    var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
    var $elm$parser$Parser$Advanced$Done = function(a) {
      return { $: 1, a };
    };
    var $elm$parser$Parser$Advanced$Loop = function(a) {
      return { $: 0, a };
    };
    var $elm$parser$Parser$toAdvancedStep = function(step) {
      if (!step.$) {
        var s = step.a;
        return $elm$parser$Parser$Advanced$Loop(s);
      } else {
        var a = step.a;
        return $elm$parser$Parser$Advanced$Done(a);
      }
    };
    var $elm$parser$Parser$loop = F2(function(state, callback) {
      return A2($elm$parser$Parser$Advanced$loop, state, function(s) {
        return A2($elm$parser$Parser$map, $elm$parser$Parser$toAdvancedStep, callback(s));
      });
    });
    var $elm$core$List$any = F2(function(isOkay, list) {
      any:
        while (true) {
          if (!list.b) {
            return false;
          } else {
            var x2 = list.a;
            var xs = list.b;
            if (isOkay(x2)) {
              return true;
            } else {
              var $temp$isOkay = isOkay, $temp$list = xs;
              isOkay = $temp$isOkay;
              list = $temp$list;
              continue any;
            }
          }
        }
    });
    var $elm$core$List$member = F2(function(x2, xs) {
      return A2($elm$core$List$any, function(a) {
        return _Utils_eq(a, x2);
      }, xs);
    });
    var $elm$core$Basics$not = _Basics_not;
    var $elm$parser$Parser$Advanced$Append = F2(function(a, b) {
      return { $: 2, a, b };
    });
    var $elm$parser$Parser$Advanced$oneOfHelp = F3(function(s0, bag, parsers) {
      oneOfHelp:
        while (true) {
          if (!parsers.b) {
            return A2($elm$parser$Parser$Advanced$Bad, false, bag);
          } else {
            var parse = parsers.a;
            var remainingParsers = parsers.b;
            var _v1 = parse(s0);
            if (!_v1.$) {
              var step = _v1;
              return step;
            } else {
              var step = _v1;
              var p = step.a;
              var x2 = step.b;
              if (p) {
                return step;
              } else {
                var $temp$s0 = s0, $temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x2), $temp$parsers = remainingParsers;
                s0 = $temp$s0;
                bag = $temp$bag;
                parsers = $temp$parsers;
                continue oneOfHelp;
              }
            }
          }
        }
    });
    var $elm$parser$Parser$Advanced$oneOf = function(parsers) {
      return function(s) {
        return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
      };
    };
    var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
    var $elm$parser$Parser$Problem = function(a) {
      return { $: 12, a };
    };
    var $elm$parser$Parser$Advanced$problem = function(x2) {
      return function(s) {
        return A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, x2));
      };
    };
    var $elm$parser$Parser$problem = function(msg) {
      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem(msg));
    };
    var $elm$parser$Parser$Advanced$succeed = function(a) {
      return function(s) {
        return A3($elm$parser$Parser$Advanced$Good, false, a, s);
      };
    };
    var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
    var $elm$parser$Parser$ExpectingSymbol = function(a) {
      return { $: 8, a };
    };
    var $elm$parser$Parser$Advanced$Token = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
    var $elm$parser$Parser$Advanced$token = function(_v0) {
      var str = _v0.a;
      var expecting = _v0.b;
      var progress = !$elm$core$String$isEmpty(str);
      return function(s) {
        var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.f, s.mu, s.di, s.iv);
        var newOffset = _v1.a;
        var newRow = _v1.b;
        var newCol = _v1.c;
        return _Utils_eq(newOffset, -1) ? A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3($elm$parser$Parser$Advanced$Good, progress, 0, { di: newCol, m: s.m, q: s.q, f: newOffset, mu: newRow, iv: s.iv });
      };
    };
    var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
    var $elm$parser$Parser$symbol = function(str) {
      return $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, str, $elm$parser$Parser$ExpectingSymbol(str)));
    };
    var $author$project$Options$App$parsePath = A2($elm$parser$Parser$loop, _List_Nil, function(pieces) {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(function(val) {
          return val;
        }), $elm$parser$Parser$symbol("/")), $elm$parser$Parser$oneOf(_List_fromArray([
          A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($elm$parser$Parser$Done({
            a9: true,
            l7: $elm$core$List$reverse(pieces)
          })), $elm$parser$Parser$symbol("*")),
          A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed(F2(function(isVariable, label) {
            return $author$project$Options$App$isBlank(label) ? $elm$parser$Parser$Loop(pieces) : $elm$parser$Parser$Loop(isVariable ? A2($elm$core$List$cons, $author$project$Options$App$Variable(label), pieces) : A2($elm$core$List$cons, $author$project$Options$App$Token(label), pieces));
          })), $elm$parser$Parser$oneOf(_List_fromArray([
            A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(true), $elm$parser$Parser$chompIf(function(c) {
              return c === ":";
            })),
            $elm$parser$Parser$succeed(false)
          ]))), $elm$parser$Parser$getChompedString($elm$parser$Parser$chompWhile(function(c) {
            return !A2($elm$core$List$member, c, _List_fromArray(["/", ":", "?"]));
          })))
        ]))),
        function() {
          if (!pieces.b) {
            return $elm$parser$Parser$oneOf(_List_fromArray([
              A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($elm$parser$Parser$Done({
                a9: false,
                l7: $elm$core$List$reverse(pieces)
              })), $elm$parser$Parser$end),
              $elm$parser$Parser$problem("paths must start with /")
            ]));
          } else {
            return $elm$parser$Parser$succeed($elm$parser$Parser$Done({
              a9: false,
              l7: $elm$core$List$reverse(pieces)
            }));
          }
        }()
      ]));
    });
    var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
    var $elm$core$Dict$RBEmpty_elm_builtin = { $: -2 };
    var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
    var $elm$core$Set$empty = $elm$core$Dict$empty;
    var $elm$core$Dict$Black = 1;
    var $elm$core$Dict$RBNode_elm_builtin = F5(function(a, b, c, d, e) {
      return { $: -1, a, b, c, d, e };
    });
    var $elm$core$Dict$Red = 0;
    var $elm$core$Dict$balance = F5(function(color, key, value, left, right) {
      if (right.$ === -1 && !right.a) {
        var _v1 = right.a;
        var rK = right.b;
        var rV = right.c;
        var rLeft = right.d;
        var rRight = right.e;
        if (left.$ === -1 && !left.a) {
          var _v3 = left.a;
          var lK = left.b;
          var lV = left.c;
          var lLeft = left.d;
          var lRight = left.e;
          return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
        } else {
          return A5($elm$core$Dict$RBNode_elm_builtin, color, rK, rV, A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft), rRight);
        }
      } else {
        if (left.$ === -1 && !left.a && left.d.$ === -1 && !left.d.a) {
          var _v5 = left.a;
          var lK = left.b;
          var lV = left.c;
          var _v6 = left.d;
          var _v7 = _v6.a;
          var llK = _v6.b;
          var llV = _v6.c;
          var llLeft = _v6.d;
          var llRight = _v6.e;
          var lRight = left.e;
          return A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
        } else {
          return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
        }
      }
    });
    var $elm$core$Basics$compare = _Utils_compare;
    var $elm$core$Dict$insertHelp = F3(function(key, value, dict) {
      if (dict.$ === -2) {
        return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
      } else {
        var nColor = dict.a;
        var nKey = dict.b;
        var nValue = dict.c;
        var nLeft = dict.d;
        var nRight = dict.e;
        var _v1 = A2($elm$core$Basics$compare, key, nKey);
        switch (_v1) {
          case 0:
            return A5($elm$core$Dict$balance, nColor, nKey, nValue, A3($elm$core$Dict$insertHelp, key, value, nLeft), nRight);
          case 1:
            return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
          default:
            return A5($elm$core$Dict$balance, nColor, nKey, nValue, nLeft, A3($elm$core$Dict$insertHelp, key, value, nRight));
        }
      }
    });
    var $elm$core$Dict$insert = F3(function(key, value, dict) {
      var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
      if (_v0.$ === -1 && !_v0.a) {
        var _v1 = _v0.a;
        var k2 = _v0.b;
        var v = _v0.c;
        var l = _v0.d;
        var r = _v0.e;
        return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, l, r);
      } else {
        var x2 = _v0;
        return x2;
      }
    });
    var $elm$core$Set$insert = F2(function(key, _v0) {
      var dict = _v0;
      return A3($elm$core$Dict$insert, key, 0, dict);
    });
    var $author$project$Options$App$parseQueryParams = $elm$parser$Parser$oneOf(_List_fromArray([
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed({ bP: false, aD: $elm$core$Set$empty }), $elm$parser$Parser$end),
      A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(function(params) {
        return params;
      }), $elm$parser$Parser$symbol("?")), $elm$parser$Parser$symbol("{")), A2($elm$parser$Parser$ignorer, $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed({ bP: true, aD: $elm$core$Set$empty }), $elm$parser$Parser$symbol("**")),
        A2($elm$parser$Parser$loop, { bP: false, aD: $elm$core$Set$empty }, function(params) {
          return $elm$parser$Parser$oneOf(_List_fromArray([
            A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed(function(fieldName) {
              return $elm$parser$Parser$Loop(_Utils_update(params, {
                aD: A2($elm$core$Set$insert, fieldName, params.aD)
              }));
            }), A2($elm$parser$Parser$ignorer, $elm$parser$Parser$getChompedString(A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(0), $elm$parser$Parser$chompIf($elm$core$Char$isAlpha)), $elm$parser$Parser$chompWhile($elm$core$Char$isAlpha))), $elm$parser$Parser$chompWhile(function(c) {
              return c === ",";
            }))),
            $elm$parser$Parser$succeed($elm$parser$Parser$Done(params))
          ]));
        })
      ])), $elm$parser$Parser$symbol("}")))
    ]));
    var $author$project$Options$App$parseUrlPattern = function(pattern) {
      return A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed(F2(function(path, queryParams) {
        return { a9: path.a9, l7: path.l7, g7: pattern, aW: queryParams };
      })), $author$project$Options$App$parsePath), $author$project$Options$App$parseQueryParams);
    };
    var $elm$core$List$map = F2(function(f, xs) {
      return A3($elm$core$List$foldr, F2(function(x2, acc) {
        return A2($elm$core$List$cons, f(x2), acc);
      }), _List_Nil, xs);
    });
    var $elm$parser$Parser$DeadEnd = F3(function(row, col, problem) {
      return { di: col, hk: problem, mu: row };
    });
    var $elm$parser$Parser$problemToDeadEnd = function(p) {
      return A3($elm$parser$Parser$DeadEnd, p.mu, p.di, p.hk);
    };
    var $elm$parser$Parser$Advanced$bagToList = F2(function(bag, list) {
      bagToList:
        while (true) {
          switch (bag.$) {
            case 0:
              return list;
            case 1:
              var bag1 = bag.a;
              var x2 = bag.b;
              var $temp$bag = bag1, $temp$list = A2($elm$core$List$cons, x2, list);
              bag = $temp$bag;
              list = $temp$list;
              continue bagToList;
            default:
              var bag1 = bag.a;
              var bag2 = bag.b;
              var $temp$bag = bag1, $temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
              bag = $temp$bag;
              list = $temp$list;
              continue bagToList;
          }
        }
    });
    var $elm$parser$Parser$Advanced$run = F2(function(_v0, src) {
      var parse = _v0;
      var _v1 = parse({ di: 1, m: _List_Nil, q: 1, f: 0, mu: 1, iv: src });
      if (!_v1.$) {
        var value = _v1.b;
        return $elm$core$Result$Ok(value);
      } else {
        var bag = _v1.b;
        return $elm$core$Result$Err(A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
      }
    });
    var $elm$parser$Parser$run = F2(function(parser, source) {
      var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
      if (!_v0.$) {
        var a = _v0.a;
        return $elm$core$Result$Ok(a);
      } else {
        var problems = _v0.a;
        return $elm$core$Result$Err(A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
      }
    });
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $author$project$Options$App$decodeUrlPattern = F2(function(isRedirect, id) {
      return A2($elm$json$Json$Decode$andThen, function(string) {
        var _v0 = A2($elm$parser$Parser$run, $author$project$Options$App$parseUrlPattern(string), string);
        if (!_v0.$) {
          var urlPattern = _v0.a;
          return $elm$json$Json$Decode$succeed($author$project$Options$App$UrlParsedPattern(urlPattern));
        } else {
          var err = _v0.a;
          return $elm$json$Json$Decode$succeed($author$project$Options$App$UrlError({ dB: err, fp: isRedirect, j: id, g7: string }));
        }
      }, $elm$json$Json$Decode$string);
    });
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $author$project$Options$App$decodeRoute = A2($elm$json$Json$Decode$andThen, function(id) {
      return A3($elm$json$Json$Decode$map2, $author$project$Options$App$Route(id), A2($elm$json$Json$Decode$field, "url", A2($author$project$Options$App$decodeUrlPattern, false, id)), A2($elm$json$Json$Decode$field, "redirectFrom", $elm$json$Json$Decode$list(A2($author$project$Options$App$decodeUrlPattern, true, id))));
    }, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string));
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $elm$json$Json$Decode$map = _Json_map1;
    var $elm$json$Json$Decode$oneOf = _Json_oneOf;
    var $elm$json$Json$Decode$maybe = function(decoder) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
        $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
      ]));
    };
    var $author$project$Options$App$decodePageUsages = $elm$json$Json$Decode$list(A5($elm$json$Json$Decode$map4, $author$project$Options$App$PageUsage, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "moduleName", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "urlOnly", $elm$json$Json$Decode$bool), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "route", $author$project$Options$App$decodeRoute))));
    var $author$project$Options$App$Store = function(id) {
      return { e4: id };
    };
    var $author$project$Options$App$decodeStore = A2($elm$json$Json$Decode$map, $author$project$Options$App$Store, A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$string));
    var $author$project$Options$App$decode = A3($elm$json$Json$Decode$map2, $author$project$Options$App$Options, A2($elm$json$Json$Decode$field, "pages", $author$project$Options$App$decodePageUsages), A2($elm$json$Json$Decode$field, "stores", $elm$json$Json$Decode$list($author$project$Options$App$decodeStore)));
    var $author$project$Theme$ElmUI = 1;
    var $author$project$Theme$HTML = 0;
    var $author$project$Theme$Name = $elm$core$Basics$identity;
    var $author$project$Theme$Theme = F8(function(namespace, colors, target, themes, spacing, typography, borderRadii, borderWidths) {
      return { kb: borderRadii, kc: borderWidths, kx: colors, aR: namespace, iq: spacing, iS: target, mQ: themes, mW: typography };
    });
    var $elm$json$Json$Decode$at = F2(function(fields, decoder) {
      return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
    });
    var $author$project$Theme$Color$Grad = function(a) {
      return { $: 1, a };
    };
    var $author$project$Theme$Decoder$PaletteColor = function(a) {
      return { $: 1, a };
    };
    var $author$project$Theme$Decoder$SingleColor = function(a) {
      return { $: 0, a };
    };
    var $author$project$Theme$Color$AtLightness = function(a) {
      return { $: 1, a };
    };
    var $author$project$Theme$Color$Color = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $author$project$Theme$Color$atLightness = F2(function(amount, clr) {
      return A2($author$project$Theme$Color$Color, $elm$core$Maybe$Just($author$project$Theme$Color$AtLightness(amount)), clr);
    });
    var $author$project$Theme$Decoder$autoswatch = F2(function(baseName, baseColor) {
      var toLuminance = F2(function(n, color) {
        return {
          kw: A2($author$project$Theme$Color$atLightness, n, color),
          j: baseName,
          as: $elm$core$Maybe$Just(n)
        };
      });
      return _List_fromArray([
        A2(toLuminance, 5, baseColor),
        A2(toLuminance, 10, baseColor),
        A2(toLuminance, 20, baseColor),
        A2(toLuminance, 30, baseColor),
        A2(toLuminance, 40, baseColor),
        A2(toLuminance, 50, baseColor),
        A2(toLuminance, 60, baseColor),
        A2(toLuminance, 70, baseColor),
        A2(toLuminance, 80, baseColor),
        A2(toLuminance, 90, baseColor),
        A2(toLuminance, 95, baseColor)
      ]);
    });
    var $elm$core$List$concatMap = F2(function(f, list) {
      return $elm$core$List$concat(A2($elm$core$List$map, f, list));
    });
    var $author$project$Theme$Color$parseGradient = A2($elm$parser$Parser$map, $author$project$Theme$Color$Grad, $elm$parser$Parser$getChompedString($elm$parser$Parser$chompWhile(function(_v0) {
      return true;
    })));
    var $author$project$Theme$Color$hex8 = $elm$parser$Parser$oneOf(_List_fromArray([
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(0), $elm$parser$Parser$symbol("0")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(1), $elm$parser$Parser$symbol("1")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(2), $elm$parser$Parser$symbol("2")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(3), $elm$parser$Parser$symbol("3")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(4), $elm$parser$Parser$symbol("4")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(5), $elm$parser$Parser$symbol("5")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(6), $elm$parser$Parser$symbol("6")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(7), $elm$parser$Parser$symbol("7")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(8), $elm$parser$Parser$symbol("8")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(9), $elm$parser$Parser$symbol("9")),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(10), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("a"),
        $elm$parser$Parser$symbol("A")
      ]))),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(11), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("b"),
        $elm$parser$Parser$symbol("B")
      ]))),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(12), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("c"),
        $elm$parser$Parser$symbol("C")
      ]))),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(13), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("d"),
        $elm$parser$Parser$symbol("D")
      ]))),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(14), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("e"),
        $elm$parser$Parser$symbol("E")
      ]))),
      A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(15), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$symbol("f"),
        $elm$parser$Parser$symbol("F")
      ])))
    ]));
    var $author$project$Theme$Color$parseHex16 = A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed(F2(function(one, two) {
      return one * 16 + two;
    })), $author$project$Theme$Color$hex8), $author$project$Theme$Color$hex8);
    var $avh4$elm_color$Color$RgbaSpace = F4(function(a, b, c, d) {
      return { $: 0, a, b, c, d };
    });
    var $avh4$elm_color$Color$scaleFrom255 = function(c) {
      return c / 255;
    };
    var $avh4$elm_color$Color$rgb255 = F3(function(r, g2, b) {
      return A4($avh4$elm_color$Color$RgbaSpace, $avh4$elm_color$Color$scaleFrom255(r), $avh4$elm_color$Color$scaleFrom255(g2), $avh4$elm_color$Color$scaleFrom255(b), 1);
    });
    var $author$project$Theme$Color$parseHex = A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($avh4$elm_color$Color$rgb255), $elm$parser$Parser$symbol("#")), $author$project$Theme$Color$parseHex16), $author$project$Theme$Color$parseHex16), $author$project$Theme$Color$parseHex16);
    var $elm$parser$Parser$ExpectingInt = { $: 1 };
    var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
    var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
    var $elm$parser$Parser$Advanced$bumpOffset = F2(function(newOffset, s) {
      return { di: s.di + (newOffset - s.f), m: s.m, q: s.q, f: newOffset, mu: s.mu, iv: s.iv };
    });
    var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
    var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
    var $elm$parser$Parser$Advanced$consumeExp = F2(function(offset, src) {
      if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
        var eOffset = offset + 1;
        var expOffset = A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src) ? eOffset + 1 : eOffset;
        var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
        return _Utils_eq(expOffset, newOffset) ? -newOffset : newOffset;
      } else {
        return offset;
      }
    });
    var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(function(offset, src) {
      return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2($elm$parser$Parser$Advanced$consumeExp, A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src), src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
    });
    var $elm$parser$Parser$Advanced$finalizeInt = F5(function(invalid, handler, startOffset, _v0, s) {
      var endOffset = _v0.a;
      var n = _v0.b;
      if (handler.$ === 1) {
        var x2 = handler.a;
        return A2($elm$parser$Parser$Advanced$Bad, true, A2($elm$parser$Parser$Advanced$fromState, s, x2));
      } else {
        var toValue = handler.a;
        return _Utils_eq(startOffset, endOffset) ? A2($elm$parser$Parser$Advanced$Bad, _Utils_cmp(s.f, startOffset) < 0, A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3($elm$parser$Parser$Advanced$Good, true, toValue(n), A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
      }
    });
    var $elm$parser$Parser$Advanced$fromInfo = F4(function(row, col, x2, context) {
      return A2($elm$parser$Parser$Advanced$AddRight, $elm$parser$Parser$Advanced$Empty, A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x2, context));
    });
    var $elm$core$String$toFloat = _String_toFloat;
    var $elm$parser$Parser$Advanced$finalizeFloat = F6(function(invalid, expecting, intSettings, floatSettings, intPair, s) {
      var intOffset = intPair.a;
      var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.iv);
      if (floatOffset < 0) {
        return A2($elm$parser$Parser$Advanced$Bad, true, A4($elm$parser$Parser$Advanced$fromInfo, s.mu, s.di - (floatOffset + s.f), invalid, s.m));
      } else {
        if (_Utils_eq(s.f, floatOffset)) {
          return A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, expecting));
        } else {
          if (_Utils_eq(intOffset, floatOffset)) {
            return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.f, intPair, s);
          } else {
            if (floatSettings.$ === 1) {
              var x2 = floatSettings.a;
              return A2($elm$parser$Parser$Advanced$Bad, true, A2($elm$parser$Parser$Advanced$fromState, s, invalid));
            } else {
              var toValue = floatSettings.a;
              var _v1 = $elm$core$String$toFloat(A3($elm$core$String$slice, s.f, floatOffset, s.iv));
              if (_v1.$ === 1) {
                return A2($elm$parser$Parser$Advanced$Bad, true, A2($elm$parser$Parser$Advanced$fromState, s, invalid));
              } else {
                var n = _v1.a;
                return A3($elm$parser$Parser$Advanced$Good, true, toValue(n), A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
              }
            }
          }
        }
      }
    });
    var $elm$parser$Parser$Advanced$number = function(c) {
      return function(s) {
        if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.f, s.iv)) {
          var zeroOffset = s.f + 1;
          var baseOffset = zeroOffset + 1;
          return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.iv) ? A5($elm$parser$Parser$Advanced$finalizeInt, c.ls, c.lh, baseOffset, A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.iv), s) : A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.iv) ? A5($elm$parser$Parser$Advanced$finalizeInt, c.ls, c.gD, baseOffset, A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.iv), s) : A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.iv) ? A5($elm$parser$Parser$Advanced$finalizeInt, c.ls, c.cY, baseOffset, A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.iv), s) : A6($elm$parser$Parser$Advanced$finalizeFloat, c.ls, c.d9, c.lq, c.k5, _Utils_Tuple2(zeroOffset, 0), s);
        } else {
          return A6($elm$parser$Parser$Advanced$finalizeFloat, c.ls, c.d9, c.lq, c.k5, A3($elm$parser$Parser$Advanced$consumeBase, 10, s.f, s.iv), s);
        }
      };
    };
    var $elm$parser$Parser$Advanced$int = F2(function(expecting, invalid) {
      return $elm$parser$Parser$Advanced$number({
        cY: $elm$core$Result$Err(invalid),
        d9: expecting,
        k5: $elm$core$Result$Err(invalid),
        lh: $elm$core$Result$Err(invalid),
        lq: $elm$core$Result$Ok($elm$core$Basics$identity),
        ls: invalid,
        gD: $elm$core$Result$Err(invalid)
      });
    });
    var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
    var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(function(c) {
      return c === " " || (c === `
` || c === "\r");
    });
    var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
    var $author$project$Theme$Color$parseRgb = A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($avh4$elm_color$Color$rgb255), $elm$parser$Parser$symbol("rgb(")), $elm$parser$Parser$spaces), A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$int, $elm$parser$Parser$spaces), $elm$parser$Parser$symbol(",")), $elm$parser$Parser$spaces)), A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$int, $elm$parser$Parser$spaces), $elm$parser$Parser$symbol(",")), $elm$parser$Parser$spaces)), A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$int, $elm$parser$Parser$spaces), $elm$parser$Parser$symbol(")")));
    var $author$project$Theme$Color$cssParser = $elm$parser$Parser$oneOf(_List_fromArray([
      A2($elm$parser$Parser$map, $author$project$Theme$Color$Color($elm$core$Maybe$Nothing), $author$project$Theme$Color$parseRgb),
      A2($elm$parser$Parser$map, $author$project$Theme$Color$Color($elm$core$Maybe$Nothing), $author$project$Theme$Color$parseHex),
      $author$project$Theme$Color$parseGradient
    ]));
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $author$project$Theme$Decoder$decodeColor = A2($elm$json$Json$Decode$andThen, function(string) {
      var _v0 = A2($elm$parser$Parser$run, $author$project$Theme$Color$cssParser, string);
      if (!_v0.$) {
        var color = _v0.a;
        return $elm$json$Json$Decode$succeed(color);
      } else {
        var err = _v0.a;
        return $elm$json$Json$Decode$fail("I don't recognize this color: " + string);
      }
    }, $elm$json$Json$Decode$string);
    var $elm$core$List$maybeCons = F3(function(f, mx, xs) {
      var _v0 = f(mx);
      if (!_v0.$) {
        var x2 = _v0.a;
        return A2($elm$core$List$cons, x2, xs);
      } else {
        return xs;
      }
    });
    var $elm$core$List$filterMap = F2(function(f, xs) {
      return A3($elm$core$List$foldr, $elm$core$List$maybeCons(f), _List_Nil, xs);
    });
    var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
    var $elm$core$Maybe$map = F2(function(f, maybe) {
      if (!maybe.$) {
        var value = maybe.a;
        return $elm$core$Maybe$Just(f(value));
      } else {
        return $elm$core$Maybe$Nothing;
      }
    });
    var $elm$core$Basics$min = F2(function(x2, y2) {
      return _Utils_cmp(x2, y2) < 0 ? x2 : y2;
    });
    var $elm$core$String$toInt = _String_toInt;
    var $author$project$Theme$Decoder$decodeColorSwatch = A2($elm$json$Json$Decode$map, $elm$core$List$concatMap(function(_v2) {
      var key = _v2.a;
      var inner = _v2.b;
      if (!inner.$) {
        if (inner.a.$ === 1) {
          var grad = inner.a.a;
          return _List_fromArray([
            {
              kw: $author$project$Theme$Color$Grad(grad),
              j: key,
              as: $elm$core$Maybe$Nothing
            }
          ]);
        } else {
          var _v4 = inner.a;
          var color = _v4.b;
          return A2($author$project$Theme$Decoder$autoswatch, key, color);
        }
      } else {
        var pal = inner.a;
        return A2($elm$core$List$map, function(item) {
          return {
            kw: item.kw,
            j: key,
            as: A2($elm$core$Maybe$map, function(n) {
              return A2($elm$core$Basics$min, 100, A2($elm$core$Basics$max, 0, n));
            }, $elm$core$String$toInt(item.j))
          };
        }, pal.kx);
      }
    }), $elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$oneOf(_List_fromArray([
      A2($elm$json$Json$Decode$map, $author$project$Theme$Decoder$SingleColor, $author$project$Theme$Decoder$decodeColor),
      A2($elm$json$Json$Decode$andThen, function(colorPairs) {
        return $elm$json$Json$Decode$succeed($author$project$Theme$Decoder$PaletteColor({
          kx: A2($elm$core$List$filterMap, function(_v0) {
            var name = _v0.a;
            var maybeColor = _v0.b;
            if (maybeColor.$ === 1) {
              return $elm$core$Maybe$Nothing;
            } else {
              var color = maybeColor.a;
              return $elm$core$Maybe$Just({ kw: color, j: name });
            }
          }, colorPairs)
        }));
      }, $elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$maybe($author$project$Theme$Decoder$decodeColor)))
    ]))));
    var $author$project$Theme$Decoder$decodeNamed = function(inner) {
      return A2($elm$json$Json$Decode$map, $elm$core$List$map(function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        return { lt: value, j: key };
      }), $elm$json$Json$Decode$keyValuePairs(inner));
    };
    var $elm$core$List$head = function(list) {
      if (list.b) {
        var x2 = list.a;
        var xs = list.b;
        return $elm$core$Maybe$Just(x2);
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$core$List$filter = F2(function(isGood, list) {
      return A3($elm$core$List$foldr, F2(function(x2, xs) {
        return isGood(x2) ? A2($elm$core$List$cons, x2, xs) : xs;
      }), _List_Nil, list);
    });
    var $author$project$Theme$toColorName = function(colorInstance) {
      var _v0 = colorInstance.as;
      if (!_v0.$) {
        var variant = _v0.a;
        return _Utils_ap(colorInstance.j, $elm$core$String$fromInt(variant));
      } else {
        return colorInstance.j;
      }
    };
    var $author$project$Theme$Decoder$lookupColorPath = F2(function(colorVar, colors) {
      var matchVariant = function(instance) {
        var _v0 = instance.as;
        if (!_v0.$) {
          var variant = _v0.a;
          return _Utils_eq(colorVar, $elm$core$String$fromInt(variant));
        } else {
          return false;
        }
      };
      var match = function(instance) {
        return _Utils_eq(colorVar, instance.j) || (matchVariant(instance) || _Utils_eq(colorVar, $author$project$Theme$toColorName(instance)));
      };
      return A2($elm$core$List$filter, match, colors);
    });
    var $author$project$Theme$Decoder$lookupExactColor = F2(function(colorVar, colors) {
      return $elm$core$List$head(A2($author$project$Theme$Decoder$lookupColorPath, colorVar, colors));
    });
    var $author$project$Theme$Decoder$decodeColorRef = function(colors) {
      return A2($elm$json$Json$Decode$andThen, function(str) {
        var _v0 = A2($author$project$Theme$Decoder$lookupExactColor, str, colors);
        if (!_v0.$) {
          var color = _v0.a;
          return $elm$json$Json$Decode$succeed(color);
        } else {
          return $elm$json$Json$Decode$fail("I don't recognize this color: " + str);
        }
      }, $elm$json$Json$Decode$string);
    };
    var $author$project$Theme$Decoder$maybeField = F2(function(key, decoder) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, A2($elm$json$Json$Decode$field, key, decoder)),
        A2($elm$json$Json$Decode$andThen, function(_v0) {
          return $elm$json$Json$Decode$fail("I don't recognize the value for " + key);
        }, A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$succeed(0))),
        $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
      ]));
    });
    var $author$project$Theme$Decoder$decodeColorDefinitionNode = F4(function(maybeTheme, styleName, colors, semanticMap) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$andThen, function(colorStr) {
          var _v0 = A2($author$project$Theme$Decoder$lookupExactColor, colorStr, colors);
          if (!_v0.$) {
            var color = _v0.a;
            return $elm$json$Json$Decode$succeed({ jO: $elm$core$Maybe$Nothing, kw: color, k6: $elm$core$Maybe$Nothing, lk: $elm$core$Maybe$Nothing, j: styleName, i$: $elm$core$Maybe$Nothing });
          } else {
            return $elm$json$Json$Decode$fail("I don't recognize this color: " + colorStr);
          }
        }, $elm$json$Json$Decode$string),
        A5($elm$json$Json$Decode$map4, F4(function(color, hover, active, focus) {
          return { jO: active, kw: color, k6: focus, lk: hover, j: styleName, i$: maybeTheme };
        }), A2($elm$json$Json$Decode$field, "color", $author$project$Theme$Decoder$decodeColorRef(colors)), A2($author$project$Theme$Decoder$maybeField, ":hover", $author$project$Theme$Decoder$decodeColorRef(colors)), A2($author$project$Theme$Decoder$maybeField, ":active", $author$project$Theme$Decoder$decodeColorRef(colors)), A2($author$project$Theme$Decoder$maybeField, ":focus", $author$project$Theme$Decoder$decodeColorRef(colors)))
      ]));
    });
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $elm$core$String$dropLeft = F2(function(n, string) {
      return n < 1 ? string : A3($elm$core$String$slice, n, $elm$core$String$length(string), string);
    });
    var $elm$core$String$startsWith = _String_startsWith;
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $author$project$Theme$Decoder$decodeColorDefinition = F3(function(styleName, colors, semanticMap) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$map, function(colorStr) {
          var _v0 = A2($author$project$Theme$Decoder$lookupExactColor, colorStr, colors);
          if (!_v0.$) {
            var color = _v0.a;
            return _List_fromArray([
              { jO: $elm$core$Maybe$Nothing, kw: color, k6: $elm$core$Maybe$Nothing, lk: $elm$core$Maybe$Nothing, j: "", i$: $elm$core$Maybe$Nothing }
            ]);
          } else {
            return _List_Nil;
          }
        }, $elm$json$Json$Decode$string),
        A3($elm$json$Json$Decode$map2, $elm$core$List$cons, A4($author$project$Theme$Decoder$decodeColorDefinitionNode, $elm$core$Maybe$Nothing, styleName, colors, semanticMap), A2($elm$json$Json$Decode$andThen, function(keyValues) {
          var decodePair = function(_v5) {
            var key = _v5.a;
            var value = _v5.b;
            if (A2($elm$core$String$startsWith, "@", key)) {
              var _v4 = A2($elm$json$Json$Decode$decodeValue, A4($author$project$Theme$Decoder$decodeColorDefinitionNode, $elm$core$Maybe$Just(A2($elm$core$String$dropLeft, 1, key)), styleName, colors, semanticMap), value);
              if (!_v4.$) {
                var colorDef = _v4.a;
                return $elm$core$Result$Ok($elm$core$Maybe$Just(colorDef));
              } else {
                var err2 = _v4.a;
                return $elm$core$Result$Err(err2);
              }
            } else {
              return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
            }
          };
          var decodedResults = A2($elm$core$List$map, decodePair, keyValues);
          var _v1 = A3($elm$core$List$foldr, F2(function(result, acc) {
            var _v2 = _Utils_Tuple2(result, acc);
            if (!_v2.a.$) {
              if (!_v2.b.$) {
                var maybeVal = _v2.a.a;
                var vals = _v2.b.a;
                if (!maybeVal.$) {
                  var val = maybeVal.a;
                  return $elm$core$Result$Ok(A2($elm$core$List$cons, val, vals));
                } else {
                  return $elm$core$Result$Ok(vals);
                }
              } else {
                var err2 = _v2.b.a;
                return $elm$core$Result$Err(err2);
              }
            } else {
              var err2 = _v2.a.a;
              return $elm$core$Result$Err(err2);
            }
          }), $elm$core$Result$Ok(_List_Nil), decodedResults);
          if (!_v1.$) {
            var values = _v1.a;
            return $elm$json$Json$Decode$succeed(values);
          } else {
            var err = _v1.a;
            return $elm$json$Json$Decode$fail($elm$json$Json$Decode$errorToString(err));
          }
        }, $elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$value)))
      ]));
    });
    var $author$project$Theme$Decoder$decodeNamedColorDefinitions = F2(function(colors, semanticMap) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($elm$json$Json$Decode$andThen, function(colorStr) {
          var _v0 = A2($author$project$Theme$Decoder$lookupExactColor, colorStr, colors);
          if (!_v0.$) {
            var color = _v0.a;
            return $elm$json$Json$Decode$succeed(_List_fromArray([
              { jO: $elm$core$Maybe$Nothing, kw: color, k6: $elm$core$Maybe$Nothing, lk: $elm$core$Maybe$Nothing, j: "", i$: $elm$core$Maybe$Nothing }
            ]));
          } else {
            return $elm$json$Json$Decode$fail("I don't recognize this color: " + colorStr);
          }
        }, $elm$json$Json$Decode$string),
        A2($elm$json$Json$Decode$map, function(keyValues) {
          return A2($elm$core$List$concatMap, function(_v1) {
            var name = _v1.a;
            var defs = _v1.b;
            return A2($elm$core$List$map, function(def) {
              return _Utils_update(def, { j: name });
            }, defs);
          }, keyValues);
        }, $elm$json$Json$Decode$keyValuePairs(A3($author$project$Theme$Decoder$decodeColorDefinition, "", colors, semanticMap)))
      ]));
    });
    var $author$project$Theme$Decoder$decodeSemanticMap = function(allowedKeys) {
      if (!allowedKeys.b) {
        return $elm$json$Json$Decode$succeed($elm$core$Dict$empty);
      } else {
        var key = allowedKeys.a;
        var remaining = allowedKeys.b;
        return A2($elm$json$Json$Decode$andThen, function(maybeValue) {
          return A2($elm$json$Json$Decode$map, function(restOfMap) {
            if (maybeValue.$ === 1) {
              return restOfMap;
            } else {
              var value = maybeValue.a;
              return A3($elm$core$Dict$insert, value, key, restOfMap);
            }
          }, $author$project$Theme$Decoder$decodeSemanticMap(remaining));
        }, $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$string)));
      }
    };
    var $author$project$Theme$Named = F2(function(name, item) {
      return { lt: item, j: name };
    });
    var $elm$json$Json$Decode$float = _Json_decodeFloat;
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $elm$core$Maybe$withDefault = F2(function(_default, maybe) {
      if (!maybe.$) {
        var value = maybe.a;
        return value;
      } else {
        return _default;
      }
    });
    var $author$project$Theme$Decoder$decodeCapitalSizing = A4($elm$json$Json$Decode$map3, F3(function(top, bottom, fontSizeByCapital) {
      return {
        kd: A2($elm$core$Maybe$withDefault, 0, bottom),
        k7: fontSizeByCapital,
        mT: A2($elm$core$Maybe$withDefault, 0, top)
      };
    }), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "top", $elm$json$Json$Decode$float)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "bottom", $elm$json$Json$Decode$float)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "fontSizeByCapital", $elm$json$Json$Decode$float)));
    var $elm$core$List$singleton = function(value) {
      return _List_fromArray([value]);
    };
    var $author$project$Theme$Decoder$decodeVariants = $elm$json$Json$Decode$oneOf(_List_fromArray([
      A2($elm$json$Json$Decode$field, "variant", A2($elm$json$Json$Decode$map, $elm$core$List$singleton, $elm$json$Json$Decode$string)),
      A2($elm$json$Json$Decode$field, "variants", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
      $elm$json$Json$Decode$succeed(_List_Nil)
    ]));
    var $author$project$Theme$Bold = 2;
    var $author$project$Theme$Default = 0;
    var $author$project$Theme$Light = 3;
    var $author$project$Theme$Regular = 1;
    var $elm$json$Json$Decode$int = _Json_decodeInt;
    var $elm$core$List$sortBy = _List_sortBy;
    var $elm$core$List$sort = function(xs) {
      return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
    };
    var $author$project$Theme$Decoder$decodeWeights = $elm$json$Json$Decode$oneOf(_List_fromArray([
      A2($elm$json$Json$Decode$field, "weight", A2($elm$json$Json$Decode$map, function(weight) {
        return _List_fromArray([
          _Utils_Tuple2(0, weight)
        ]);
      }, $elm$json$Json$Decode$int)),
      A2($elm$json$Json$Decode$field, "weights", A2($elm$json$Json$Decode$andThen, function(weights) {
        var _v0 = $elm$core$List$sort(weights);
        if (!_v0.b) {
          return $elm$json$Json$Decode$succeed(_List_fromArray([
            _Utils_Tuple2(0, 400)
          ]));
        } else {
          if (!_v0.b.b) {
            var weightOne = _v0.a;
            return $elm$json$Json$Decode$succeed(_List_fromArray([
              _Utils_Tuple2(0, weightOne)
            ]));
          } else {
            if (!_v0.b.b.b) {
              var weightOne = _v0.a;
              var _v1 = _v0.b;
              var weightTwo = _v1.a;
              return weightOne < 400 ? $elm$json$Json$Decode$succeed(_List_fromArray([
                _Utils_Tuple2(3, weightOne),
                _Utils_Tuple2(1, weightTwo)
              ])) : $elm$json$Json$Decode$succeed(_List_fromArray([
                _Utils_Tuple2(1, weightOne),
                _Utils_Tuple2(2, weightTwo)
              ]));
            } else {
              if (!_v0.b.b.b.b) {
                var weightOne = _v0.a;
                var _v2 = _v0.b;
                var weightTwo = _v2.a;
                var _v3 = _v2.b;
                var weightThree = _v3.a;
                return $elm$json$Json$Decode$succeed(_List_fromArray([
                  _Utils_Tuple2(3, weightOne),
                  _Utils_Tuple2(1, weightTwo),
                  _Utils_Tuple2(2, weightThree)
                ]));
              } else {
                var tooMany = _v0;
                return $elm$json$Json$Decode$fail("I can only support a max of 3 distinct weights for a given typography size!  But I found " + A2($elm$core$String$join, ", ", A2($elm$core$List$map, $elm$core$String$fromInt, weights)));
              }
            }
          }
        }
      }, $elm$json$Json$Decode$list($elm$json$Json$Decode$int))),
      $elm$json$Json$Decode$succeed(_List_fromArray([
        _Utils_Tuple2(0, 400)
      ]))
    ]));
    var $author$project$Theme$Decoder$decodeTypefaceSize = A5($elm$json$Json$Decode$map4, F4(function(size, weights, variants, lineHeight) {
      return A2($elm$core$List$map, function(weight) {
        return { lA: lineHeight, ih: size, m1: variants, m6: weight };
      }, weights);
    }), A2($elm$json$Json$Decode$field, "size", $elm$json$Json$Decode$int), $author$project$Theme$Decoder$decodeWeights, $author$project$Theme$Decoder$decodeVariants, A2($elm$json$Json$Decode$map, $elm$core$Maybe$withDefault(1.2), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "lineHeight", $elm$json$Json$Decode$float))));
    var $author$project$Theme$Decoder$nonEmptyList = function(decoder) {
      return A2($elm$json$Json$Decode$andThen, function(list) {
        if (!list.b) {
          return $elm$json$Json$Decode$fail("Expected a non-empty list");
        } else {
          var first = list.a;
          var rest = list.b;
          return $elm$json$Json$Decode$succeed(_Utils_Tuple2(first, rest));
        }
      }, $elm$json$Json$Decode$list(decoder));
    };
    var $author$project$Theme$Decoder$decodeTypeface = A4($elm$json$Json$Decode$map3, F3(function(_v0, maybeCapitalSizing, namedSizes) {
      var font = _v0.a;
      var fallback = _v0.b;
      return A2($elm$core$List$concatMap, function(_v1) {
        var name = _v1.a;
        var sizes = _v1.b;
        return A2($elm$core$List$map, function(size) {
          return A2($author$project$Theme$Named, name, { kk: maybeCapitalSizing, k$: font, k1: fallback, lA: size.lA, ih: size.ih, m1: size.m1, m6: size.m6 });
        }, sizes);
      }, namedSizes);
    }), A2($elm$json$Json$Decode$field, "font", $author$project$Theme$Decoder$nonEmptyList($elm$json$Json$Decode$string)), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "capitalSizing", $author$project$Theme$Decoder$decodeCapitalSizing)), A2($elm$json$Json$Decode$field, "sizes", $elm$json$Json$Decode$keyValuePairs($author$project$Theme$Decoder$decodeTypefaceSize)));
    var $author$project$Theme$Decoder$gatherAltnerateThemeNames = F2(function(defs, existing) {
      return A3($elm$core$List$foldl, F2(function(def, set) {
        var _v0 = def.i$;
        if (!_v0.$) {
          var name = _v0.a;
          return A2($elm$core$Set$insert, name, set);
        } else {
          return set;
        }
      }), existing, defs);
    });
    var $author$project$Theme$Decoder$literal = F2(function(str, value) {
      return A2($elm$json$Json$Decode$andThen, function(str2) {
        return _Utils_eq(str, str2) ? $elm$json$Json$Decode$succeed(value) : $elm$json$Json$Decode$fail("Expected " + (str + (" but got " + str2)));
      }, $elm$json$Json$Decode$string);
    });
    var $elm$json$Json$Decode$map6 = _Json_map6;
    var $author$project$Theme$Decoder$decode = A2($elm$json$Json$Decode$andThen, function(colorSwatches) {
      return A7($elm$json$Json$Decode$map6, A2($author$project$Theme$Theme, "ui", colorSwatches), A2($elm$json$Json$Decode$field, "target", $elm$json$Json$Decode$oneOf(_List_fromArray([
        A2($author$project$Theme$Decoder$literal, "html", 0),
        A2($author$project$Theme$Decoder$literal, "elm-ui", 1)
      ]))), A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, A2($elm$json$Json$Decode$andThen, function(semanticMap) {
        return A2($elm$json$Json$Decode$field, "colors", A4($elm$json$Json$Decode$map3, F3(function(text, bgs, borders) {
          var uniqueThemeNames = A2($author$project$Theme$Decoder$gatherAltnerateThemeNames, borders, A2($author$project$Theme$Decoder$gatherAltnerateThemeNames, bgs, A2($author$project$Theme$Decoder$gatherAltnerateThemeNames, text, $elm$core$Set$empty)));
          return {
            jV: A2($elm$core$List$map, function(name) {
              return {
                lt: {
                  bB: A2($elm$core$List$filter, function(t) {
                    return _Utils_eq(t.i$, $elm$core$Maybe$Just(name));
                  }, bgs),
                  c0: A2($elm$core$List$filter, function(t) {
                    return _Utils_eq(t.i$, $elm$core$Maybe$Just(name));
                  }, borders),
                  iW: A2($elm$core$List$filter, function(t) {
                    return _Utils_eq(t.i$, $elm$core$Maybe$Just(name));
                  }, text)
                },
                j: name
              };
            }, $elm$core$Set$toList(uniqueThemeNames)),
            dE: {
              bB: A2($elm$core$List$filter, function(t) {
                return _Utils_eq(t.i$, $elm$core$Maybe$Nothing);
              }, bgs),
              c0: A2($elm$core$List$filter, function(t) {
                return _Utils_eq(t.i$, $elm$core$Maybe$Nothing);
              }, borders),
              iW: A2($elm$core$List$filter, function(t) {
                return _Utils_eq(t.i$, $elm$core$Maybe$Nothing);
              }, text)
            }
          };
        }), A2($elm$json$Json$Decode$field, "text", A2($author$project$Theme$Decoder$decodeNamedColorDefinitions, colorSwatches, semanticMap)), A2($elm$json$Json$Decode$field, "background", A2($author$project$Theme$Decoder$decodeNamedColorDefinitions, colorSwatches, semanticMap)), A2($elm$json$Json$Decode$field, "border", A2($author$project$Theme$Decoder$decodeNamedColorDefinitions, colorSwatches, semanticMap))));
      }, A2($elm$json$Json$Decode$at, _List_fromArray(["colors", "aliases"]), $author$project$Theme$Decoder$decodeSemanticMap(_List_fromArray(["primary", "neutral", "success", "error"]))))), A2($elm$json$Json$Decode$field, "spacing", $author$project$Theme$Decoder$decodeNamed($elm$json$Json$Decode$int)), A2($elm$json$Json$Decode$field, "typography", A2($elm$json$Json$Decode$map, $elm$core$List$concat, $elm$json$Json$Decode$list($author$project$Theme$Decoder$decodeTypeface))), A2($elm$json$Json$Decode$map, $elm$core$Maybe$withDefault(_List_Nil), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "borders", A2($elm$json$Json$Decode$field, "radius", $author$project$Theme$Decoder$decodeNamed($elm$json$Json$Decode$int))))), A2($elm$json$Json$Decode$map, $elm$core$Maybe$withDefault(_List_Nil), $elm$json$Json$Decode$maybe(A2($elm$json$Json$Decode$field, "borders", A2($elm$json$Json$Decode$field, "width", $author$project$Theme$Decoder$decodeNamed($elm$json$Json$Decode$int))))));
    }, A2($elm$json$Json$Decode$at, _List_fromArray(["colors", "palette"]), $author$project$Theme$Decoder$decodeColorSwatch));
    var $author$project$Options$Assets$AssetGroup = F3(function(name, files, fileInfo) {
      return { k2: fileInfo, ek: files, j: name };
    });
    var $author$project$Options$Assets$File = F4(function(name, crumbs, pathOnServer, content) {
      return { aK: content, ax: crumbs, j: name, aB: pathOnServer };
    });
    var $author$project$Options$Assets$Binary = { $: 1 };
    var $author$project$Options$Assets$Text = function(a) {
      return { $: 0, a };
    };
    var $author$project$Options$Assets$decodeContent = $elm$json$Json$Decode$oneOf(_List_fromArray([
      A2($elm$json$Json$Decode$map, $author$project$Options$Assets$Text, $elm$json$Json$Decode$string),
      $elm$json$Json$Decode$succeed($author$project$Options$Assets$Binary)
    ]));
    var $author$project$Options$Assets$decodeFile = A5($elm$json$Json$Decode$map4, $author$project$Options$Assets$File, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "crumbs", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "pathOnServer", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "content", $author$project$Options$Assets$decodeContent));
    var $elm$core$Dict$fromList = function(assocs) {
      return A3($elm$core$List$foldl, F2(function(_v0, dict) {
        var key = _v0.a;
        var value = _v0.b;
        return A3($elm$core$Dict$insert, key, value, dict);
      }), $elm$core$Dict$empty, assocs);
    };
    var $elm$json$Json$Decode$dict = function(decoder) {
      return A2($elm$json$Json$Decode$map, $elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
    };
    var $author$project$Options$Assets$decodeAssetGroup = A4($elm$json$Json$Decode$map3, $author$project$Options$Assets$AssetGroup, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "files", $elm$json$Json$Decode$list($author$project$Options$Assets$decodeFile)), A2($elm$json$Json$Decode$field, "fileInfo", A2($elm$json$Json$Decode$map, function(dict) {
      return {
        lD: { ld: dict }
      };
    }, A2($elm$json$Json$Decode$field, "markdown", A2($elm$json$Json$Decode$field, "frontmatter", $elm$json$Json$Decode$dict($elm$json$Json$Decode$string))))));
    var $author$project$Press$Model$Many = 1;
    var $elm$core$String$cons = _String_cons;
    var $elm$core$String$fromChar = function(_char) {
      return A2($elm$core$String$cons, _char, "");
    };
    var $elm$core$Char$toLower = _Char_toLower;
    var $author$project$Path$decapitalize = function(str) {
      var _v0 = $elm$core$String$uncons(str);
      if (_v0.$ === 1) {
        return str;
      } else {
        var _v1 = _v0.a;
        var first = _v1.a;
        var tail = _v1.b;
        return _Utils_ap($elm$core$String$fromChar($elm$core$Char$toLower(first)), tail);
      }
    };
    var $elm$core$String$endsWith = _String_endsWith;
    var $elm$core$List$isEmpty = function(xs) {
      if (!xs.b) {
        return true;
      } else {
        return false;
      }
    };
    var $elm$core$String$replace = F3(function(before, after, string) {
      return A2($elm$core$String$join, after, A2($elm$core$String$split, before, string));
    });
    var $author$project$Press$Model$decodeViewRegions = A2($elm$json$Json$Decode$map, function(names) {
      var regions = A2($elm$core$List$map, function(name) {
        return A2($elm$core$String$endsWith, "[]", name) ? _Utils_Tuple2($author$project$Path$decapitalize(A3($elm$core$String$replace, "[]", "", name)), 1) : _Utils_Tuple2($author$project$Path$decapitalize(name), 0);
      }, names);
      return {
        F: $elm$core$List$isEmpty(regions) ? _List_fromArray([
          _Utils_Tuple2("primary", 0)
        ]) : regions
      };
    }, $elm$json$Json$Decode$list($elm$json$Json$Decode$string));
    var $author$project$Options$Docs$Docs = F5(function(readme, guides, project, modules, deps) {
      return { kL: deps, lg: guides, lL: modules, mb: project, me: readme };
    });
    var $author$project$Options$Docs$Guide = F2(function(name, content) {
      return { aK: content, j: name };
    });
    var $author$project$Options$Docs$decodeGuide = A3($elm$json$Json$Decode$map2, $author$project$Options$Docs$Guide, A2($elm$json$Json$Decode$field, "path", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "contents", $elm$json$Json$Decode$maybe($elm$json$Json$Decode$string)));
    var $elm$project_metadata_utils$Elm$Docs$Module = F6(function(name, comment, unions, aliases, values, binops) {
      return { jQ: aliases, j7: binops, aJ: comment, j: name, mY: unions, ju: values };
    });
    var $elm$project_metadata_utils$Elm$Docs$Alias = F4(function(name, comment, args, tipe) {
      return { cF: args, aJ: comment, j: name, cg: tipe };
    });
    var $elm$parser$Parser$Forbidden = 0;
    var $elm$project_metadata_utils$Elm$Type$Lambda = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $elm$project_metadata_utils$Elm$Type$Record = F2(function(a, b) {
      return { $: 4, a, b };
    });
    var $elm$project_metadata_utils$Elm$Type$Type = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $elm$project_metadata_utils$Elm$Type$Var = function(a) {
      return { $: 0, a };
    };
    var $elm$parser$Parser$Advanced$andThen = F2(function(callback, _v0) {
      var parseA = _v0;
      return function(s0) {
        var _v1 = parseA(s0);
        if (_v1.$ === 1) {
          var p = _v1.a;
          var x2 = _v1.b;
          return A2($elm$parser$Parser$Advanced$Bad, p, x2);
        } else {
          var p1 = _v1.a;
          var a = _v1.b;
          var s1 = _v1.c;
          var _v2 = callback(a);
          var parseB = _v2;
          var _v3 = parseB(s1);
          if (_v3.$ === 1) {
            var p2 = _v3.a;
            var x2 = _v3.b;
            return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x2);
          } else {
            var p2 = _v3.a;
            var b = _v3.b;
            var s2 = _v3.c;
            return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
          }
        }
      };
    });
    var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
    var $elm$project_metadata_utils$Elm$Type$arrow = $elm$parser$Parser$symbol("->");
    var $elm$parser$Parser$Advanced$backtrackable = function(_v0) {
      var parse = _v0;
      return function(s0) {
        var _v1 = parse(s0);
        if (_v1.$ === 1) {
          var x2 = _v1.b;
          return A2($elm$parser$Parser$Advanced$Bad, false, x2);
        } else {
          var a = _v1.b;
          var s1 = _v1.c;
          return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
        }
      };
    };
    var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
    var $elm$project_metadata_utils$Elm$Type$comma = $elm$parser$Parser$symbol(",");
    var $elm$project_metadata_utils$Elm$Type$isInnerVarChar = function(_char) {
      return $elm$core$Char$isAlphaNum(_char) || _char === "_";
    };
    var $elm$parser$Parser$ExpectingVariable = { $: 7 };
    var $elm$core$Dict$get = F2(function(targetKey, dict) {
      get:
        while (true) {
          if (dict.$ === -2) {
            return $elm$core$Maybe$Nothing;
          } else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = A2($elm$core$Basics$compare, targetKey, key);
            switch (_v1) {
              case 0:
                var $temp$targetKey = targetKey, $temp$dict = left;
                targetKey = $temp$targetKey;
                dict = $temp$dict;
                continue get;
              case 1:
                return $elm$core$Maybe$Just(value);
              default:
                var $temp$targetKey = targetKey, $temp$dict = right;
                targetKey = $temp$targetKey;
                dict = $temp$dict;
                continue get;
            }
          }
        }
    });
    var $elm$core$Dict$member = F2(function(key, dict) {
      var _v0 = A2($elm$core$Dict$get, key, dict);
      if (!_v0.$) {
        return true;
      } else {
        return false;
      }
    });
    var $elm$core$Set$member = F2(function(key, _v0) {
      var dict = _v0;
      return A2($elm$core$Dict$member, key, dict);
    });
    var $elm$parser$Parser$Advanced$varHelp = F7(function(isGood, offset, row, col, src, indent, context) {
      varHelp:
        while (true) {
          var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
          if (_Utils_eq(newOffset, -1)) {
            return { di: col, m: context, q: indent, f: offset, mu: row, iv: src };
          } else {
            if (_Utils_eq(newOffset, -2)) {
              var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent, $temp$context = context;
              isGood = $temp$isGood;
              offset = $temp$offset;
              row = $temp$row;
              col = $temp$col;
              src = $temp$src;
              indent = $temp$indent;
              context = $temp$context;
              continue varHelp;
            } else {
              var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent, $temp$context = context;
              isGood = $temp$isGood;
              offset = $temp$offset;
              row = $temp$row;
              col = $temp$col;
              src = $temp$src;
              indent = $temp$indent;
              context = $temp$context;
              continue varHelp;
            }
          }
        }
    });
    var $elm$parser$Parser$Advanced$variable = function(i) {
      return function(s) {
        var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.iy, s.f, s.iv);
        if (_Utils_eq(firstOffset, -1)) {
          return A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, i.d9));
        } else {
          var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.fg, s.f + 1, s.mu + 1, 1, s.iv, s.q, s.m) : A7($elm$parser$Parser$Advanced$varHelp, i.fg, firstOffset, s.mu, s.di + 1, s.iv, s.q, s.m);
          var name = A3($elm$core$String$slice, s.f, s1.f, s.iv);
          return A2($elm$core$Set$member, name, i.hM) ? A2($elm$parser$Parser$Advanced$Bad, false, A2($elm$parser$Parser$Advanced$fromState, s, i.d9)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
        }
      };
    };
    var $elm$parser$Parser$variable = function(i) {
      return $elm$parser$Parser$Advanced$variable({ d9: $elm$parser$Parser$ExpectingVariable, fg: i.fg, hM: i.hM, iy: i.iy });
    };
    var $elm$project_metadata_utils$Elm$Type$var = function(isFirst) {
      return $elm$parser$Parser$variable({ fg: $elm$project_metadata_utils$Elm$Type$isInnerVarChar, hM: $elm$core$Set$empty, iy: isFirst });
    };
    var $elm$project_metadata_utils$Elm$Type$lowVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isLower);
    var $elm$project_metadata_utils$Elm$Type$spaces = $elm$parser$Parser$chompWhile(function(_char) {
      return _char === " ";
    });
    var $elm$project_metadata_utils$Elm$Type$extension = $elm$parser$Parser$oneOf(_List_fromArray([
      A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed($elm$core$Maybe$Just), A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$lowVar), $elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)), $elm$parser$Parser$symbol("|")), $elm$project_metadata_utils$Elm$Type$spaces)),
      $elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
    ]));
    var $elm$parser$Parser$Advanced$lazy = function(thunk) {
      return function(s) {
        var _v0 = thunk(0);
        var parse = _v0;
        return parse(s);
      };
    };
    var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
    var $elm$core$Tuple$pair = F2(function(a, b) {
      return _Utils_Tuple2(a, b);
    });
    var $elm$project_metadata_utils$Elm$Type$capVar = $elm$project_metadata_utils$Elm$Type$var($elm$core$Char$isUpper);
    var $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp = function(_v0) {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($elm$parser$Parser$Loop(0)), $elm$parser$Parser$symbol(".")), $elm$project_metadata_utils$Elm$Type$capVar),
        $elm$parser$Parser$succeed($elm$parser$Parser$Done(0))
      ]));
    };
    var $elm$project_metadata_utils$Elm$Type$qualifiedCapVar = $elm$parser$Parser$getChompedString(A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$capVar, A2($elm$parser$Parser$loop, 0, $elm$project_metadata_utils$Elm$Type$qualifiedCapVarHelp)));
    var $elm$parser$Parser$Advanced$revAlways = F2(function(_v0, b) {
      return b;
    });
    var $elm$parser$Parser$Advanced$skip = F2(function(iParser, kParser) {
      return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
    });
    var $elm$parser$Parser$Advanced$sequenceEndForbidden = F5(function(ender, ws, parseItem, sep, revItems) {
      var chompRest = function(item) {
        return A5($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep, A2($elm$core$List$cons, item, revItems));
      };
      return A2($elm$parser$Parser$Advanced$skip, ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$skip, sep, A2($elm$parser$Parser$Advanced$skip, ws, A2($elm$parser$Parser$Advanced$map, function(item) {
          return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, item, revItems));
        }, parseItem))),
        A2($elm$parser$Parser$Advanced$map, function(_v0) {
          return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
        }, ender)
      ])));
    });
    var $elm$parser$Parser$Advanced$sequenceEndMandatory = F4(function(ws, parseItem, sep, revItems) {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$map, function(item) {
          return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, item, revItems));
        }, A2($elm$parser$Parser$Advanced$ignorer, parseItem, A2($elm$parser$Parser$Advanced$ignorer, ws, A2($elm$parser$Parser$Advanced$ignorer, sep, ws)))),
        A2($elm$parser$Parser$Advanced$map, function(_v0) {
          return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
        }, $elm$parser$Parser$Advanced$succeed(0))
      ]));
    });
    var $elm$parser$Parser$Advanced$sequenceEndOptional = F5(function(ender, ws, parseItem, sep, revItems) {
      var parseEnd = A2($elm$parser$Parser$Advanced$map, function(_v0) {
        return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
      }, ender);
      return A2($elm$parser$Parser$Advanced$skip, ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$skip, sep, A2($elm$parser$Parser$Advanced$skip, ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
          A2($elm$parser$Parser$Advanced$map, function(item) {
            return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, item, revItems));
          }, parseItem),
          parseEnd
        ])))),
        parseEnd
      ])));
    });
    var $elm$parser$Parser$Advanced$sequenceEnd = F5(function(ender, ws, parseItem, sep, trailing) {
      var chompRest = function(item) {
        switch (trailing) {
          case 0:
            return A2($elm$parser$Parser$Advanced$loop, _List_fromArray([item]), A4($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep));
          case 1:
            return A2($elm$parser$Parser$Advanced$loop, _List_fromArray([item]), A4($elm$parser$Parser$Advanced$sequenceEndOptional, ender, ws, parseItem, sep));
          default:
            return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$skip, ws, A2($elm$parser$Parser$Advanced$skip, sep, A2($elm$parser$Parser$Advanced$skip, ws, A2($elm$parser$Parser$Advanced$loop, _List_fromArray([item]), A3($elm$parser$Parser$Advanced$sequenceEndMandatory, ws, parseItem, sep))))), ender);
        }
      };
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$andThen, chompRest, parseItem),
        A2($elm$parser$Parser$Advanced$map, function(_v0) {
          return _List_Nil;
        }, ender)
      ]));
    });
    var $elm$parser$Parser$Advanced$sequence = function(i) {
      return A2($elm$parser$Parser$Advanced$skip, $elm$parser$Parser$Advanced$token(i.iy), A2($elm$parser$Parser$Advanced$skip, i.ip, A5($elm$parser$Parser$Advanced$sequenceEnd, $elm$parser$Parser$Advanced$token(i.n), i.ip, i.lt, $elm$parser$Parser$Advanced$token(i.id), i.jc)));
    };
    var $elm$parser$Parser$Advanced$Forbidden = 0;
    var $elm$parser$Parser$Advanced$Mandatory = 2;
    var $elm$parser$Parser$Advanced$Optional = 1;
    var $elm$parser$Parser$toAdvancedTrailing = function(trailing) {
      switch (trailing) {
        case 0:
          return 0;
        case 1:
          return 1;
        default:
          return 2;
      }
    };
    var $elm$parser$Parser$Expecting = function(a) {
      return { $: 0, a };
    };
    var $elm$parser$Parser$toToken = function(str) {
      return A2($elm$parser$Parser$Advanced$Token, str, $elm$parser$Parser$Expecting(str));
    };
    var $elm$parser$Parser$sequence = function(i) {
      return $elm$parser$Parser$Advanced$sequence({
        n: $elm$parser$Parser$toToken(i.n),
        lt: i.lt,
        id: $elm$parser$Parser$toToken(i.id),
        ip: i.ip,
        iy: $elm$parser$Parser$toToken(i.iy),
        jc: $elm$parser$Parser$toAdvancedTrailing(i.jc)
      });
    };
    var $elm$project_metadata_utils$Elm$Type$Tuple = function(a) {
      return { $: 2, a };
    };
    var $elm$project_metadata_utils$Elm$Type$tuplize = function(args) {
      if (args.b && !args.b.b) {
        var arg = args.a;
        return arg;
      } else {
        return $elm$project_metadata_utils$Elm$Type$Tuple(args);
      }
    };
    var $elm$project_metadata_utils$Elm$Type$chompArgs = function(revArgs) {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$map, function(arg) {
          return $elm$parser$Parser$Loop(A2($elm$core$List$cons, arg, revArgs));
        }, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)), $elm$project_metadata_utils$Elm$Type$cyclic$term())),
        A2($elm$parser$Parser$map, function(_v2) {
          return $elm$parser$Parser$Done($elm$core$List$reverse(revArgs));
        }, $elm$parser$Parser$succeed(0))
      ]));
    };
    var $elm$project_metadata_utils$Elm$Type$recordEndHelp = function(revFields) {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(function(f) {
          return $elm$parser$Parser$Loop(A2($elm$core$List$cons, f, revFields));
        }), $elm$project_metadata_utils$Elm$Type$comma), $elm$project_metadata_utils$Elm$Type$spaces), A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$cyclic$field(), $elm$project_metadata_utils$Elm$Type$spaces)),
        A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed(function(_v1) {
          return $elm$parser$Parser$Done($elm$core$List$reverse(revFields));
        }), $elm$parser$Parser$symbol("}"))
      ]));
    };
    var $elm$project_metadata_utils$Elm$Type$tipeHelp = function(t) {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Lambda(t), $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType()),
        $elm$parser$Parser$succeed(t)
      ]));
    };
    function $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType() {
      return A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$backtrackable($elm$project_metadata_utils$Elm$Type$spaces)), $elm$project_metadata_utils$Elm$Type$arrow), $elm$project_metadata_utils$Elm$Type$spaces), $elm$project_metadata_utils$Elm$Type$cyclic$tipe());
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm() {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
        A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed($elm$project_metadata_utils$Elm$Type$Type), $elm$project_metadata_utils$Elm$Type$qualifiedCapVar), A2($elm$parser$Parser$loop, _List_Nil, $elm$project_metadata_utils$Elm$Type$chompArgs)),
        $elm$project_metadata_utils$Elm$Type$cyclic$record(),
        $elm$project_metadata_utils$Elm$Type$cyclic$tuple()
      ]));
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$term() {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$Var, $elm$project_metadata_utils$Elm$Type$lowVar),
        A2($elm$parser$Parser$map, function(name) {
          return A2($elm$project_metadata_utils$Elm$Type$Type, name, _List_Nil);
        }, $elm$project_metadata_utils$Elm$Type$qualifiedCapVar),
        $elm$project_metadata_utils$Elm$Type$cyclic$record(),
        $elm$project_metadata_utils$Elm$Type$cyclic$tuple()
      ]));
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$record() {
      return A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(F2(function(ext, fs) {
        return A2($elm$project_metadata_utils$Elm$Type$Record, fs, ext);
      })), $elm$parser$Parser$symbol("{")), $elm$project_metadata_utils$Elm$Type$spaces), $elm$project_metadata_utils$Elm$Type$extension), $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd());
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd() {
      return $elm$parser$Parser$oneOf(_List_fromArray([
        A2($elm$parser$Parser$andThen, function(f) {
          return A2($elm$parser$Parser$loop, _List_fromArray([f]), $elm$project_metadata_utils$Elm$Type$recordEndHelp);
        }, A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$cyclic$field(), $elm$project_metadata_utils$Elm$Type$spaces)),
        A2($elm$parser$Parser$ignorer, $elm$parser$Parser$succeed(_List_Nil), $elm$parser$Parser$symbol("}"))
      ]));
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$field() {
      return A2($elm$parser$Parser$keeper, A2($elm$parser$Parser$keeper, $elm$parser$Parser$succeed($elm$core$Tuple$pair), A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, A2($elm$parser$Parser$ignorer, $elm$project_metadata_utils$Elm$Type$lowVar, $elm$project_metadata_utils$Elm$Type$spaces), $elm$parser$Parser$symbol(":")), $elm$project_metadata_utils$Elm$Type$spaces)), $elm$project_metadata_utils$Elm$Type$cyclic$tipe());
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$tuple() {
      return A2($elm$parser$Parser$map, $elm$project_metadata_utils$Elm$Type$tuplize, $elm$parser$Parser$sequence({
        n: ")",
        lt: $elm$project_metadata_utils$Elm$Type$cyclic$tipe(),
        id: ",",
        ip: $elm$project_metadata_utils$Elm$Type$spaces,
        iy: "(",
        jc: 0
      }));
    }
    function $elm$project_metadata_utils$Elm$Type$cyclic$tipe() {
      return $elm$parser$Parser$lazy(function(_v0) {
        return A2($elm$parser$Parser$andThen, $elm$project_metadata_utils$Elm$Type$tipeHelp, $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm());
      });
    }
    var $elm$project_metadata_utils$Elm$Type$arrowAndType = $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType();
    $elm$project_metadata_utils$Elm$Type$cyclic$arrowAndType = function() {
      return $elm$project_metadata_utils$Elm$Type$arrowAndType;
    };
    var $elm$project_metadata_utils$Elm$Type$tipeTerm = $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm();
    $elm$project_metadata_utils$Elm$Type$cyclic$tipeTerm = function() {
      return $elm$project_metadata_utils$Elm$Type$tipeTerm;
    };
    var $elm$project_metadata_utils$Elm$Type$term = $elm$project_metadata_utils$Elm$Type$cyclic$term();
    $elm$project_metadata_utils$Elm$Type$cyclic$term = function() {
      return $elm$project_metadata_utils$Elm$Type$term;
    };
    var $elm$project_metadata_utils$Elm$Type$record = $elm$project_metadata_utils$Elm$Type$cyclic$record();
    $elm$project_metadata_utils$Elm$Type$cyclic$record = function() {
      return $elm$project_metadata_utils$Elm$Type$record;
    };
    var $elm$project_metadata_utils$Elm$Type$recordEnd = $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd();
    $elm$project_metadata_utils$Elm$Type$cyclic$recordEnd = function() {
      return $elm$project_metadata_utils$Elm$Type$recordEnd;
    };
    var $elm$project_metadata_utils$Elm$Type$field = $elm$project_metadata_utils$Elm$Type$cyclic$field();
    $elm$project_metadata_utils$Elm$Type$cyclic$field = function() {
      return $elm$project_metadata_utils$Elm$Type$field;
    };
    var $elm$project_metadata_utils$Elm$Type$tuple = $elm$project_metadata_utils$Elm$Type$cyclic$tuple();
    $elm$project_metadata_utils$Elm$Type$cyclic$tuple = function() {
      return $elm$project_metadata_utils$Elm$Type$tuple;
    };
    var $elm$project_metadata_utils$Elm$Type$tipe = $elm$project_metadata_utils$Elm$Type$cyclic$tipe();
    $elm$project_metadata_utils$Elm$Type$cyclic$tipe = function() {
      return $elm$project_metadata_utils$Elm$Type$tipe;
    };
    var $elm$project_metadata_utils$Elm$Type$parse = function(source) {
      return A2($elm$parser$Parser$run, $elm$project_metadata_utils$Elm$Type$tipe, source);
    };
    var $elm$project_metadata_utils$Elm$Type$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$Type$parse(string);
      if (_v0.$ === 1) {
        var error = _v0.a;
        return $elm$json$Json$Decode$fail("TODO");
      } else {
        var actualType = _v0.a;
        return $elm$json$Json$Decode$succeed(actualType);
      }
    };
    var $elm$project_metadata_utils$Elm$Type$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Type$decoderHelp, $elm$json$Json$Decode$string);
    var $author$project$Options$Docs$aliasDecoder = A5($elm$json$Json$Decode$map4, $elm$project_metadata_utils$Elm$Docs$Alias, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder));
    var $elm$project_metadata_utils$Elm$Docs$Binop = F5(function(name, comment, tipe, associativity, precedence) {
      return { j$: associativity, aJ: comment, j: name, ma: precedence, cg: tipe };
    });
    var $elm$project_metadata_utils$Elm$Docs$Left = 0;
    var $elm$project_metadata_utils$Elm$Docs$None = 1;
    var $elm$project_metadata_utils$Elm$Docs$Right = 2;
    var $author$project$Options$Docs$toAssoc = function(str) {
      switch (str) {
        case "left":
          return $elm$json$Json$Decode$succeed(0);
        case "non":
          return $elm$json$Json$Decode$succeed(1);
        case "right":
          return $elm$json$Json$Decode$succeed(2);
        default:
          return $elm$json$Json$Decode$fail("expecting one of the following values: left, non, right");
      }
    };
    var $author$project$Options$Docs$assocDecoder = A2($elm$json$Json$Decode$andThen, $author$project$Options$Docs$toAssoc, $elm$json$Json$Decode$string);
    var $elm$json$Json$Decode$map5 = _Json_map5;
    var $author$project$Options$Docs$binopDecoder = A6($elm$json$Json$Decode$map5, $elm$project_metadata_utils$Elm$Docs$Binop, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder), A2($elm$json$Json$Decode$field, "associativity", $author$project$Options$Docs$assocDecoder), A2($elm$json$Json$Decode$field, "precedence", $elm$json$Json$Decode$int));
    var $author$project$Options$Docs$safeList = F2(function(tag, innerDecoder) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        $elm$json$Json$Decode$list(innerDecoder),
        A2($elm$json$Json$Decode$andThen, function(_v0) {
          return $elm$json$Json$Decode$succeed(_List_Nil);
        }, $elm$json$Json$Decode$succeed(_List_Nil))
      ]));
    });
    var $author$project$Options$Docs$safeString = function(tag) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        $elm$json$Json$Decode$string,
        A2($elm$json$Json$Decode$andThen, function(_v0) {
          return $elm$json$Json$Decode$succeed("");
        }, $elm$json$Json$Decode$succeed(""))
      ]));
    };
    var $elm$project_metadata_utils$Elm$Docs$Union = F4(function(name, comment, args, tags) {
      return { cF: args, aJ: comment, j: name, mN: tags };
    });
    var $elm$json$Json$Decode$index = _Json_decodeIndex;
    var $author$project$Options$Docs$tagDecoder = A3($elm$json$Json$Decode$map2, F2(function(a, b) {
      return _Utils_Tuple2(a, b);
    }), A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Type$decoder)));
    var $author$project$Options$Docs$unionDecoder = A5($elm$json$Json$Decode$map4, $elm$project_metadata_utils$Elm$Docs$Union, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "cases", $elm$json$Json$Decode$list($author$project$Options$Docs$tagDecoder)));
    var $elm$project_metadata_utils$Elm$Docs$Value = F3(function(name, comment, tipe) {
      return { aJ: comment, j: name, cg: tipe };
    });
    var $author$project$Options$Docs$valueDecoder = A4($elm$json$Json$Decode$map3, $elm$project_metadata_utils$Elm$Docs$Value, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder));
    var $author$project$Options$Docs$decodeModule = $elm$json$Json$Decode$oneOf(_List_fromArray([
      A7($elm$json$Json$Decode$map6, $elm$project_metadata_utils$Elm$Docs$Module, A2($elm$json$Json$Decode$field, "name", $author$project$Options$Docs$safeString("name")), A2($elm$json$Json$Decode$field, "comment", $author$project$Options$Docs$safeString("comment")), A2($elm$json$Json$Decode$field, "unions", A2($author$project$Options$Docs$safeList, "unions", $author$project$Options$Docs$unionDecoder)), A2($elm$json$Json$Decode$field, "aliases", A2($author$project$Options$Docs$safeList, "alias", $author$project$Options$Docs$aliasDecoder)), A2($elm$json$Json$Decode$field, "values", A2($author$project$Options$Docs$safeList, "values", $author$project$Options$Docs$valueDecoder)), A2($elm$json$Json$Decode$field, "binops", A2($author$project$Options$Docs$safeList, "binops", $author$project$Options$Docs$binopDecoder))),
      A2($elm$json$Json$Decode$andThen, function(value) {
        return $elm$json$Json$Decode$succeed(A6($elm$project_metadata_utils$Elm$Docs$Module, "FAILED", "", _List_Nil, _List_Nil, _List_Nil, _List_Nil));
      }, $elm$json$Json$Decode$value)
    ]));
    var $elm$project_metadata_utils$Elm$Docs$aliasDecoder = A5($elm$json$Json$Decode$map4, $elm$project_metadata_utils$Elm$Docs$Alias, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder));
    var $elm$project_metadata_utils$Elm$Docs$toAssoc = function(str) {
      switch (str) {
        case "left":
          return $elm$json$Json$Decode$succeed(0);
        case "non":
          return $elm$json$Json$Decode$succeed(1);
        case "right":
          return $elm$json$Json$Decode$succeed(2);
        default:
          return $elm$json$Json$Decode$fail("expecting one of the following values: left, non, right");
      }
    };
    var $elm$project_metadata_utils$Elm$Docs$assocDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Docs$toAssoc, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Docs$binopDecoder = A6($elm$json$Json$Decode$map5, $elm$project_metadata_utils$Elm$Docs$Binop, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder), A2($elm$json$Json$Decode$field, "associativity", $elm$project_metadata_utils$Elm$Docs$assocDecoder), A2($elm$json$Json$Decode$field, "precedence", $elm$json$Json$Decode$int));
    var $elm$project_metadata_utils$Elm$Docs$tagDecoder = A3($elm$json$Json$Decode$map2, F2(function(a, b) {
      return _Utils_Tuple2(a, b);
    }), A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Type$decoder)));
    var $elm$project_metadata_utils$Elm$Docs$unionDecoder = A5($elm$json$Json$Decode$map4, $elm$project_metadata_utils$Elm$Docs$Union, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "args", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "cases", $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$tagDecoder)));
    var $elm$project_metadata_utils$Elm$Docs$valueDecoder = A4($elm$json$Json$Decode$map3, $elm$project_metadata_utils$Elm$Docs$Value, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "type", $elm$project_metadata_utils$Elm$Type$decoder));
    var $elm$project_metadata_utils$Elm$Docs$decoder = A7($elm$json$Json$Decode$map6, $elm$project_metadata_utils$Elm$Docs$Module, A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "comment", $elm$json$Json$Decode$string), A2($elm$json$Json$Decode$field, "unions", $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$unionDecoder)), A2($elm$json$Json$Decode$field, "aliases", $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$aliasDecoder)), A2($elm$json$Json$Decode$field, "values", $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$valueDecoder)), A2($elm$json$Json$Decode$field, "binops", $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$binopDecoder)));
    var $elm$project_metadata_utils$Elm$Project$Application = function(a) {
      return { $: 0, a };
    };
    var $elm$project_metadata_utils$Elm$Project$Package = function(a) {
      return { $: 1, a };
    };
    var $elm$project_metadata_utils$Elm$Project$ApplicationInfo = F6(function(elm, dirs, depsDirect, depsIndirect, testDepsDirect, testDepsIndirect) {
      return { kM: depsDirect, kN: depsIndirect, kS: dirs, ay: elm, mO: testDepsDirect, mP: testDepsIndirect };
    });
    var $elm$project_metadata_utils$Elm$Version$Version = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $elm$core$Basics$ge = _Utils_ge;
    var $elm$project_metadata_utils$Elm$Version$checkNumbers = F3(function(major, minor, patch) {
      return major >= 0 && (minor >= 0 && patch >= 0) ? $elm$core$Maybe$Just(A3($elm$project_metadata_utils$Elm$Version$Version, major, minor, patch)) : $elm$core$Maybe$Nothing;
    });
    var $elm$project_metadata_utils$Elm$Version$fromString = function(string) {
      var _v0 = A2($elm$core$List$map, $elm$core$String$toInt, A2($elm$core$String$split, ".", string));
      if (_v0.b && !_v0.a.$ && _v0.b.b && !_v0.b.a.$ && _v0.b.b.b && !_v0.b.b.a.$ && !_v0.b.b.b.b) {
        var major = _v0.a.a;
        var _v1 = _v0.b;
        var minor = _v1.a.a;
        var _v2 = _v1.b;
        var patch = _v2.a.a;
        return A3($elm$project_metadata_utils$Elm$Version$checkNumbers, major, minor, patch);
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$project_metadata_utils$Elm$Version$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$Version$fromString(string);
      if (!_v0.$) {
        var version = _v0.a;
        return $elm$json$Json$Decode$succeed(version);
      } else {
        return $elm$json$Json$Decode$fail('I need a valid version like "2.0.1"');
      }
    };
    var $elm$project_metadata_utils$Elm$Version$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Version$decoderHelp, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Package$Name = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $elm$core$String$any = _String_any;
    var $elm$core$String$contains = _String_contains;
    var $elm$project_metadata_utils$Elm$Package$isBadChar = function(_char) {
      return $elm$core$Char$isUpper(_char) || (_char === "." || _char === "_");
    };
    var $elm$project_metadata_utils$Elm$Package$isBadProjectName = function(project) {
      var _v0 = $elm$core$String$uncons(project);
      if (_v0.$ === 1) {
        return true;
      } else {
        var _v1 = _v0.a;
        var c = _v1.a;
        return A2($elm$core$String$contains, "--", project) || (A2($elm$core$String$any, $elm$project_metadata_utils$Elm$Package$isBadChar, project) || (A2($elm$core$String$startsWith, "-", project) || !$elm$core$Char$isLower(c)));
      }
    };
    var $elm$project_metadata_utils$Elm$Package$fromString = function(string) {
      var _v0 = A2($elm$core$String$split, "/", string);
      if (_v0.b && _v0.b.b && !_v0.b.b.b) {
        var author = _v0.a;
        var _v1 = _v0.b;
        var project = _v1.a;
        return $elm$project_metadata_utils$Elm$Package$isBadProjectName(project) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($elm$project_metadata_utils$Elm$Package$Name, author, project));
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$project_metadata_utils$Elm$Project$verifyDepNames = F2(function(revDeps, pairs) {
      verifyDepNames:
        while (true) {
          if (!pairs.b) {
            return $elm$json$Json$Decode$succeed($elm$core$List$reverse(revDeps));
          } else {
            var _v1 = pairs.a;
            var key = _v1.a;
            var con = _v1.b;
            var otherPairs = pairs.b;
            var _v2 = $elm$project_metadata_utils$Elm$Package$fromString(key);
            if (!_v2.$) {
              var pkg = _v2.a;
              var $temp$revDeps = A2($elm$core$List$cons, _Utils_Tuple2(pkg, con), revDeps), $temp$pairs = otherPairs;
              revDeps = $temp$revDeps;
              pairs = $temp$pairs;
              continue verifyDepNames;
            } else {
              return $elm$json$Json$Decode$fail('"' + (key + '" is not a valid package name.'));
            }
          }
        }
    });
    var $elm$project_metadata_utils$Elm$Project$depsDecoder = function(constraintDecoder) {
      return A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$verifyDepNames(_List_Nil), $elm$json$Json$Decode$keyValuePairs(constraintDecoder));
    };
    var $elm$project_metadata_utils$Elm$Project$applicationDecoder = A7($elm$json$Json$Decode$map6, $elm$project_metadata_utils$Elm$Project$ApplicationInfo, A2($elm$json$Json$Decode$field, "elm-version", $elm$project_metadata_utils$Elm$Version$decoder), A2($elm$json$Json$Decode$field, "source-directories", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$at, _List_fromArray(["dependencies", "direct"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), A2($elm$json$Json$Decode$at, _List_fromArray(["dependencies", "indirect"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), A2($elm$json$Json$Decode$at, _List_fromArray(["test-dependencies", "direct"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), A2($elm$json$Json$Decode$at, _List_fromArray(["test-dependencies", "indirect"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)));
    var $elm$project_metadata_utils$Elm$Project$PackageInfo = F8(function(name, summary, license, version, exposed, deps, testDeps, elm) {
      return { kL: deps, ay: elm, eb: exposed, fJ: license, j: name, iK: summary, iV: testDeps, m2: version };
    });
    var $elm$project_metadata_utils$Elm$Constraint$Constraint = F4(function(a, b, c, d) {
      return { $: 0, a, b, c, d };
    });
    var $elm$core$Maybe$andThen = F2(function(callback, maybeValue) {
      if (!maybeValue.$) {
        var value = maybeValue.a;
        return callback(value);
      } else {
        return $elm$core$Maybe$Nothing;
      }
    });
    var $elm$project_metadata_utils$Elm$Version$compare = F2(function(_v0, _v1) {
      var major1 = _v0.a;
      var minor1 = _v0.b;
      var patch1 = _v0.c;
      var major2 = _v1.a;
      var minor2 = _v1.b;
      var patch2 = _v1.c;
      var _v2 = A2($elm$core$Basics$compare, major1, major2);
      switch (_v2) {
        case 0:
          return 0;
        case 2:
          return 2;
        default:
          var _v3 = A2($elm$core$Basics$compare, minor1, minor2);
          switch (_v3) {
            case 0:
              return 0;
            case 1:
              return A2($elm$core$Basics$compare, patch1, patch2);
            default:
              return 2;
          }
      }
    });
    var $elm$project_metadata_utils$Elm$Constraint$checkConstraint = function(constraint) {
      var lower = constraint.a;
      var upper = constraint.d;
      var _v0 = A2($elm$project_metadata_utils$Elm$Version$compare, lower, upper);
      switch (_v0) {
        case 0:
          return $elm$core$Maybe$Just(constraint);
        case 1:
          return $elm$core$Maybe$Just(constraint);
        default:
          return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$core$Maybe$map4 = F5(function(func, ma, mb, mc, md) {
      if (ma.$ === 1) {
        return $elm$core$Maybe$Nothing;
      } else {
        var a = ma.a;
        if (mb.$ === 1) {
          return $elm$core$Maybe$Nothing;
        } else {
          var b = mb.a;
          if (mc.$ === 1) {
            return $elm$core$Maybe$Nothing;
          } else {
            var c = mc.a;
            if (md.$ === 1) {
              return $elm$core$Maybe$Nothing;
            } else {
              var d = md.a;
              return $elm$core$Maybe$Just(A4(func, a, b, c, d));
            }
          }
        }
      }
    });
    var $elm$project_metadata_utils$Elm$Constraint$LessOrEq = 1;
    var $elm$project_metadata_utils$Elm$Constraint$LessThan = 0;
    var $elm$project_metadata_utils$Elm$Constraint$opFromString = function(op) {
      switch (op) {
        case "<":
          return $elm$core$Maybe$Just(0);
        case "<=":
          return $elm$core$Maybe$Just(1);
        default:
          return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$project_metadata_utils$Elm$Constraint$fromString = function(string) {
      var _v0 = A2($elm$core$String$split, " ", string);
      if (_v0.b && _v0.b.b && _v0.b.b.b && _v0.b.b.a === "v" && _v0.b.b.b.b && _v0.b.b.b.b.b && !_v0.b.b.b.b.b.b) {
        var lower = _v0.a;
        var _v1 = _v0.b;
        var lop = _v1.a;
        var _v2 = _v1.b;
        var _v3 = _v2.b;
        var uop = _v3.a;
        var _v4 = _v3.b;
        var upper = _v4.a;
        return A2($elm$core$Maybe$andThen, $elm$project_metadata_utils$Elm$Constraint$checkConstraint, A5($elm$core$Maybe$map4, $elm$project_metadata_utils$Elm$Constraint$Constraint, $elm$project_metadata_utils$Elm$Version$fromString(lower), $elm$project_metadata_utils$Elm$Constraint$opFromString(lop), $elm$project_metadata_utils$Elm$Constraint$opFromString(uop), $elm$project_metadata_utils$Elm$Version$fromString(upper)));
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$project_metadata_utils$Elm$Constraint$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$Constraint$fromString(string);
      if (!_v0.$) {
        var constraint = _v0.a;
        return $elm$json$Json$Decode$succeed(constraint);
      } else {
        return $elm$json$Json$Decode$fail('I need a valid constraint like "1.0.0 <= v < 2.0.0"');
      }
    };
    var $elm$project_metadata_utils$Elm$Constraint$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Constraint$decoderHelp, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$License$License = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses = _List_fromArray([
      A2($elm$project_metadata_utils$Elm$License$License, "AFL-1.1", "Academic Free License v1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "AFL-1.2", "Academic Free License v1.2"),
      A2($elm$project_metadata_utils$Elm$License$License, "AFL-2.0", "Academic Free License v2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "AFL-2.1", "Academic Free License v2.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "AFL-3.0", "Academic Free License v3.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "APL-1.0", "Adaptive Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Apache-1.1", "Apache License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "Apache-2.0", "Apache License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "APSL-1.0", "Apple Public Source License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "APSL-1.1", "Apple Public Source License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "APSL-1.2", "Apple Public Source License 1.2"),
      A2($elm$project_metadata_utils$Elm$License$License, "APSL-2.0", "Apple Public Source License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Artistic-1.0", "Artistic License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Artistic-1.0-Perl", "Artistic License 1.0 (Perl)"),
      A2($elm$project_metadata_utils$Elm$License$License, "Artistic-1.0-cl8", "Artistic License 1.0 w/clause 8"),
      A2($elm$project_metadata_utils$Elm$License$License, "Artistic-2.0", "Artistic License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "AAL", "Attribution Assurance License"),
      A2($elm$project_metadata_utils$Elm$License$License, "BSL-1.0", "Boost Software License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "BSD-2-Clause", 'BSD 2-clause "Simplified" License'),
      A2($elm$project_metadata_utils$Elm$License$License, "BSD-3-Clause", 'BSD 3-clause "New" or "Revised" License'),
      A2($elm$project_metadata_utils$Elm$License$License, "0BSD", "BSD Zero Clause License"),
      A2($elm$project_metadata_utils$Elm$License$License, "CECILL-2.1", "CeCILL Free Software License Agreement v2.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "CNRI-Python", "CNRI Python License"),
      A2($elm$project_metadata_utils$Elm$License$License, "CDDL-1.0", "Common Development and Distribution License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "CPAL-1.0", "Common Public Attribution License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "CPL-1.0", "Common Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "CATOSL-1.1", "Computer Associates Trusted Open Source License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "CUA-OPL-1.0", "CUA Office Public License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "EPL-1.0", "Eclipse Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "ECL-1.0", "Educational Community License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "ECL-2.0", "Educational Community License v2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "EFL-1.0", "Eiffel Forum License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "EFL-2.0", "Eiffel Forum License v2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Entessa", "Entessa Public License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "EUDatagrid", "EU DataGrid Software License"),
      A2($elm$project_metadata_utils$Elm$License$License, "EUPL-1.1", "European Union Public License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "Fair", "Fair License"),
      A2($elm$project_metadata_utils$Elm$License$License, "Frameworx-1.0", "Frameworx Open License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "AGPL-3.0", "GNU Affero General Public License v3.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "GPL-2.0", "GNU General Public License v2.0 only"),
      A2($elm$project_metadata_utils$Elm$License$License, "GPL-3.0", "GNU General Public License v3.0 only"),
      A2($elm$project_metadata_utils$Elm$License$License, "LGPL-2.1", "GNU Lesser General Public License v2.1 only"),
      A2($elm$project_metadata_utils$Elm$License$License, "LGPL-3.0", "GNU Lesser General Public License v3.0 only"),
      A2($elm$project_metadata_utils$Elm$License$License, "LGPL-2.0", "GNU Library General Public License v2 only"),
      A2($elm$project_metadata_utils$Elm$License$License, "HPND", "Historic Permission Notice and Disclaimer"),
      A2($elm$project_metadata_utils$Elm$License$License, "IPL-1.0", "IBM Public License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Intel", "Intel Open Source License"),
      A2($elm$project_metadata_utils$Elm$License$License, "IPA", "IPA Font License"),
      A2($elm$project_metadata_utils$Elm$License$License, "ISC", "ISC License"),
      A2($elm$project_metadata_utils$Elm$License$License, "LPPL-1.3c", "LaTeX Project Public License v1.3c"),
      A2($elm$project_metadata_utils$Elm$License$License, "LiLiQ-P-1.1", "Licence Libre du Québec – Permissive version 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "LiLiQ-Rplus-1.1", "Licence Libre du Québec – Réciprocité forte version 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "LiLiQ-R-1.1", "Licence Libre du Québec – Réciprocité version 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "LPL-1.02", "Lucent Public License v1.02"),
      A2($elm$project_metadata_utils$Elm$License$License, "LPL-1.0", "Lucent Public License Version 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "MS-PL", "Microsoft Public License"),
      A2($elm$project_metadata_utils$Elm$License$License, "MS-RL", "Microsoft Reciprocal License"),
      A2($elm$project_metadata_utils$Elm$License$License, "MirOS", "MirOS Licence"),
      A2($elm$project_metadata_utils$Elm$License$License, "MIT", "MIT License"),
      A2($elm$project_metadata_utils$Elm$License$License, "Motosoto", "Motosoto License"),
      A2($elm$project_metadata_utils$Elm$License$License, "MPL-1.0", "Mozilla Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "MPL-1.1", "Mozilla Public License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "MPL-2.0", "Mozilla Public License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "MPL-2.0-no-copyleft-exception", "Mozilla Public License 2.0 (no copyleft exception)"),
      A2($elm$project_metadata_utils$Elm$License$License, "Multics", "Multics License"),
      A2($elm$project_metadata_utils$Elm$License$License, "NASA-1.3", "NASA Open Source Agreement 1.3"),
      A2($elm$project_metadata_utils$Elm$License$License, "Naumen", "Naumen Public License"),
      A2($elm$project_metadata_utils$Elm$License$License, "NGPL", "Nethack General Public License"),
      A2($elm$project_metadata_utils$Elm$License$License, "Nokia", "Nokia Open Source License"),
      A2($elm$project_metadata_utils$Elm$License$License, "NPOSL-3.0", "Non-Profit Open Software License 3.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "NTP", "NTP License"),
      A2($elm$project_metadata_utils$Elm$License$License, "OCLC-2.0", "OCLC Research Public License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "OGTSL", "Open Group Test Suite License"),
      A2($elm$project_metadata_utils$Elm$License$License, "OSL-1.0", "Open Software License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "OSL-2.0", "Open Software License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "OSL-2.1", "Open Software License 2.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "OSL-3.0", "Open Software License 3.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "OSET-PL-2.1", "OSET Public License version 2.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "PHP-3.0", "PHP License v3.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "PostgreSQL", "PostgreSQL License"),
      A2($elm$project_metadata_utils$Elm$License$License, "Python-2.0", "Python License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "QPL-1.0", "Q Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "RPSL-1.0", "RealNetworks Public Source License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "RPL-1.1", "Reciprocal Public License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "RPL-1.5", "Reciprocal Public License 1.5"),
      A2($elm$project_metadata_utils$Elm$License$License, "RSCPL", "Ricoh Source Code Public License"),
      A2($elm$project_metadata_utils$Elm$License$License, "OFL-1.1", "SIL Open Font License 1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "SimPL-2.0", "Simple Public License 2.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Sleepycat", "Sleepycat License"),
      A2($elm$project_metadata_utils$Elm$License$License, "SISSL", "Sun Industry Standards Source License v1.1"),
      A2($elm$project_metadata_utils$Elm$License$License, "SPL-1.0", "Sun Public License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "Watcom-1.0", "Sybase Open Watcom Public License 1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "UPL-1.0", "Universal Permissive License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "NCSA", "University of Illinois/NCSA Open Source License"),
      A2($elm$project_metadata_utils$Elm$License$License, "VSL-1.0", "Vovida Software License v1.0"),
      A2($elm$project_metadata_utils$Elm$License$License, "W3C", "W3C Software Notice and License (2002-12-31)"),
      A2($elm$project_metadata_utils$Elm$License$License, "Xnet", "X.Net License"),
      A2($elm$project_metadata_utils$Elm$License$License, "Zlib", "zlib License"),
      A2($elm$project_metadata_utils$Elm$License$License, "ZPL-2.0", "Zope Public License 2.0")
    ]);
    var $elm$project_metadata_utils$Elm$License$spdxDict = $elm$core$Dict$fromList(A2($elm$core$List$map, function(license) {
      var abbr = license.a;
      return _Utils_Tuple2(abbr, license);
    }, $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses));
    var $elm$project_metadata_utils$Elm$License$fromString = function(string) {
      return A2($elm$core$Dict$get, string, $elm$project_metadata_utils$Elm$License$spdxDict);
    };
    var $elm$project_metadata_utils$Elm$License$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$License$fromString(string);
      if (!_v0.$) {
        var license = _v0.a;
        return $elm$json$Json$Decode$succeed(license);
      } else {
        return $elm$json$Json$Decode$fail("I need an OSI approved license in SPDX format <https://spdx.org/licenses/>");
      }
    };
    var $elm$project_metadata_utils$Elm$License$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$License$decoderHelp, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Package$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$Package$fromString(string);
      if (!_v0.$) {
        var name = _v0.a;
        return $elm$json$Json$Decode$succeed(name);
      } else {
        return $elm$json$Json$Decode$fail('I need a valid package name like "elm/core"');
      }
    };
    var $elm$project_metadata_utils$Elm$Package$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Package$decoderHelp, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Project$ExposedDict = function(a) {
      return { $: 1, a };
    };
    var $elm$project_metadata_utils$Elm$Project$ExposedList = function(a) {
      return { $: 0, a };
    };
    var $elm$project_metadata_utils$Elm$Project$checkHeaders = function(dict) {
      checkHeaders:
        while (true) {
          if (!dict.b) {
            return $elm$core$Maybe$Nothing;
          } else {
            var _v1 = dict.a;
            var header = _v1.a;
            var others = dict.b;
            if ($elm$core$String$length(header) < 20) {
              var $temp$dict = others;
              dict = $temp$dict;
              continue checkHeaders;
            } else {
              return $elm$core$Maybe$Just(header);
            }
          }
        }
    };
    var $elm$project_metadata_utils$Elm$Project$checkExposedDict = function(dict) {
      var _v0 = $elm$project_metadata_utils$Elm$Project$checkHeaders(dict);
      if (_v0.$ === 1) {
        return $elm$json$Json$Decode$succeed(dict);
      } else {
        var badHeader = _v0.a;
        return $elm$json$Json$Decode$fail('The "' + (badHeader + '" header is too long. Twenty characters max!'));
      }
    };
    var $elm$project_metadata_utils$Elm$Module$Name = $elm$core$Basics$identity;
    var $elm$core$Basics$composeL = F3(function(g2, f, x2) {
      return g2(f(x2));
    });
    var $elm$core$List$all = F2(function(isOkay, list) {
      return !A2($elm$core$List$any, A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay), list);
    });
    var $elm$project_metadata_utils$Elm$Module$isInner = function(_char) {
      return $elm$core$Char$isAlphaNum(_char) || _char === "_";
    };
    var $elm$project_metadata_utils$Elm$Module$isGoodChunk = function(chunk) {
      var _v0 = $elm$core$String$uncons(chunk);
      if (_v0.$ === 1) {
        return false;
      } else {
        var _v1 = _v0.a;
        var _char = _v1.a;
        var rest = _v1.b;
        return $elm$core$Char$isUpper(_char) && A2($elm$core$String$all, $elm$project_metadata_utils$Elm$Module$isInner, rest);
      }
    };
    var $elm$project_metadata_utils$Elm$Module$fromString = function(string) {
      return A2($elm$core$List$all, $elm$project_metadata_utils$Elm$Module$isGoodChunk, A2($elm$core$String$split, ".", string)) ? $elm$core$Maybe$Just(string) : $elm$core$Maybe$Nothing;
    };
    var $elm$project_metadata_utils$Elm$Module$decoderHelp = function(string) {
      var _v0 = $elm$project_metadata_utils$Elm$Module$fromString(string);
      if (!_v0.$) {
        var name = _v0.a;
        return $elm$json$Json$Decode$succeed(name);
      } else {
        return $elm$json$Json$Decode$fail('I need a valid module name like "Json.Decode"');
      }
    };
    var $elm$project_metadata_utils$Elm$Module$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Module$decoderHelp, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Project$exposedDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
      A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$ExposedList, $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder)),
      A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$ExposedDict, A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$checkExposedDict, $elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder))))
    ]));
    var $elm$json$Json$Decode$map8 = _Json_map8;
    var $elm$project_metadata_utils$Elm$Project$summaryCheck = function(summary) {
      return $elm$core$String$length(summary) < 80 ? $elm$json$Json$Decode$succeed(summary) : $elm$json$Json$Decode$fail('The "summary" field must have fewer than 80 characters.');
    };
    var $elm$project_metadata_utils$Elm$Project$summaryDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$summaryCheck, $elm$json$Json$Decode$string);
    var $elm$project_metadata_utils$Elm$Project$packageDecoder = A9($elm$json$Json$Decode$map8, $elm$project_metadata_utils$Elm$Project$PackageInfo, A2($elm$json$Json$Decode$field, "name", $elm$project_metadata_utils$Elm$Package$decoder), A2($elm$json$Json$Decode$field, "summary", $elm$project_metadata_utils$Elm$Project$summaryDecoder), A2($elm$json$Json$Decode$field, "license", $elm$project_metadata_utils$Elm$License$decoder), A2($elm$json$Json$Decode$field, "version", $elm$project_metadata_utils$Elm$Version$decoder), A2($elm$json$Json$Decode$field, "exposed-modules", $elm$project_metadata_utils$Elm$Project$exposedDecoder), A2($elm$json$Json$Decode$field, "dependencies", $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)), A2($elm$json$Json$Decode$field, "test-dependencies", $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)), A2($elm$json$Json$Decode$field, "elm-version", $elm$project_metadata_utils$Elm$Constraint$decoder));
    var $elm$project_metadata_utils$Elm$Project$decoderHelp = function(tipe) {
      switch (tipe) {
        case "application":
          return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Application, $elm$project_metadata_utils$Elm$Project$applicationDecoder);
        case "package":
          return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Package, $elm$project_metadata_utils$Elm$Project$packageDecoder);
        default:
          var other = tipe;
          return $elm$json$Json$Decode$fail('The "type" field must be either "application" or "package", so ' + ('"' + (other + '" is not acceptable.')));
      }
    };
    var $elm$project_metadata_utils$Elm$Project$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$decoderHelp, A2($elm$json$Json$Decode$field, "type", $elm$json$Json$Decode$string));
    var $author$project$Options$Docs$decoder = A6($elm$json$Json$Decode$map5, $author$project$Options$Docs$Docs, A2($elm$json$Json$Decode$field, "readme", $elm$json$Json$Decode$maybe($elm$json$Json$Decode$string)), A2($elm$json$Json$Decode$field, "guides", $elm$json$Json$Decode$list($author$project$Options$Docs$decodeGuide)), A2($elm$json$Json$Decode$field, "project", $elm$project_metadata_utils$Elm$Project$decoder), A2($elm$json$Json$Decode$field, "modules", $elm$json$Json$Decode$list($author$project$Options$Docs$decodeModule)), A2($elm$json$Json$Decode$field, "deps", $elm$json$Json$Decode$dict($elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Docs$decoder))));
    var $elm$json$Json$Decode$null = _Json_decodeNull;
    var $elm$json$Json$Decode$nullable = function(decoder) {
      return $elm$json$Json$Decode$oneOf(_List_fromArray([
        $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
        A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
      ]));
    };
    var $author$project$Run$decodePlugin = A6($elm$json$Json$Decode$map5, $author$project$Run$Runs, $elm$json$Json$Decode$nullable(A2($elm$json$Json$Decode$field, "app", $author$project$Options$App$decode)), A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, A2($elm$json$Json$Decode$field, "app-view", $author$project$Press$Model$decodeViewRegions)), A2($elm$json$Json$Decode$field, "assets", $elm$json$Json$Decode$nullable($elm$json$Json$Decode$list($author$project$Options$Assets$decodeAssetGroup))), A2($elm$json$Json$Decode$field, "theme", $elm$json$Json$Decode$nullable($author$project$Theme$Decoder$decode)), A2($elm$json$Json$Decode$field, "docs", $elm$json$Json$Decode$nullable($author$project$Options$Docs$decoder)));
    var $author$project$Extra$Parser$problemToInlineString = function(problem) {
      switch (problem.$) {
        case 0:
          var string = problem.a;
          return string;
        case 1:
          return "an int";
        case 2:
          return "a hex";
        case 3:
          return "an octal";
        case 4:
          return "some binary";
        case 5:
          return "a float";
        case 6:
          return "a number";
        case 7:
          return "a variable";
        case 8:
          var string = problem.a;
          return string;
        case 9:
          var string = problem.a;
          return string;
        case 10:
          return "the end of input";
        case 11:
          return "unexpected char";
        case 12:
          var problemDescription = problem.a;
          return problemDescription;
        default:
          return "bad repeat";
      }
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $elm$core$String$repeatHelp = F3(function(n, chunk, result) {
      return n <= 0 ? result : A3($elm$core$String$repeatHelp, n >> 1, _Utils_ap(chunk, chunk), !(n & 1) ? result : _Utils_ap(result, chunk));
    });
    var $elm$core$String$repeat = F2(function(n, chunk) {
      return A3($elm$core$String$repeatHelp, n, chunk, "");
    });
    var $author$project$Extra$Parser$deadEndToAnnotation = F2(function(column, deadEnds) {
      return A2($elm$core$String$repeat, column - 1, " ") + `^
` + ("I was expecting " + A2($elm$core$String$join, ", ", A2($elm$core$List$map, A2($elm$core$Basics$composeL, $author$project$Extra$Parser$problemToInlineString, function($2) {
        return $2.hk;
      }), deadEnds)));
    });
    var $elm$core$List$maximum = function(list) {
      if (list.b) {
        var x2 = list.a;
        var xs = list.b;
        return $elm$core$Maybe$Just(A3($elm$core$List$foldl, $elm$core$Basics$max, x2, xs));
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $author$project$Extra$Parser$annotate = F2(function(deadEnds, message) {
      var column = A2($elm$core$Maybe$withDefault, 1, $elm$core$List$maximum(A2($elm$core$List$map, function($2) {
        return $2.di;
      }, deadEnds)));
      return message + (`
` + A2($author$project$Extra$Parser$deadEndToAnnotation, column, deadEnds));
    });
    var $author$project$Generate$Route$errorToDetails = function(error) {
      switch (error.$) {
        case 0:
          var name = error.a.j;
          var pattern = error.a.g7;
          var collisions = error.a.M;
          return {
            a1: "The field " + (name + (" in route " + (name + (" is used in multiple places in the URL pattern " + (pattern + (". The fields that collide are: " + A2($elm$core$String$join, ", ", $elm$core$Set$toList(collisions)))))))),
            mR: "Field collision in route " + name
          };
        case 2:
          var err = error.a;
          return {
            a1: function() {
              var _v1 = err.dB;
              if (!_v1.b) {
                return "I ran into something weird with " + err.g7;
              } else {
                return A2($author$project$Extra$Parser$annotate, err.dB, err.g7);
              }
            }(),
            mR: err.j + ": Parser error"
          };
        case 1:
          var nameOne = error.a.gr;
          var patternOne = error.a.g8;
          var nameTwo = error.a.gs;
          var patternTwo = error.a.g9;
          return { a1: "The routes " + (nameOne + (" and " + (nameTwo + (" have overlapping URL patterns. The patterns are: " + (patternOne + (" and " + patternTwo)))))), mR: "Overlapping routes" };
        default:
          var name = error.a.j;
          var pattern = error.a.g7;
          return { a1: "The route " + (name + (" with pattern " + (pattern + " is unreachable ore general pattern."))), mR: "Unreachable route" };
      }
    };
    var $author$project$Press$Generate$errorToDetails = function(error) {
      return $author$project$Generate$Route$errorToDetails(error);
    };
    var $mdgriffith$elm_codegen$Internal$Branch$Branch = $elm$core$Basics$identity;
    var $stil4m$elm_syntax$Elm$Syntax$Node$value = function(_v0) {
      var v = _v0.b;
      return v;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$denode = $stil4m$elm_syntax$Elm$Syntax$Node$value;
    var $mdgriffith$elm_codegen$Internal$Arg$toDetails = F2(function(index, _v0) {
      var arg = _v0;
      return arg(index);
    });
    var $mdgriffith$elm_codegen$Elm$Case$branch = F2(function(arg, toBody) {
      return function(index) {
        var argDetails = A2($mdgriffith$elm_codegen$Internal$Arg$toDetails, index, arg);
        return _Utils_Tuple3(argDetails.ba, $mdgriffith$elm_codegen$Internal$Compiler$denode(argDetails.dI.g7), toBody(argDetails.jt));
      };
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function(a) {
      return { $: 16, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$EmptyCaseStatement = { $: 2 };
    var $mdgriffith$elm_codegen$Internal$Compiler$Expression = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Internal$Compiler$Annotation = $elm$core$Basics$identity;
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2(function(a, b) {
      return { $: 12, a, b };
    });
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2(function(a, b) {
      return { $: 5, a, b };
    });
    var $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $elm$core$Dict$foldl = F3(function(func, acc, dict) {
      foldl:
        while (true) {
          if (dict.$ === -2) {
            return acc;
          } else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, A3($elm$core$Dict$foldl, func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldl;
          }
        }
    });
    var $elm$core$Dict$merge = F6(function(leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
      var stepState = F3(function(rKey, rValue, _v0) {
        stepState:
          while (true) {
            var list = _v0.a;
            var result = _v0.b;
            if (!list.b) {
              return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
            } else {
              var _v2 = list.a;
              var lKey = _v2.a;
              var lValue = _v2.b;
              var rest = list.b;
              if (_Utils_cmp(lKey, rKey) < 0) {
                var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                rKey = $temp$rKey;
                rValue = $temp$rValue;
                _v0 = $temp$_v0;
                continue stepState;
              } else {
                if (_Utils_cmp(lKey, rKey) > 0) {
                  return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                } else {
                  return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                }
              }
            }
          }
      });
      var _v3 = A3($elm$core$Dict$foldl, stepState, _Utils_Tuple2($elm$core$Dict$toList(leftDict), initialResult), rightDict);
      var leftovers = _v3.a;
      var intermediateResult = _v3.b;
      return A3($elm$core$List$foldl, F2(function(_v4, result) {
        var k2 = _v4.a;
        var v = _v4.b;
        return A3(leftStep, k2, v, result);
      }), intermediateResult, leftovers);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences = F2(function(one, two) {
      return A6($elm$core$Dict$merge, $elm$core$Dict$insert, F4(function(key, oneVal, twoVal, d) {
        if (oneVal.$ === 5) {
          var recordName = oneVal.a;
          var _v1 = oneVal.b;
          var oneRange = _v1.a;
          var recordDefinition = _v1.b;
          if (twoVal.$ === 5) {
            var _v3 = twoVal.b;
            var twoRecordDefinition = _v3.b;
            return A3($elm$core$Dict$insert, key, A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, recordName, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, oneRange, _Utils_ap(recordDefinition, twoRecordDefinition))), d);
          } else {
            return A3($elm$core$Dict$insert, key, oneVal, d);
          }
        } else {
          return A3($elm$core$Dict$insert, key, oneVal, d);
        }
      }), $elm$core$Dict$insert, one, two, $elm$core$Dict$empty);
    });
    var $mdgriffith$elm_codegen$Elm$Case$combineInferences = F2(function(infs, infResult) {
      if (!infResult.$) {
        var inferred = infResult.a;
        return $elm$core$Result$Ok(_Utils_update(inferred, {
          g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, infs, inferred.g)
        }));
      } else {
        var err = infResult.a;
        return $elm$core$Result$Err(err);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Index$Index = F5(function(a, b, c, d, e) {
      return { $: 0, a, b, c, d, e };
    });
    var $mdgriffith$elm_codegen$Internal$Index$dive = function(_v0) {
      var modName = _v0.a;
      var top = _v0.b;
      var tail = _v0.c;
      var scope2 = _v0.d;
      var check = _v0.e;
      return A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, 0, A2($elm$core$List$cons, top, tail), scope2, check);
    };
    var $mdgriffith$elm_codegen$Internal$Index$next = function(_v0) {
      var modName = _v0.a;
      var top = _v0.b;
      var tail = _v0.c;
      var scope2 = _v0.d;
      var check = _v0.e;
      return A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, top + 1, tail, scope2, check);
    };
    var $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange = {
      n: { dm: 0, mu: 0 },
      iy: { dm: 0, mu: 0 }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$nodify = function(exp) {
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails = F2(function(index, _v0) {
      var toExp = _v0;
      return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Index$next(index), toExp(index));
    });
    var $elm$core$Dict$union = F2(function(t1, t2) {
      return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeAliases = $elm$core$Dict$union;
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2(function(a, b) {
      return { $: 6, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables = { $: 4 };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function(a) {
      return { $: 4, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function(a) {
      return { $: 3, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify = F2(function(a, b) {
      return { $: 14, a, b };
    });
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = { $: 2 };
    var $mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName = F2(function(_v0, _v2) {
      var _v1 = _v0.a;
      var oneName = _v1.b;
      var _v3 = _v2.a;
      var twoName = _v3.b;
      return _Utils_eq(oneName, twoName);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists = F2(function(fieldOne, fieldTwo) {
      return A3($elm$core$List$foldl, F2(function(_new, existing) {
        var newField = _new.b;
        return A2($elm$core$List$any, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName(newField), $mdgriffith$elm_codegen$Internal$Compiler$denode), existing) ? existing : A2($elm$core$List$cons, _new, existing);
      }), fieldOne, fieldTwo);
    });
    var $elm$core$Dict$getMin = function(dict) {
      getMin:
        while (true) {
          if (dict.$ === -1 && dict.d.$ === -1) {
            var left = dict.d;
            var $temp$dict = left;
            dict = $temp$dict;
            continue getMin;
          } else {
            return dict;
          }
        }
    };
    var $elm$core$Dict$moveRedLeft = function(dict) {
      if (dict.$ === -1 && dict.d.$ === -1 && dict.e.$ === -1) {
        if (dict.e.d.$ === -1 && !dict.e.d.a) {
          var clr = dict.a;
          var k2 = dict.b;
          var v = dict.c;
          var _v1 = dict.d;
          var lClr = _v1.a;
          var lK = _v1.b;
          var lV = _v1.c;
          var lLeft = _v1.d;
          var lRight = _v1.e;
          var _v2 = dict.e;
          var rClr = _v2.a;
          var rK = _v2.b;
          var rV = _v2.c;
          var rLeft = _v2.d;
          var _v3 = rLeft.a;
          var rlK = rLeft.b;
          var rlV = rLeft.c;
          var rlL = rLeft.d;
          var rlR = rLeft.e;
          var rRight = _v2.e;
          return A5($elm$core$Dict$RBNode_elm_builtin, 0, rlK, rlV, A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight), rlL), A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
        } else {
          var clr = dict.a;
          var k2 = dict.b;
          var v = dict.c;
          var _v4 = dict.d;
          var lClr = _v4.a;
          var lK = _v4.b;
          var lV = _v4.c;
          var lLeft = _v4.d;
          var lRight = _v4.e;
          var _v5 = dict.e;
          var rClr = _v5.a;
          var rK = _v5.b;
          var rV = _v5.c;
          var rLeft = _v5.d;
          var rRight = _v5.e;
          if (clr === 1) {
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
          } else {
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
          }
        }
      } else {
        return dict;
      }
    };
    var $elm$core$Dict$moveRedRight = function(dict) {
      if (dict.$ === -1 && dict.d.$ === -1 && dict.e.$ === -1) {
        if (dict.d.d.$ === -1 && !dict.d.d.a) {
          var clr = dict.a;
          var k2 = dict.b;
          var v = dict.c;
          var _v1 = dict.d;
          var lClr = _v1.a;
          var lK = _v1.b;
          var lV = _v1.c;
          var _v2 = _v1.d;
          var _v3 = _v2.a;
          var llK = _v2.b;
          var llV = _v2.c;
          var llLeft = _v2.d;
          var llRight = _v2.e;
          var lRight = _v1.e;
          var _v4 = dict.e;
          var rClr = _v4.a;
          var rK = _v4.b;
          var rV = _v4.c;
          var rLeft = _v4.d;
          var rRight = _v4.e;
          return A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight), A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, lRight, A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
        } else {
          var clr = dict.a;
          var k2 = dict.b;
          var v = dict.c;
          var _v5 = dict.d;
          var lClr = _v5.a;
          var lK = _v5.b;
          var lV = _v5.c;
          var lLeft = _v5.d;
          var lRight = _v5.e;
          var _v6 = dict.e;
          var rClr = _v6.a;
          var rK = _v6.b;
          var rV = _v6.c;
          var rLeft = _v6.d;
          var rRight = _v6.e;
          if (clr === 1) {
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
          } else {
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight), A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
          }
        }
      } else {
        return dict;
      }
    };
    var $elm$core$Dict$removeHelpPrepEQGT = F7(function(targetKey, dict, color, key, value, left, right) {
      if (left.$ === -1 && !left.a) {
        var _v1 = left.a;
        var lK = left.b;
        var lV = left.c;
        var lLeft = left.d;
        var lRight = left.e;
        return A5($elm$core$Dict$RBNode_elm_builtin, color, lK, lV, lLeft, A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
      } else {
        _v2$2:
          while (true) {
            if (right.$ === -1 && right.a === 1) {
              if (right.d.$ === -1) {
                if (right.d.a === 1) {
                  var _v3 = right.a;
                  var _v4 = right.d;
                  var _v5 = _v4.a;
                  return $elm$core$Dict$moveRedRight(dict);
                } else {
                  break _v2$2;
                }
              } else {
                var _v6 = right.a;
                var _v7 = right.d;
                return $elm$core$Dict$moveRedRight(dict);
              }
            } else {
              break _v2$2;
            }
          }
        return dict;
      }
    });
    var $elm$core$Dict$removeMin = function(dict) {
      if (dict.$ === -1 && dict.d.$ === -1) {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var lColor = left.a;
        var lLeft = left.d;
        var right = dict.e;
        if (lColor === 1) {
          if (lLeft.$ === -1 && !lLeft.a) {
            var _v3 = lLeft.a;
            return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
          } else {
            var _v4 = $elm$core$Dict$moveRedLeft(dict);
            if (_v4.$ === -1) {
              var nColor = _v4.a;
              var nKey = _v4.b;
              var nValue = _v4.c;
              var nLeft = _v4.d;
              var nRight = _v4.e;
              return A5($elm$core$Dict$balance, nColor, nKey, nValue, $elm$core$Dict$removeMin(nLeft), nRight);
            } else {
              return $elm$core$Dict$RBEmpty_elm_builtin;
            }
          }
        } else {
          return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, $elm$core$Dict$removeMin(left), right);
        }
      } else {
        return $elm$core$Dict$RBEmpty_elm_builtin;
      }
    };
    var $elm$core$Dict$removeHelp = F2(function(targetKey, dict) {
      if (dict.$ === -2) {
        return $elm$core$Dict$RBEmpty_elm_builtin;
      } else {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        if (_Utils_cmp(targetKey, key) < 0) {
          if (left.$ === -1 && left.a === 1) {
            var _v4 = left.a;
            var lLeft = left.d;
            if (lLeft.$ === -1 && !lLeft.a) {
              var _v6 = lLeft.a;
              return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
            } else {
              var _v7 = $elm$core$Dict$moveRedLeft(dict);
              if (_v7.$ === -1) {
                var nColor = _v7.a;
                var nKey = _v7.b;
                var nValue = _v7.c;
                var nLeft = _v7.d;
                var nRight = _v7.e;
                return A5($elm$core$Dict$balance, nColor, nKey, nValue, A2($elm$core$Dict$removeHelp, targetKey, nLeft), nRight);
              } else {
                return $elm$core$Dict$RBEmpty_elm_builtin;
              }
            }
          } else {
            return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, A2($elm$core$Dict$removeHelp, targetKey, left), right);
          }
        } else {
          return A2($elm$core$Dict$removeHelpEQGT, targetKey, A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
        }
      }
    });
    var $elm$core$Dict$removeHelpEQGT = F2(function(targetKey, dict) {
      if (dict.$ === -1) {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        if (_Utils_eq(targetKey, key)) {
          var _v1 = $elm$core$Dict$getMin(right);
          if (_v1.$ === -1) {
            var minKey = _v1.b;
            var minValue = _v1.c;
            return A5($elm$core$Dict$balance, color, minKey, minValue, left, $elm$core$Dict$removeMin(right));
          } else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
          }
        } else {
          return A5($elm$core$Dict$balance, color, key, value, left, A2($elm$core$Dict$removeHelp, targetKey, right));
        }
      } else {
        return $elm$core$Dict$RBEmpty_elm_builtin;
      }
    });
    var $elm$core$Dict$remove = F2(function(key, dict) {
      var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
      if (_v0.$ === -1 && !_v0.a) {
        var _v1 = _v0.a;
        var k2 = _v0.b;
        var v = _v0.c;
        var l = _v0.d;
        var r = _v0.e;
        return A5($elm$core$Dict$RBNode_elm_builtin, 1, k2, v, l, r);
      } else {
        var x2 = _v0;
        return x2;
      }
    });
    var $elm$core$Dict$update = F3(function(targetKey, alter, dictionary) {
      var _v0 = alter(A2($elm$core$Dict$get, targetKey, dictionary));
      if (!_v0.$) {
        var value = _v0.a;
        return A3($elm$core$Dict$insert, targetKey, value, dictionary);
      } else {
        return A2($elm$core$Dict$remove, targetKey, dictionary);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$addInference = F3(function(key, value, infs) {
      return A3($elm$core$Dict$update, key, function(maybeValue) {
        if (maybeValue.$ === 1) {
          return $elm$core$Maybe$Just(value);
        } else {
          if (maybeValue.a.$ === 5) {
            var _v1 = maybeValue.a;
            var _v2 = _v1.a;
            var range = _v2.a;
            var recordName = _v2.b;
            var _v3 = _v1.b;
            var fieldRange = _v3.a;
            var fields = _v3.b;
            if (value.$ === 5) {
              var _v5 = value.b;
              var existingFields = _v5.b;
              return $elm$core$Maybe$Just(A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, recordName), A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldRange, A2($mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists, fields, existingFields))));
            } else {
              return maybeValue;
            }
          } else {
            var existing = maybeValue.a;
            return $elm$core$Maybe$Just(existing);
          }
        }
      }, infs);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey = F2(function(mod, name) {
      return A2($elm$core$String$join, ".", mod) + ("." + name);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getAlias = F2(function(_v0, cache) {
      var _v1 = _v0.b;
      var modName = _v1.a;
      var name = _v1.b;
      return A2($elm$core$Dict$get, A2($mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey, modName, name), cache);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField = function(a) {
      return { $: 7, a };
    };
    var $elm$core$Basics$composeR = F3(function(f, g2, x2) {
      return g2(f(x2));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getField = F4(function(name, val, fields, captured) {
      getField:
        while (true) {
          if (!fields.b) {
            return $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
              kX: A2($elm$core$List$map, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), captured),
              a6: name
            }));
          } else {
            var top = fields.a;
            var remain = fields.b;
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$denode(top);
            var _v2 = _v1.a;
            var topName = _v2.b;
            var _v3 = _v1.b;
            var topVal = _v3.b;
            if (_Utils_eq(topName, name)) {
              return $elm$core$Result$Ok(_Utils_Tuple2(topVal, _Utils_ap(captured, remain)));
            } else {
              var $temp$name = name, $temp$val = val, $temp$fields = remain, $temp$captured = A2($elm$core$List$cons, top, captured);
              name = $temp$name;
              val = $temp$val;
              fields = $temp$fields;
              captured = $temp$captured;
              continue getField;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$nodifyAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$Compiler$nodify);
    var $elm$core$Result$andThen = F2(function(callback, result) {
      if (!result.$) {
        var value = result.a;
        return callback(value);
      } else {
        var msg = result.a;
        return $elm$core$Result$Err(msg);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$isAppendable = function(annotation) {
      _v0$2:
        while (true) {
          if (annotation.$ === 1 && !annotation.a.b.a.b) {
            switch (annotation.a.b.b) {
              case "String":
                var _v1 = annotation.a;
                var _v2 = _v1.b;
                return true;
              case "List":
                if (annotation.b.b && !annotation.b.b.b) {
                  var _v3 = annotation.a;
                  var _v4 = _v3.b;
                  var _v5 = annotation.b;
                  return true;
                } else {
                  break _v0$2;
                }
              default:
                break _v0$2;
            }
          } else {
            break _v0$2;
          }
        }
      return false;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$isComparable = function(annotation) {
      isComparable:
        while (true) {
          _v0$6:
            while (true) {
              switch (annotation.$) {
                case 1:
                  if (annotation.a.b.a.b) {
                    if (annotation.a.b.a.a === "Char" && !annotation.a.b.a.b.b && annotation.a.b.b === "Char") {
                      var _v5 = annotation.a;
                      var _v6 = _v5.b;
                      var _v7 = _v6.a;
                      return true;
                    } else {
                      break _v0$6;
                    }
                  } else {
                    switch (annotation.a.b.b) {
                      case "Int":
                        var _v1 = annotation.a;
                        var _v2 = _v1.b;
                        return true;
                      case "Float":
                        var _v3 = annotation.a;
                        var _v4 = _v3.b;
                        return true;
                      case "String":
                        var _v8 = annotation.a;
                        var _v9 = _v8.b;
                        return true;
                      case "List":
                        if (annotation.b.b && !annotation.b.b.b) {
                          var _v10 = annotation.a;
                          var _v11 = _v10.b;
                          var _v12 = annotation.b;
                          var _v13 = _v12.a;
                          var inner = _v13.b;
                          var $temp$annotation = inner;
                          annotation = $temp$annotation;
                          continue isComparable;
                        } else {
                          break _v0$6;
                        }
                      default:
                        break _v0$6;
                    }
                  }
                case 3:
                  var innerList = annotation.a;
                  return A2($elm$core$List$all, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$isComparable, $mdgriffith$elm_codegen$Internal$Compiler$denode), innerList);
                default:
                  break _v0$6;
              }
            }
          return false;
        }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$isNumber = function(annotation) {
      _v0$2:
        while (true) {
          if (annotation.$ === 1 && !annotation.a.b.a.b) {
            switch (annotation.a.b.b) {
              case "Int":
                var _v1 = annotation.a;
                var _v2 = _v1.b;
                return true;
              case "Float":
                var _v3 = annotation.a;
                var _v4 = _v3.b;
                return true;
              default:
                break _v0$2;
            }
          } else {
            break _v0$2;
          }
        }
      return false;
    };
    var $stil4m$structured_writer$StructuredWriter$asIndent = function(amount) {
      return A2($elm$core$String$repeat, amount, " ");
    };
    var $elm$core$String$concat = function(strings) {
      return A2($elm$core$String$join, "", strings);
    };
    var $stil4m$structured_writer$StructuredWriter$writeIndented = F2(function(indent_, w) {
      switch (w.$) {
        case 0:
          var _v1 = w.a;
          var pre = _v1.a;
          var sep = _v1.b;
          var post = _v1.c;
          var differentLines = w.b;
          var items = w.c;
          var seperator = differentLines ? `
` + ($stil4m$structured_writer$StructuredWriter$asIndent(indent_) + sep) : sep;
          return $elm$core$String$concat(_List_fromArray([
            pre,
            A2($elm$core$String$join, seperator, A2($elm$core$List$map, A2($elm$core$Basics$composeR, $elm$core$Basics$identity, $stil4m$structured_writer$StructuredWriter$writeIndented(indent_)), items)),
            post
          ]));
        case 1:
          var items = w.a;
          return A2($elm$core$String$join, `
` + $stil4m$structured_writer$StructuredWriter$asIndent(indent_), A2($elm$core$List$concatMap, A2($elm$core$Basics$composeR, $stil4m$structured_writer$StructuredWriter$writeIndented(0), $elm$core$String$split(`
`)), items));
        case 2:
          var s = w.a;
          return s;
        case 4:
          var n = w.a;
          var next = w.b;
          return _Utils_ap($stil4m$structured_writer$StructuredWriter$asIndent(n + indent_), A2($stil4m$structured_writer$StructuredWriter$writeIndented, n + indent_, next));
        case 5:
          var items = w.a;
          return A2($elm$core$String$join, " ", A2($elm$core$List$map, $stil4m$structured_writer$StructuredWriter$writeIndented(indent_), items));
        case 6:
          var items = w.a;
          return $elm$core$String$concat(A2($elm$core$List$map, $stil4m$structured_writer$StructuredWriter$writeIndented(indent_), items));
        default:
          var x2 = w.a;
          var y2 = w.b;
          return _Utils_ap(A2($stil4m$structured_writer$StructuredWriter$writeIndented, indent_, x2), A2($stil4m$structured_writer$StructuredWriter$writeIndented, indent_, y2));
      }
    });
    var $stil4m$structured_writer$StructuredWriter$write = $stil4m$structured_writer$StructuredWriter$writeIndented(0);
    var $stil4m$elm_syntax$Elm$Writer$write = $stil4m$structured_writer$StructuredWriter$write;
    var $stil4m$structured_writer$StructuredWriter$Sep = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $stil4m$structured_writer$StructuredWriter$bracesComma = $stil4m$structured_writer$StructuredWriter$Sep(_Utils_Tuple3("{", ", ", "}"));
    var $stil4m$structured_writer$StructuredWriter$Joined = function(a) {
      return { $: 6, a };
    };
    var $stil4m$structured_writer$StructuredWriter$join = $stil4m$structured_writer$StructuredWriter$Joined;
    var $stil4m$structured_writer$StructuredWriter$parensComma = $stil4m$structured_writer$StructuredWriter$Sep(_Utils_Tuple3("(", ", ", ")"));
    var $stil4m$structured_writer$StructuredWriter$Str = function(a) {
      return { $: 2, a };
    };
    var $stil4m$structured_writer$StructuredWriter$string = $stil4m$structured_writer$StructuredWriter$Str;
    var $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces = function(w) {
      return A2($elm$core$String$contains, " ", $stil4m$structured_writer$StructuredWriter$write(w)) ? $stil4m$structured_writer$StructuredWriter$join(_List_fromArray([
        $stil4m$structured_writer$StructuredWriter$string("("),
        w,
        $stil4m$structured_writer$StructuredWriter$string(")")
      ])) : w;
    };
    var $elm$core$Tuple$second = function(_v0) {
      var y2 = _v0.b;
      return y2;
    };
    var $stil4m$structured_writer$StructuredWriter$sepByComma = $stil4m$structured_writer$StructuredWriter$Sep(_Utils_Tuple3("", ", ", ""));
    var $stil4m$structured_writer$StructuredWriter$Spaced = function(a) {
      return { $: 5, a };
    };
    var $stil4m$structured_writer$StructuredWriter$spaced = $stil4m$structured_writer$StructuredWriter$Spaced;
    var $stil4m$elm_syntax$Elm$Writer$writeRecordField = function(_v4) {
      var _v5 = _v4.b;
      var name = _v5.a;
      var ref = _v5.b;
      return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
        $stil4m$structured_writer$StructuredWriter$string($stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
        $stil4m$structured_writer$StructuredWriter$string(":"),
        $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(ref)
      ]));
    };
    var $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation = function(_v0) {
      var typeAnnotation = _v0.b;
      switch (typeAnnotation.$) {
        case 0:
          var s = typeAnnotation.a;
          return $stil4m$structured_writer$StructuredWriter$string(s);
        case 1:
          var moduleNameAndName = typeAnnotation.a;
          var args = typeAnnotation.b;
          var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).a;
          var k2 = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).b;
          return $stil4m$structured_writer$StructuredWriter$spaced(A2($elm$core$List$cons, $stil4m$structured_writer$StructuredWriter$string(A2($elm$core$String$join, ".", _Utils_ap(moduleName, _List_fromArray([k2])))), A2($elm$core$List$map, A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces), args)));
        case 2:
          return $stil4m$structured_writer$StructuredWriter$string("()");
        case 3:
          var xs = typeAnnotation.a;
          return A2($stil4m$structured_writer$StructuredWriter$parensComma, false, A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, xs));
        case 4:
          var xs = typeAnnotation.a;
          return A2($stil4m$structured_writer$StructuredWriter$bracesComma, false, A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeRecordField, xs));
        case 5:
          var name = typeAnnotation.a;
          var fields = typeAnnotation.b;
          return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
            $stil4m$structured_writer$StructuredWriter$string("{"),
            $stil4m$structured_writer$StructuredWriter$string($stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
            $stil4m$structured_writer$StructuredWriter$string("|"),
            A2($stil4m$structured_writer$StructuredWriter$sepByComma, false, A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Writer$writeRecordField, $stil4m$elm_syntax$Elm$Syntax$Node$value(fields))),
            $stil4m$structured_writer$StructuredWriter$string("}")
          ]));
        default:
          var left = typeAnnotation.a;
          var right = typeAnnotation.b;
          var addParensForSubTypeAnnotation = function(type_) {
            if (type_.b.$ === 6) {
              var _v3 = type_.b;
              return $stil4m$structured_writer$StructuredWriter$join(_List_fromArray([
                $stil4m$structured_writer$StructuredWriter$string("("),
                $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_),
                $stil4m$structured_writer$StructuredWriter$string(")")
              ]));
            } else {
              return $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_);
            }
          };
          return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
            addParensForSubTypeAnnotation(left),
            $stil4m$structured_writer$StructuredWriter$string("->"),
            addParensForSubTypeAnnotation(right)
          ]));
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions = F2(function(restrictions, type_) {
      switch (restrictions.$) {
        case 0:
          return $elm$core$Result$Ok(type_);
        case 5:
          var constraints = restrictions.a;
          return $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + (" needs to be: " + (A2($elm$core$String$join, ", ", A2($elm$core$List$concatMap, function(constraint) {
            switch (constraint.$) {
              case 0:
                return _List_Nil;
              case 5:
                return _List_Nil;
              case 1:
                return _List_fromArray(["a number"]);
              case 3:
                return _List_fromArray(["comparable"]);
              case 2:
                return _List_fromArray(["appendable"]);
              default:
                return _List_fromArray(["appendable and comparable"]);
            }
          }, constraints)) + `

but that's impossible!  Or Elm Codegen's s typechecker is off.`)));
        case 1:
          return $mdgriffith$elm_codegen$Internal$Compiler$isNumber(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not a number");
        case 3:
          return $mdgriffith$elm_codegen$Internal$Compiler$isComparable(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not comparable.  Only Ints, Floats, Chars, Strings and Lists and Tuples of those things are comparable.");
        case 2:
          return $mdgriffith$elm_codegen$Internal$Compiler$isAppendable(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable.");
        default:
          return $mdgriffith$elm_codegen$Internal$Compiler$isComparable(type_) || $mdgriffith$elm_codegen$Internal$Compiler$isAppendable(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable/comparable.  Only Strings and Lists are allowed here.");
      }
    });
    var $mdgriffith$elm_codegen$Result$Extra$combineMapHelper = F3(function(f, acc, list) {
      combineMapHelper:
        while (true) {
          if (!list.b) {
            return $elm$core$Result$Ok($elm$core$List$reverse(acc));
          } else {
            var h2 = list.a;
            var t = list.b;
            var _v1 = f(h2);
            if (_v1.$ === 1) {
              var e = _v1.a;
              return $elm$core$Result$Err(e);
            } else {
              var fh = _v1.a;
              var $temp$f = f, $temp$acc = A2($elm$core$List$cons, fh, acc), $temp$list = t;
              f = $temp$f;
              acc = $temp$acc;
              list = $temp$list;
              continue combineMapHelper;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Result$Extra$combineMap = F2(function(f, list) {
      return A3($mdgriffith$elm_codegen$Result$Extra$combineMapHelper, f, _List_Nil, list);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions = { $: 0 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsAppendable = { $: 2 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsAppendableComparable = { $: 4 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsComparable = { $: 3 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsNumber = { $: 1 };
    var $mdgriffith$elm_codegen$Internal$Compiler$nameToRestrictions = function(name) {
      return A2($elm$core$String$startsWith, "number", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsNumber : A2($elm$core$String$startsWith, "comparable", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsComparable : A2($elm$core$String$startsWith, "appendable", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsAppendable : A2($elm$core$String$startsWith, "compappend", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsAppendableComparable : $mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted = function(a) {
      return { $: 5, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$restrictFurther = F2(function(restriction, newRestriction) {
      switch (restriction.$) {
        case 0:
          return newRestriction;
        case 5:
          var constraints = restriction.a;
          switch (newRestriction.$) {
            case 5:
              var newConstraints = newRestriction.a;
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_Utils_ap(constraints, newConstraints));
            case 0:
              return restriction;
            default:
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(A2($elm$core$List$cons, newRestriction, constraints));
          }
        case 1:
          switch (newRestriction.$) {
            case 1:
              return newRestriction;
            case 0:
              return restriction;
            case 5:
              var constraints = newRestriction.a;
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(A2($elm$core$List$cons, restriction, constraints));
            default:
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
          }
        case 3:
          switch (newRestriction.$) {
            case 0:
              return restriction;
            case 4:
              return newRestriction;
            case 3:
              return newRestriction;
            case 5:
              var constraints = newRestriction.a;
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(A2($elm$core$List$cons, restriction, constraints));
            default:
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
          }
        case 2:
          switch (newRestriction.$) {
            case 0:
              return restriction;
            case 4:
              return newRestriction;
            case 3:
              return newRestriction;
            case 5:
              var constraints = newRestriction.a;
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(A2($elm$core$List$cons, restriction, constraints));
            default:
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
          }
        default:
          switch (newRestriction.$) {
            case 0:
              return restriction;
            case 4:
              return newRestriction;
            case 3:
              return newRestriction;
            case 2:
              return newRestriction;
            case 5:
              var constraints = newRestriction.a;
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(A2($elm$core$List$cons, restriction, constraints));
            default:
              return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
          }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper = F3(function(existingRestrictions, notation, cache) {
      getRestrictionsHelper:
        while (true) {
          switch (notation.$) {
            case 6:
              return existingRestrictions;
            case 0:
              var name = notation.a;
              var $temp$existingRestrictions = A2($mdgriffith$elm_codegen$Internal$Compiler$restrictFurther, existingRestrictions, $mdgriffith$elm_codegen$Internal$Compiler$nameToRestrictions(name)), $temp$notation = A2($elm$core$Maybe$withDefault, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit, A2($elm$core$Dict$get, name, cache)), $temp$cache = cache;
              existingRestrictions = $temp$existingRestrictions;
              notation = $temp$notation;
              cache = $temp$cache;
              continue getRestrictionsHelper;
            case 1:
              return existingRestrictions;
            case 2:
              return existingRestrictions;
            case 3:
              return existingRestrictions;
            case 4:
              return existingRestrictions;
            default:
              return existingRestrictions;
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions = F2(function(notation, cache) {
      return A3($mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper, $mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions, notation, cache);
    });
    var $elm$core$Result$map = F2(function(func, ra) {
      if (!ra.$) {
        var a = ra.a;
        return $elm$core$Result$Ok(func(a));
      } else {
        var e = ra.a;
        return $elm$core$Result$Err(e);
      }
    });
    var $elm$core$Result$map2 = F3(function(func, ra, rb) {
      if (ra.$ === 1) {
        var x2 = ra.a;
        return $elm$core$Result$Err(x2);
      } else {
        var a = ra.a;
        if (rb.$ === 1) {
          var x2 = rb.a;
          return $elm$core$Result$Err(x2);
        } else {
          var b = rb.a;
          return $elm$core$Result$Ok(A2(func, a, b));
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList = F4(function(visited, cache, nodes, processed) {
      resolveVariableList:
        while (true) {
          if (!nodes.b) {
            return $elm$core$Result$Ok($elm$core$List$reverse(processed));
          } else {
            var _v13 = nodes.a;
            var coords = _v13.a;
            var top = _v13.b;
            var remain = nodes.b;
            var _v14 = A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, visited, cache, top);
            if (!_v14.$) {
              var resolved = _v14.a;
              var $temp$visited = visited, $temp$cache = cache, $temp$nodes = remain, $temp$processed = A2($elm$core$List$cons, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, coords, resolved), processed);
              visited = $temp$visited;
              cache = $temp$cache;
              nodes = $temp$nodes;
              processed = $temp$processed;
              continue resolveVariableList;
            } else {
              var err = _v14.a;
              return $elm$core$Result$Err(err);
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables = F3(function(visited, cache, annotation) {
      resolveVariables:
        while (true) {
          switch (annotation.$) {
            case 6:
              var _v1 = annotation.a;
              var oneCoords = _v1.a;
              var one = _v1.b;
              var _v2 = annotation.b;
              var twoCoords = _v2.a;
              var two = _v2.b;
              return A3($elm$core$Result$map2, F2(function(oneResolved, twoResolved) {
                return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, oneCoords, oneResolved), A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, twoCoords, twoResolved));
              }), A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, visited, cache, one), A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, visited, cache, two));
            case 0:
              var name = annotation.a;
              if (A2($elm$core$Set$member, name, visited)) {
                return $elm$core$Result$Err("Infinite type inference loop!  Whoops.  This is an issue with elm-codegen.  If you can report this to the elm-codegen repo, that would be appreciated!");
              } else {
                var _v3 = A2($elm$core$Dict$get, name, cache);
                if (_v3.$ === 1) {
                  return $elm$core$Result$Ok(annotation);
                } else {
                  var newType = _v3.a;
                  var $temp$visited = A2($elm$core$Set$insert, name, visited), $temp$cache = cache, $temp$annotation = newType;
                  visited = $temp$visited;
                  cache = $temp$cache;
                  annotation = $temp$annotation;
                  continue resolveVariables;
                }
              }
            case 1:
              var nodedModuleName = annotation.a;
              var vars = annotation.b;
              return A2($elm$core$Result$map, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed(nodedModuleName), A4($mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList, visited, cache, vars, _List_Nil));
            case 2:
              return $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit);
            case 3:
              var nodes = annotation.a;
              return A2($elm$core$Result$map, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled, A4($mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList, visited, cache, nodes, _List_Nil));
            case 4:
              var fields = annotation.a;
              return A2($elm$core$Result$map, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record, A2($mdgriffith$elm_codegen$Result$Extra$combineMap, function(_v4) {
                var fieldRange = _v4.a;
                var _v5 = _v4.b;
                var name2 = _v5.a;
                var _v6 = _v5.b;
                var fieldTypeRange = _v6.a;
                var fieldType = _v6.b;
                return A2($elm$core$Result$andThen, function(resolvedField) {
                  var restrictions = A2($mdgriffith$elm_codegen$Internal$Compiler$getRestrictions, annotation, cache);
                  return A2($elm$core$Result$map, function(_v7) {
                    return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldRange, _Utils_Tuple2(name2, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldTypeRange, resolvedField)));
                  }, A2($mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions, restrictions, resolvedField));
                }, A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, visited, cache, fieldType));
              }, fields));
            default:
              var baseName = annotation.a;
              var _v8 = annotation.b;
              var recordNode = _v8.a;
              var fields = _v8.b;
              return A2($elm$core$Result$map, function(newFields) {
                return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, baseName, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, recordNode, newFields));
              }, A2($mdgriffith$elm_codegen$Result$Extra$combineMap, function(_v9) {
                var fieldRange = _v9.a;
                var _v10 = _v9.b;
                var name2 = _v10.a;
                var _v11 = _v10.b;
                var fieldTypeRange = _v11.a;
                var fieldType = _v11.b;
                return A2($elm$core$Result$map, function(resolvedField) {
                  return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldRange, _Utils_Tuple2(name2, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldTypeRange, resolvedField)));
                }, A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, visited, cache, fieldType));
              }, fields));
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiable = F4(function(aliases, vars, one, two) {
      unifiable:
        while (true) {
          switch (one.$) {
            case 0:
              var varName = one.a;
              var _v28 = A2($elm$core$Dict$get, varName, vars);
              if (_v28.$ === 1) {
                if (!two.$) {
                  var varNameB = two.a;
                  return _Utils_eq(varNameB, varName) ? _Utils_Tuple2(vars, $elm$core$Result$Ok(one)) : _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, varName, two, vars), $elm$core$Result$Ok(two));
                } else {
                  return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, varName, two, vars), $elm$core$Result$Ok(two));
                }
              } else {
                var found = _v28.a;
                if (!two.$) {
                  var varNameB = two.a;
                  if (_Utils_eq(varNameB, varName)) {
                    return _Utils_Tuple2(vars, $elm$core$Result$Ok(one));
                  } else {
                    var _v31 = A2($elm$core$Dict$get, varNameB, vars);
                    if (_v31.$ === 1) {
                      return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, varNameB, found, vars), $elm$core$Result$Ok(two));
                    } else {
                      var foundTwo = _v31.a;
                      var $temp$aliases = aliases, $temp$vars = vars, $temp$one = found, $temp$two = foundTwo;
                      aliases = $temp$aliases;
                      vars = $temp$vars;
                      one = $temp$one;
                      two = $temp$two;
                      continue unifiable;
                    }
                  }
                } else {
                  var $temp$aliases = aliases, $temp$vars = vars, $temp$one = found, $temp$two = two;
                  aliases = $temp$aliases;
                  vars = $temp$vars;
                  one = $temp$one;
                  two = $temp$two;
                  continue unifiable;
                }
              }
            case 1:
              var oneName = one.a;
              var oneVars = one.b;
              switch (two.$) {
                case 1:
                  var twoName = two.a;
                  var twoContents = two.b;
                  if (_Utils_eq($mdgriffith$elm_codegen$Internal$Compiler$denode(oneName), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoName))) {
                    var _v33 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableLists, aliases, vars, oneVars, twoContents, _List_Nil);
                    if (!_v33.b.$) {
                      var newVars = _v33.a;
                      var unifiedContent = _v33.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok(A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, twoName, unifiedContent)));
                    } else {
                      var newVars = _v33.a;
                      var err = _v33.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  } else {
                    return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
                  }
                case 0:
                  var b = two.a;
                  return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                default:
                  var _v34 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias, aliases, vars, oneName, oneVars, two);
                  if (_v34.$ === 1) {
                    return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
                  } else {
                    var unified = _v34.a;
                    return unified;
                  }
              }
            case 2:
              switch (two.$) {
                case 0:
                  var b = two.a;
                  var _v36 = A2($elm$core$Dict$get, b, vars);
                  if (_v36.$ === 1) {
                    return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                  } else {
                    var foundTwo = _v36.a;
                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                    aliases = $temp$aliases;
                    vars = $temp$vars;
                    one = $temp$one;
                    two = $temp$two;
                    continue unifiable;
                  }
                case 2:
                  return _Utils_Tuple2(vars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit));
                default:
                  return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
              }
            case 3:
              var valsA = one.a;
              switch (two.$) {
                case 0:
                  var b = two.a;
                  var _v38 = A2($elm$core$Dict$get, b, vars);
                  if (_v38.$ === 1) {
                    return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                  } else {
                    var foundTwo = _v38.a;
                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                    aliases = $temp$aliases;
                    vars = $temp$vars;
                    one = $temp$one;
                    two = $temp$two;
                    continue unifiable;
                  }
                case 3:
                  var valsB = two.a;
                  var _v39 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableLists, aliases, vars, valsA, valsB, _List_Nil);
                  if (!_v39.b.$) {
                    var newVars = _v39.a;
                    var unified = _v39.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(unified)));
                  } else {
                    var newVars = _v39.a;
                    var err = _v39.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                  }
                default:
                  return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
              }
            case 4:
              var fieldsA = one.a;
              switch (two.$) {
                case 0:
                  var b = two.a;
                  var _v41 = A2($elm$core$Dict$get, b, vars);
                  if (_v41.$ === 1) {
                    return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                  } else {
                    var foundTwo = _v41.a;
                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                    aliases = $temp$aliases;
                    vars = $temp$vars;
                    one = $temp$one;
                    two = $temp$two;
                    continue unifiable;
                  }
                case 5:
                  var _v42 = two.a;
                  var twoRecName = _v42.b;
                  var _v43 = two.b;
                  var fieldsB = _v43.b;
                  var _v44 = A2($elm$core$Dict$get, twoRecName, vars);
                  if (_v44.$ === 1) {
                    var _v45 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                    if (!_v45.b.$) {
                      var newVars = _v45.a;
                      var unifiedFields = _v45.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                    } else {
                      var newVars = _v45.a;
                      var err = _v45.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  } else {
                    var _v46 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                    if (!_v46.b.$) {
                      var newVars = _v46.a;
                      var unifiedFields = _v46.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                    } else {
                      var newVars = _v46.a;
                      var err = _v46.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  }
                case 4:
                  var fieldsB = two.a;
                  var _v47 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                  if (!_v47.b.$) {
                    var newVars = _v47.a;
                    var unifiedFields = _v47.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                  } else {
                    var newVars = _v47.a;
                    var err = _v47.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                  }
                case 1:
                  var twoName = two.a;
                  var twoVars = two.b;
                  var _v48 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias, aliases, vars, twoName, twoVars, one);
                  if (_v48.$ === 1) {
                    return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
                  } else {
                    var unified = _v48.a;
                    return unified;
                  }
                default:
                  return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
              }
            case 5:
              var _v49 = one.b;
              var fieldsA = _v49.b;
              switch (two.$) {
                case 0:
                  var b = two.a;
                  var _v51 = A2($elm$core$Dict$get, b, vars);
                  if (_v51.$ === 1) {
                    return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                  } else {
                    var foundTwo = _v51.a;
                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                    aliases = $temp$aliases;
                    vars = $temp$vars;
                    one = $temp$one;
                    two = $temp$two;
                    continue unifiable;
                  }
                case 5:
                  var _v52 = two.a;
                  var twoRecName = _v52.b;
                  var _v53 = two.b;
                  var fieldsB = _v53.b;
                  var _v54 = A2($elm$core$Dict$get, twoRecName, vars);
                  if (_v54.$ === 1) {
                    var _v55 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                    if (!_v55.b.$) {
                      var newVars = _v55.a;
                      var unifiedFields = _v55.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                    } else {
                      var newVars = _v55.a;
                      var err = _v55.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  } else {
                    var _v56 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                    if (!_v56.b.$) {
                      var newVars = _v56.a;
                      var unifiedFields = _v56.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                    } else {
                      var newVars = _v56.a;
                      var err = _v56.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  }
                case 4:
                  var fieldsB = two.a;
                  var _v57 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields, aliases, vars, fieldsA, fieldsB, _List_Nil);
                  if (!_v57.b.$) {
                    var newVars = _v57.a;
                    var unifiedFields = _v57.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                  } else {
                    var newVars = _v57.a;
                    var err = _v57.b.a;
                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                  }
                case 1:
                  var twoName = two.a;
                  var twoVars = two.b;
                  var _v58 = A5($mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias, aliases, vars, twoName, twoVars, one);
                  if (_v58.$ === 1) {
                    return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
                  } else {
                    var unified = _v58.a;
                    return unified;
                  }
                default:
                  return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
              }
            default:
              var _v59 = one.a;
              var oneA = _v59.b;
              var _v60 = one.b;
              var oneB = _v60.b;
              switch (two.$) {
                case 0:
                  var b = two.a;
                  var _v62 = A2($elm$core$Dict$get, b, vars);
                  if (_v62.$ === 1) {
                    return _Utils_Tuple2(A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, b, one, vars), $elm$core$Result$Ok(one));
                  } else {
                    var foundTwo = _v62.a;
                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                    aliases = $temp$aliases;
                    vars = $temp$vars;
                    one = $temp$one;
                    two = $temp$two;
                    continue unifiable;
                  }
                case 6:
                  var _v63 = two.a;
                  var twoA = _v63.b;
                  var _v64 = two.b;
                  var twoB = _v64.b;
                  var _v65 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, vars, oneA, twoA);
                  if (!_v65.b.$) {
                    var aVars = _v65.a;
                    var unifiedA = _v65.b.a;
                    var _v66 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, aVars, oneB, twoB);
                    if (!_v66.b.$) {
                      var bVars = _v66.a;
                      var unifiedB = _v66.b.a;
                      return _Utils_Tuple2(bVars, $elm$core$Result$Ok(A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedA), $mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedB))));
                    } else {
                      var otherwise = _v66;
                      return otherwise;
                    }
                  } else {
                    var otherwise = _v65;
                    return otherwise;
                  }
                default:
                  return _Utils_Tuple2(vars, $elm$core$Result$Err(A2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify, one, two)));
              }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields = F5(function(aliases, vars, one, two, unified) {
      unifiableFields:
        while (true) {
          var _v17 = _Utils_Tuple2(one, two);
          if (!_v17.a.b) {
            if (!_v17.b.b) {
              return _Utils_Tuple2(vars, $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll($elm$core$List$reverse(unified))));
            } else {
              return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables));
            }
          } else {
            var _v18 = _v17.a;
            var _v19 = _v18.a;
            var _v20 = _v19.b;
            var _v21 = _v20.a;
            var oneFieldName = _v21.b;
            var _v22 = _v20.b;
            var oneFieldVal = _v22.b;
            var oneRemain = _v18.b;
            var twoFields = _v17.b;
            var _v23 = A4($mdgriffith$elm_codegen$Internal$Compiler$getField, oneFieldName, oneFieldVal, twoFields, _List_Nil);
            if (!_v23.$) {
              var _v24 = _v23.a;
              var matchingFieldVal = _v24.a;
              var remainingTwo = _v24.b;
              var _v25 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, vars, oneFieldVal, matchingFieldVal);
              var newVars = _v25.a;
              var unifiedFieldResult = _v25.b;
              if (!unifiedFieldResult.$) {
                var unifiedField = unifiedFieldResult.a;
                var $temp$aliases = aliases, $temp$vars = newVars, $temp$one = oneRemain, $temp$two = remainingTwo, $temp$unified = A2($elm$core$List$cons, _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(oneFieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedField)), unified);
                aliases = $temp$aliases;
                vars = $temp$vars;
                one = $temp$one;
                two = $temp$two;
                unified = $temp$unified;
                continue unifiableFields;
              } else {
                var err = unifiedFieldResult.a;
                return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
              }
            } else {
              var notFound = _v23.a;
              return _Utils_Tuple2(vars, $elm$core$Result$Err(notFound));
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiableLists = F5(function(aliases, vars, one, two, unified) {
      unifiableLists:
        while (true) {
          var _v6 = _Utils_Tuple2(one, two);
          _v6$3:
            while (true) {
              if (!_v6.a.b) {
                if (!_v6.b.b) {
                  return _Utils_Tuple2(vars, $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll($elm$core$List$reverse(unified))));
                } else {
                  break _v6$3;
                }
              } else {
                if (_v6.b.b) {
                  if (!_v6.a.b.b && !_v6.b.b.b) {
                    var _v7 = _v6.a;
                    var _v8 = _v7.a;
                    var oneX = _v8.b;
                    var _v9 = _v6.b;
                    var _v10 = _v9.a;
                    var twoX = _v10.b;
                    var _v11 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, vars, oneX, twoX);
                    if (!_v11.b.$) {
                      var newVars = _v11.a;
                      var un = _v11.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll($elm$core$List$reverse(A2($elm$core$List$cons, un, unified)))));
                    } else {
                      var newVars = _v11.a;
                      var err = _v11.b.a;
                      return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                  } else {
                    var _v12 = _v6.a;
                    var _v13 = _v12.a;
                    var oneX = _v13.b;
                    var oneRemain = _v12.b;
                    var _v14 = _v6.b;
                    var _v15 = _v14.a;
                    var twoX = _v15.b;
                    var twoRemain = _v14.b;
                    var _v16 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, vars, oneX, twoX);
                    if (!_v16.b.$) {
                      var newVars = _v16.a;
                      var un = _v16.b.a;
                      var $temp$aliases = aliases, $temp$vars = newVars, $temp$one = oneRemain, $temp$two = twoRemain, $temp$unified = A2($elm$core$List$cons, un, unified);
                      aliases = $temp$aliases;
                      vars = $temp$vars;
                      one = $temp$one;
                      two = $temp$two;
                      unified = $temp$unified;
                      continue unifiableLists;
                    } else {
                      var err = _v16.b.a;
                      return _Utils_Tuple2(vars, $elm$core$Result$Err(err));
                    }
                  }
                } else {
                  break _v6$3;
                }
              }
            }
          return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables));
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias = F5(function(aliases, vars, typename, typeVars, typeToUnifyWith) {
      var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$getAlias, typename, aliases);
      if (_v0.$ === 1) {
        return $elm$core$Maybe$Nothing;
      } else {
        var foundAlias = _v0.a;
        var fullAliasedType = function() {
          var _v3 = foundAlias.cj;
          if (!_v3.b) {
            return foundAlias.iS;
          } else {
            var makeAliasVarCache = F2(function(varName, _v5) {
              var varType = _v5.b;
              return _Utils_Tuple2(varName, varType);
            });
            var _v4 = A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, $elm$core$Set$empty, $elm$core$Dict$fromList(A3($elm$core$List$map2, makeAliasVarCache, foundAlias.cj, typeVars)), foundAlias.iS);
            if (!_v4.$) {
              var resolvedType = _v4.a;
              return resolvedType;
            } else {
              return foundAlias.iS;
            }
          }
        }();
        var _v1 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, vars, fullAliasedType, typeToUnifyWith);
        var returnedVars = _v1.a;
        var unifiedResult = _v1.b;
        if (!unifiedResult.$) {
          return $elm$core$Maybe$Just(_Utils_Tuple2(returnedVars, $elm$core$Result$Ok(fullAliasedType)));
        } else {
          return $elm$core$Maybe$Nothing;
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyOn = F2(function(_v0, res) {
      var annDetails = _v0;
      if (res.$ === 1) {
        return res;
      } else {
        var inf = res.a;
        var _v2 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, inf.jQ, inf.g, annDetails.h, inf.ji);
        var newInferences = _v2.a;
        var finalResult = _v2.b;
        if (!finalResult.$) {
          var finalType = finalResult.a;
          return $elm$core$Result$Ok({
            jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, annDetails.jQ, inf.jQ),
            g: newInferences,
            ji: finalType
          });
        } else {
          var err = finalResult.a;
          return $elm$core$Result$Err(_List_fromArray([err]));
        }
      }
    });
    var $mdgriffith$elm_codegen$Elm$Case$captureCaseHelper = F3(function(mainCaseExpressionModule, _v0, accum) {
      var toBranch = _v0;
      var _v1 = toBranch($mdgriffith$elm_codegen$Internal$Index$dive(accum.ba));
      var branchIndex = _v1.a;
      var originalPattern = _v1.b;
      var caseExpression = _v1.c;
      var _v2 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, branchIndex, caseExpression);
      var exp = _v2.b;
      var pattern = function() {
        if (!mainCaseExpressionModule.b) {
          return originalPattern;
        } else {
          if (originalPattern.$ === 12) {
            var named = originalPattern.a;
            var vars = originalPattern.b;
            return A2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern, { lK: mainCaseExpressionModule, j: named.j }, vars);
          } else {
            return originalPattern;
          }
        }
      }();
      return {
        h: function() {
          var _v3 = accum.h;
          if (_v3.$ === 1) {
            return $elm$core$Maybe$Just(exp.h);
          } else {
            if (!_v3.a.$) {
              var gatheredAnnotation = _v3.a.a;
              return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Internal$Compiler$unifyOn, { jQ: gatheredAnnotation.jQ, h: gatheredAnnotation.ji, d: _List_Nil }, A2($mdgriffith$elm_codegen$Elm$Case$combineInferences, gatheredAnnotation.g, exp.h)));
            } else {
              var err = _v3.a;
              return $elm$core$Maybe$Just(err);
            }
          }
        }(),
        aw: A2($elm$core$List$cons, _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(pattern), $mdgriffith$elm_codegen$Internal$Compiler$nodify(exp.c)), accum.aw),
        d: _Utils_ap(accum.d, exp.d),
        ba: $mdgriffith$elm_codegen$Internal$Index$next(accum.ba)
      };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$importInferences = F2(function(one, two) {
      return {
        jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, one.jQ, two.jQ),
        g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, one.g, two.g),
        ji: two.ji
      };
    });
    var $mdgriffith$elm_codegen$Elm$Case$captureCase = F4(function(mainExpression, mainExpressionTypeModule, index, branches) {
      var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, mainExpression);
      var branchIndex = _v0.a;
      var mainExpressionDetails = _v0.b;
      var caseExp = A3($elm$core$List$foldl, $mdgriffith$elm_codegen$Elm$Case$captureCaseHelper(mainExpressionTypeModule), { h: $elm$core$Maybe$Nothing, aw: _List_Nil, d: _List_Nil, ba: branchIndex }, branches);
      return _Utils_Tuple2(mainExpressionDetails, _Utils_update(caseExp, {
        h: function() {
          var _v1 = caseExp.h;
          if (!_v1.$ && !_v1.a.$) {
            var inference = _v1.a.a;
            var _v2 = mainExpressionDetails.h;
            if (_v2.$ === 1) {
              var err = _v2.a;
              return $elm$core$Maybe$Just($elm$core$Result$Err(err));
            } else {
              var mainAnn = _v2.a;
              return $elm$core$Maybe$Just($elm$core$Result$Ok(A2($mdgriffith$elm_codegen$Internal$Compiler$importInferences, mainAnn, inference)));
            }
          } else {
            return caseExp.h;
          }
        }()
      }));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getTypeModule = function(_v0) {
      var annotation = _v0;
      var _v1 = annotation.h;
      if (_v1.$ === 1) {
        var _v2 = _v1.a;
        var _v3 = _v2.b;
        var mod = _v3.a;
        return mod;
      } else {
        return _List_Nil;
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases = $elm$core$Dict$empty;
    var $mdgriffith$elm_codegen$Elm$withType = F2(function(ann, _v0) {
      var annDetails = ann;
      var toExp = _v0;
      return function(index) {
        var exp = toExp(index);
        return _Utils_update(exp, {
          h: function() {
            var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$unifyOn, ann, exp.h);
            if (!_v1.$) {
              var unified = _v1.a;
              return $elm$core$Result$Ok(unified);
            } else {
              var _v2 = exp.h;
              if (!_v2.$) {
                var expressionAnnotation = _v2.a;
                return $elm$core$Result$Ok({ jQ: expressionAnnotation.jQ, g: expressionAnnotation.g, ji: annDetails.h });
              } else {
                return $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: annDetails.h });
              }
            }
          }(),
          d: _Utils_ap(exp.d, annDetails.d)
        });
      };
    });
    var $mdgriffith$elm_codegen$Elm$Case$custom = F3(function(mainExpression, annotation, branches) {
      return function(index) {
        var myMain = A2($mdgriffith$elm_codegen$Elm$withType, annotation, mainExpression);
        var _v0 = A4($mdgriffith$elm_codegen$Elm$Case$captureCase, myMain, $mdgriffith$elm_codegen$Internal$Compiler$getTypeModule(annotation), $mdgriffith$elm_codegen$Internal$Index$dive(index), branches);
        var expr = _v0.a;
        var gathered = _v0.b;
        return {
          h: function() {
            var _v1 = gathered.h;
            if (_v1.$ === 1) {
              return $elm$core$Result$Err(_List_fromArray([$mdgriffith$elm_codegen$Internal$Compiler$EmptyCaseStatement]));
            } else {
              var ann = _v1.a;
              return ann;
            }
          }(),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression({
            aw: $elm$core$List$reverse(gathered.aw),
            c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(expr.c)
          }),
          d: _Utils_ap(expr.d, gathered.d)
        };
      };
    });
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function(a) {
      return { $: 2, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Declaration = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$NotExposed = { $: 0 };
    var $elm$core$String$left = F2(function(n, string) {
      return n < 1 ? "" : A3($elm$core$String$slice, 0, n, string);
    });
    var $elm$core$String$toUpper = _String_toUpper;
    var $mdgriffith$elm_codegen$Internal$Format$formatType = function(str) {
      return _Utils_ap($elm$core$String$toUpper(A2($elm$core$String$left, 1, str)), A2($elm$core$String$dropLeft, 1, str));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports = function(_v0) {
      var details = _v0;
      return details.d;
    };
    var $mdgriffith$elm_codegen$Elm$deduplicate = function(listToDeduplicate) {
      return $elm$core$List$reverse(A3($elm$core$List$foldl, F2(function(item, untouched) {
        var set = untouched.a;
        var innerList = untouched.b;
        return A2($elm$core$Set$member, item, set) ? untouched : _Utils_Tuple2(A2($elm$core$Set$insert, item, set), A2($elm$core$List$cons, item, innerList));
      }), _Utils_Tuple2($elm$core$Set$empty, _List_Nil), listToDeduplicate).b);
    };
    var $mdgriffith$elm_codegen$Elm$getGenerics = function(_v0) {
      var keepExtra = _v0.bS;
      var requested = _v0.b5;
      var needed = _v0.bU;
      var requestedList = keepExtra ? $elm$core$List$reverse($mdgriffith$elm_codegen$Elm$deduplicate(requested)) : A3($elm$core$List$foldl, F2(function(generic, acc) {
        return A2($elm$core$List$member, generic, needed) ? A2($elm$core$List$cons, generic, acc) : acc;
      }), _List_Nil, $mdgriffith$elm_codegen$Elm$deduplicate(requested));
      return A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$nodify, $elm$core$List$reverse(A3($elm$core$List$foldl, F2(function(generic, acc) {
        return A2($elm$core$List$member, generic, requestedList) ? acc : A2($elm$core$List$cons, generic, acc);
      }), requestedList, $mdgriffith$elm_codegen$Elm$deduplicate(needed))));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper = function(ann) {
      switch (ann.$) {
        case 0:
          var str = ann.a;
          return _List_fromArray([str]);
        case 1:
          var anns = ann.b;
          return A2($elm$core$List$concatMap, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, $mdgriffith$elm_codegen$Internal$Compiler$denode), anns);
        case 2:
          return _List_Nil;
        case 3:
          var tupled = ann.a;
          return A2($elm$core$List$concatMap, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, $mdgriffith$elm_codegen$Internal$Compiler$denode), tupled);
        case 4:
          var recordDefinition = ann.a;
          return A2($elm$core$List$concatMap, function(_v1) {
            var _v2 = _v1.b;
            var _v3 = _v2.b;
            var field = _v3.b;
            return $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(field);
          }, recordDefinition);
        case 5:
          var _v4 = ann.a;
          var recordName = _v4.b;
          var _v5 = ann.b;
          var recordDefinition = _v5.b;
          return A2($elm$core$List$cons, recordName, A2($elm$core$List$concatMap, function(_v6) {
            var _v7 = _v6.b;
            var _v8 = _v7.b;
            var field = _v8.b;
            return $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(field);
          }, recordDefinition));
        default:
          var _v9 = ann.a;
          var one = _v9.b;
          var _v10 = ann.b;
          var two = _v10.b;
          return A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, _List_fromArray([one, two]));
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp = F2(function(remaining, accumulator) {
      uniqueHelp:
        while (true) {
          if (!remaining.b) {
            return $elm$core$List$reverse(accumulator);
          } else {
            var first = remaining.a;
            var rest = remaining.b;
            if (A2($elm$core$List$member, first, accumulator)) {
              var $temp$remaining = rest, $temp$accumulator = accumulator;
              remaining = $temp$remaining;
              accumulator = $temp$accumulator;
              continue uniqueHelp;
            } else {
              var $temp$remaining = rest, $temp$accumulator = A2($elm$core$List$cons, first, accumulator);
              remaining = $temp$remaining;
              accumulator = $temp$accumulator;
              continue uniqueHelp;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unique = function(list) {
      return A2($mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp, list, _List_Nil);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getGenerics = function(_v0) {
      var details = _v0;
      return $mdgriffith$elm_codegen$Internal$Compiler$unique($mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(details.h));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation = function(_v0) {
      var details = _v0;
      return details.h;
    };
    var $mdgriffith$elm_codegen$Elm$customTypeWith = F3(function(name, generics, variants) {
      return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
        kU: $elm$core$Maybe$Nothing,
        eb: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
        d: A2($elm$core$List$concatMap, function(_v0) {
          var listAnn = _v0.b;
          return A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, listAnn);
        }, variants),
        j: name,
        aE: function(_v1) {
          return {
            au: _List_Nil,
            kJ: $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration({
              kA: A2($elm$core$List$map, function(_v2) {
                var varName = _v2.a;
                var vars = _v2.b;
                return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                  bA: A2($elm$core$List$map, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify), vars),
                  j: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(varName))
                });
              }, variants),
              bH: $elm$core$Maybe$Nothing,
              eC: $mdgriffith$elm_codegen$Elm$getGenerics({
                bS: true,
                bU: A2($elm$core$List$concatMap, function(_v3) {
                  var listAnn = _v3.b;
                  return A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getGenerics, listAnn);
                }, variants),
                b5: generics
              }),
              j: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(name))
            }),
            m5: $elm$core$Maybe$Nothing
          };
        }
      });
    });
    var $mdgriffith$elm_codegen$Elm$customType = F2(function(name, variants) {
      return A3($mdgriffith$elm_codegen$Elm$customTypeWith, name, _List_Nil, variants);
    });
    var $mdgriffith$elm_codegen$Internal$Arg$Arg = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Internal$Types$nodify = function(exp) {
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Internal$Types$custom = F3(function(mod_, name, vars) {
      return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(mod_, name)), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Types$nodify, vars));
    });
    var $mdgriffith$elm_codegen$Internal$Format$sanitize = function(str) {
      switch (str) {
        case "in":
          return "in_";
        case "type":
          return "type_";
        case "case":
          return "case_";
        case "let":
          return "let_";
        case "module":
          return "module_";
        case "exposing":
          return "exposing_";
        case "where":
          return "where_";
        case "main":
          return "main_";
        case "port":
          return "port_";
        case "as":
          return "as_";
        case "if":
          return "if_";
        case "import":
          return "import_";
        default:
          return A3($elm$core$String$replace, ".", "", str);
      }
    };
    var $elm$core$String$toLower = _String_toLower;
    var $mdgriffith$elm_codegen$Internal$Format$formatValue = function(str) {
      var formatted = _Utils_ap($elm$core$String$toLower(A2($elm$core$String$left, 1, str)), A2($elm$core$String$dropLeft, 1, str));
      return $mdgriffith$elm_codegen$Internal$Format$sanitize(formatted);
    };
    var $mdgriffith$elm_codegen$Internal$Arg$customType = F2(function(name, toType) {
      return function(index) {
        var imports = _List_Nil;
        var annotation = $elm$core$Result$Ok({
          jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
          g: $elm$core$Dict$empty,
          ji: A3($mdgriffith$elm_codegen$Internal$Types$custom, _List_Nil, $mdgriffith$elm_codegen$Internal$Format$formatValue(name), _List_Nil)
        });
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern, {
              lK: _List_Nil,
              j: $mdgriffith$elm_codegen$Internal$Format$formatType(name)
            }, _List_Nil))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$dive(index),
          jt: toType
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$customType = $mdgriffith$elm_codegen$Internal$Arg$customType;
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function(a) {
      return { $: 0, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Index$getImport = F2(function(_v0, importedAs) {
      var maybeModName = _v0.a;
      if (!maybeModName.$) {
        var modName = maybeModName.a;
        return _Utils_eq(modName, importedAs) ? _List_Nil : importedAs;
      } else {
        return importedAs;
      }
    });
    var $mdgriffith$elm_codegen$Internal$Clean$adjustQualification = F2(function(index, _v0) {
      var range = _v0.a;
      var _v1 = _v0.b;
      var modName = _v1.a;
      var name = _v1.b;
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Index$getImport, index, modName), name));
    });
    var $stil4m$elm_syntax$Elm$Syntax$Node$map = F2(function(f, _v0) {
      var r = _v0.a;
      var a = _v0.b;
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, r, f(a));
    });
    var $elm$core$Tuple$mapSecond = F2(function(func, _v0) {
      var x2 = _v0.a;
      var y2 = _v0.b;
      return _Utils_Tuple2(x2, func(y2));
    });
    var $mdgriffith$elm_codegen$Internal$Clean$doRename = F3(function(index, dict, ann) {
      switch (ann.$) {
        case 0:
          var generic = ann.a;
          var _v1 = A2($elm$core$Dict$get, generic, dict);
          if (_v1.$ === 1) {
            return ann;
          } else {
            var renamed = _v1.a;
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(renamed);
          }
        case 1:
          var name = ann.a;
          var nodedVars = ann.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, A2($mdgriffith$elm_codegen$Internal$Clean$adjustQualification, index, name), A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$map(A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict)), nodedVars));
        case 2:
          return ann;
        case 3:
          var nodedVars = ann.a;
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$map(A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict)), nodedVars));
        case 4:
          var record = ann.a;
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$map($elm$core$Tuple$mapSecond($stil4m$elm_syntax$Elm$Syntax$Node$map(A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict)))), record));
        case 5:
          var name = ann.a;
          var _v2 = ann.b;
          var range = _v2.a;
          var record = _v2.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, name, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$map($elm$core$Tuple$mapSecond($stil4m$elm_syntax$Elm$Syntax$Node$map(A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict)))), record)));
        default:
          var nodeOne = ann.a;
          var nodeTwo = ann.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, A2($stil4m$elm_syntax$Elm$Syntax$Node$map, A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict), nodeOne), A2($stil4m$elm_syntax$Elm$Syntax$Node$map, A2($mdgriffith$elm_codegen$Internal$Clean$doRename, index, dict), nodeTwo));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Index$hasModuleName = function(_v0) {
      var maybeModName = _v0.a;
      if (!maybeModName.$) {
        return true;
      } else {
        return false;
      }
    };
    var $elm$core$Dict$isEmpty = function(dict) {
      if (dict.$ === -2) {
        return true;
      } else {
        return false;
      }
    };
    var $mdgriffith$elm_codegen$Internal$Clean$prepareRename = F2(function(ann, dict) {
      switch (ann.$) {
        case 0:
          var generic = ann.a;
          return A2($elm$core$Set$insert, generic, dict);
        case 1:
          var nodedVars = ann.b;
          return A3($elm$core$List$foldl, F2(function(_v1, d) {
            var tipe = _v1.b;
            return A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, tipe, d);
          }), dict, nodedVars);
        case 2:
          return dict;
        case 3:
          var nodedVars = ann.a;
          return A3($elm$core$List$foldl, F2(function(_v2, d) {
            var tipe = _v2.b;
            return A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, tipe, d);
          }), dict, nodedVars);
        case 4:
          var record = ann.a;
          return A3($elm$core$List$foldl, F2(function(_v3, d) {
            var _v4 = _v3.b;
            var _v5 = _v4.b;
            var field = _v5.b;
            return A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, field, d);
          }), dict, record);
        case 5:
          var _v6 = ann.b;
          var record = _v6.b;
          return A3($elm$core$List$foldl, F2(function(_v7, d) {
            var _v8 = _v7.b;
            var _v9 = _v8.b;
            var field = _v9.b;
            return A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, field, d);
          }), dict, record);
        default:
          var _v10 = ann.a;
          var one = _v10.b;
          var _v11 = ann.b;
          var two = _v11.b;
          return A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, two, A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, one, dict));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Clean$findClean = F3(function(i, name, set) {
      findClean:
        while (true) {
          var newName = !i ? name : _Utils_ap(name, $elm$core$String$fromInt(i));
          if (A2($elm$core$Set$member, newName, set)) {
            var $temp$i = i + 1, $temp$name = name, $temp$set = set;
            i = $temp$i;
            name = $temp$name;
            set = $temp$set;
            continue findClean;
          } else {
            return name;
          }
        }
    });
    var $elm$core$Set$foldl = F3(function(func, initialState, _v0) {
      var dict = _v0;
      return A3($elm$core$Dict$foldl, F3(function(key, _v1, state) {
        return A2(func, key, state);
      }), initialState, dict);
    });
    var $mdgriffith$elm_codegen$Internal$Clean$sanitized = function(str) {
      var _v0 = A2($elm$core$String$split, "_", str);
      if (!_v0.b) {
        return str;
      } else {
        var top = _v0.a;
        return top;
      }
    };
    var $mdgriffith$elm_codegen$Internal$Clean$verify = function(set) {
      return A3($elm$core$Set$foldl, F2(function(name, gathered) {
        var newName = A3($mdgriffith$elm_codegen$Internal$Clean$findClean, 0, $mdgriffith$elm_codegen$Internal$Clean$sanitized(name), set);
        return A3($elm$core$Dict$insert, name, newName, gathered);
      }), $elm$core$Dict$empty, set);
    };
    var $mdgriffith$elm_codegen$Internal$Clean$clean = F2(function(index, ann) {
      var renames = $mdgriffith$elm_codegen$Internal$Clean$verify(A2($mdgriffith$elm_codegen$Internal$Clean$prepareRename, ann, $elm$core$Set$empty));
      return $elm$core$Dict$isEmpty(renames) && !$mdgriffith$elm_codegen$Internal$Index$hasModuleName(index) ? ann : A3($mdgriffith$elm_codegen$Internal$Clean$doRename, index, renames, ann);
    });
    var $mdgriffith$elm_codegen$Internal$Format$formatDeclarationName = function(str) {
      if (str === "main") {
        return "main";
      } else {
        return $mdgriffith$elm_codegen$Internal$Format$formatValue(str);
      }
    };
    var $elm$core$Result$mapError = F2(function(f, result) {
      if (!result.$) {
        var v = result.a;
        return $elm$core$Result$Ok(v);
      } else {
        var e = result.a;
        return $elm$core$Result$Err(f(e));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$inferenceErrorToString = function(inf) {
      switch (inf.$) {
        case 1:
          var str = inf.a;
          return "Todo " + str;
        case 0:
          var one = inf.a;
          var two = inf.b;
          return `There are multiple different types in a list: 

` + ("    " + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(one))) + (`

    ` + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(two))))));
        case 11:
          return "Mismatched record update";
        case 2:
          return "Case statement is empty";
        case 3:
          var fn = inf.a;
          var args = inf.b;
          return `The following is being called as a function

    ` + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(fn))) + (`

with these arguments:

    ` + (A2($elm$core$String$join, " -> ", A2($elm$core$List$map, function(arg) {
            return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(arg)));
          }, args)) + `

but that's wrong, right?`)));
        case 5:
          var fieldName = inf.a;
          return "There is a duplicate field in a record: " + fieldName;
        case 6:
          return "Case returns different types.";
        case 7:
          var found = inf.a;
          return "I can't find ." + (found.a6 + (`, this record only has these fields:

    ` + A2($elm$core$String$join, `
    `, found.kX)));
        case 8:
          var attempting = inf.a;
          return `You're trying to access

    .` + (attempting.a6 + (`

but this value isn't a record. It's a

    ` + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(attempting.aA)))));
        case 9:
          var attempting = inf.a;
          return `You're trying to access

    .` + (attempting.a6 + (`

but this value isn't a record, it's a

    ` + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(attempting.aA))) + `

Is this value supposed to be an alias for a record? If so, check out Elm.alias!`)));
        case 10:
          var details = inf.a;
          return details.kO + " not found, though I was trying to unpack it in a let expression.";
        case 12:
          var type_ = inf.a;
          return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable";
        case 13:
          var type_ = inf.a;
          return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable";
        case 14:
          var one = inf.a;
          var two = inf.b;
          return `I found

    ` + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(one))) + (`

But I was expecting:

    ` + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(two)))));
        default:
          return "Different lists of type variables";
      }
    };
    var $mdgriffith$elm_codegen$Elm$renderError = function(err) {
      if (!err.b) {
        return "";
      } else {
        return A2($elm$core$String$join, `

`, A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$inferenceErrorToString, err));
      }
    };
    var $elm$core$Set$fromList = function(list) {
      return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
    };
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $mdgriffith$elm_codegen$Internal$Compiler$simplify = function(fullStr) {
      return A2($elm$core$String$join, "_", A2($elm$core$List$filter, function(piece) {
        return !A2($elm$core$String$all, $elm$core$Char$isDigit, piece);
      }, A2($elm$core$String$split, "_", fullStr)));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper = F3(function(existing, renames, type_) {
      switch (type_.$) {
        case 0:
          var varName = type_.a;
          var _v1 = A2($elm$core$Dict$get, varName, renames);
          if (_v1.$ === 1) {
            var simplified = $mdgriffith$elm_codegen$Internal$Compiler$simplify(varName);
            return A2($elm$core$Set$member, simplified, existing) && !_Utils_eq(varName, simplified) ? _Utils_Tuple2(renames, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(simplified)) : _Utils_Tuple2(A3($elm$core$Dict$insert, varName, simplified, renames), $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(simplified));
          } else {
            var rename = _v1.a;
            return _Utils_Tuple2(renames, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(rename));
          }
        case 1:
          var name = type_.a;
          var vars = type_.b;
          var _v2 = A3($elm$core$List$foldl, F2(function(_v3, _v4) {
            var typevar = _v3.b;
            var varUsed = _v4.a;
            var varList = _v4.b;
            var _v5 = A3($mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper, existing, varUsed, typevar);
            var oneUsed2 = _v5.a;
            var oneType2 = _v5.b;
            return _Utils_Tuple2(oneUsed2, A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Compiler$nodify(oneType2), varList));
          }), _Utils_Tuple2(renames, _List_Nil), vars);
          var newUsed = _v2.a;
          var newVars = _v2.b;
          return _Utils_Tuple2(newUsed, A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, name, $elm$core$List$reverse(newVars)));
        case 2:
          return _Utils_Tuple2(renames, type_);
        case 3:
          return _Utils_Tuple2(renames, type_);
        case 4:
          return _Utils_Tuple2(renames, type_);
        case 5:
          return _Utils_Tuple2(renames, type_);
        default:
          var _v6 = type_.a;
          var one = _v6.b;
          var _v7 = type_.b;
          var two = _v7.b;
          var _v8 = A3($mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper, existing, renames, one);
          var oneUsed = _v8.a;
          var oneType = _v8.b;
          var _v9 = A3($mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper, existing, oneUsed, two);
          var twoUsed = _v9.a;
          var twoType = _v9.b;
          return _Utils_Tuple2(twoUsed, A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify(oneType), $mdgriffith$elm_codegen$Internal$Compiler$nodify(twoType)));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariables = function(type_) {
      var existing = $elm$core$Set$fromList($mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(type_));
      return A3($mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper, existing, $elm$core$Dict$empty, type_).b;
    };
    var $mdgriffith$elm_codegen$Internal$Index$typecheck = function(_v0) {
      var check = _v0.e;
      return check;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$resolve = F3(function(index, cache, annotation) {
      if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
        var _v0 = A3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables, $elm$core$Set$empty, cache, annotation);
        if (!_v0.$) {
          var newAnnotation = _v0.a;
          var restrictions = A2($mdgriffith$elm_codegen$Internal$Compiler$getRestrictions, annotation, cache);
          return A2($mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions, restrictions, $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariables(newAnnotation));
        } else {
          var err = _v0.a;
          return $elm$core$Result$Err(err);
        }
      } else {
        return $elm$core$Result$Err("Type inference skipped.");
      }
    });
    var $mdgriffith$elm_codegen$Elm$declaration = F2(function(nameStr, _v0) {
      var toBody = _v0;
      var name = $mdgriffith$elm_codegen$Internal$Format$formatDeclarationName(nameStr);
      return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
        kU: $elm$core$Maybe$Nothing,
        eb: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
        d: _List_Nil,
        j: name,
        aE: function(index) {
          var declBody = toBody(index);
          var resolvedType = A2($elm$core$Result$andThen, function(sig) {
            return A3($mdgriffith$elm_codegen$Internal$Compiler$resolve, index, sig.g, sig.ji);
          }, A2($elm$core$Result$mapError, $mdgriffith$elm_codegen$Elm$renderError, declBody.h));
          var maybeWarning = function() {
            if (!resolvedType.$) {
              var _v4 = declBody.h;
              if (!_v4.$) {
                return $elm$core$Maybe$Nothing;
              } else {
                if (!_v4.a.b) {
                  return $elm$core$Maybe$Nothing;
                } else {
                  var err = _v4.a;
                  return $elm$core$Maybe$Just({
                    kJ: name,
                    m5: $mdgriffith$elm_codegen$Elm$renderError(err)
                  });
                }
              }
            } else {
              if (resolvedType.a === "") {
                return $elm$core$Maybe$Nothing;
              } else {
                var err = resolvedType.a;
                return $elm$core$Maybe$Just({ kJ: name, m5: err });
              }
            }
          }();
          return {
            au: declBody.d,
            kJ: $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
              kJ: function() {
                var _v1 = declBody.c;
                if (_v1.$ === 17) {
                  var lam = _v1.a;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                    bA: lam.cF,
                    c: lam.c,
                    j: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                  });
                } else {
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                    bA: _List_Nil,
                    c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(declBody.c),
                    j: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                  });
                }
              }(),
              bH: $elm$core$Maybe$Nothing,
              mC: function() {
                var _v2 = _Utils_Tuple2(declBody.h, resolvedType);
                if (!_v2.a.$ && !_v2.b.$) {
                  if (!_v2.b.a.$) {
                    return $elm$core$Maybe$Nothing;
                  } else {
                    var finalType = _v2.b.a;
                    return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify({
                      j: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name),
                      bw: $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($mdgriffith$elm_codegen$Internal$Clean$clean, index, finalType))
                    }));
                  }
                } else {
                  return $elm$core$Maybe$Nothing;
                }
              }()
            }),
            m5: maybeWarning
          };
        }
      });
    });
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$Everything = 0;
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Comments$Markdown = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$Normal = { $: 0 };
    var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$OnlyGroups = 1;
    var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Comments$Comment = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Internal$Comments$addPart = F2(function(_v0, part) {
      var parts = _v0;
      return A2($elm$core$List$cons, part, parts);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$fullModName = function(name) {
      return A2($elm$core$String$join, ".", name);
    };
    var $mdgriffith$elm_codegen$Internal$Render$dedupImports = function(mods) {
      return A2($elm$core$List$sortBy, $mdgriffith$elm_codegen$Internal$Compiler$fullModName, A3($elm$core$List$foldl, F2(function(mod, _v0) {
        var set = _v0.a;
        var gathered = _v0.b;
        var stringName = $mdgriffith$elm_codegen$Internal$Compiler$fullModName(mod);
        return A2($elm$core$Set$member, stringName, set) ? _Utils_Tuple2(set, gathered) : _Utils_Tuple2(A2($elm$core$Set$insert, stringName, set), A2($elm$core$List$cons, mod, gathered));
      }), _Utils_Tuple2($elm$core$Set$empty, _List_Nil), mods).b);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$emptyComment = _List_Nil;
    var $mdgriffith$elm_codegen$Internal$Render$RenderingDocsLine = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$exposedGroupToMarkdown = F4(function(docMode, groups, mode, rendered) {
      exposedGroupToMarkdown:
        while (true) {
          if (!groups.b) {
            if (!mode.$) {
              return rendered;
            } else {
              return rendered;
            }
          } else {
            switch (groups.a.$) {
              case 1:
                var docs = groups.a.a;
                var rest = groups.b;
                if (!mode.$) {
                  var separator = $elm$core$String$isEmpty(rendered) ? "" : `

`;
                  var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = mode, $temp$rendered = _Utils_ap(rendered, _Utils_ap(separator, docs));
                  docMode = $temp$docMode;
                  groups = $temp$groups;
                  mode = $temp$mode;
                  rendered = $temp$rendered;
                  continue exposedGroupToMarkdown;
                } else {
                  var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = mode, $temp$rendered = rendered + (`

` + docs);
                  docMode = $temp$docMode;
                  groups = $temp$groups;
                  mode = $temp$mode;
                  rendered = $temp$rendered;
                  continue exposedGroupToMarkdown;
                }
              case 0:
                var exposedName = groups.a.a;
                var rest = groups.b;
                if (!docMode) {
                  if (!mode.$) {
                    if ($elm$core$String$isEmpty(rendered)) {
                      var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = $mdgriffith$elm_codegen$Internal$Render$RenderingDocsLine(1), $temp$rendered = "@docs " + exposedName;
                      docMode = $temp$docMode;
                      groups = $temp$groups;
                      mode = $temp$mode;
                      rendered = $temp$rendered;
                      continue exposedGroupToMarkdown;
                    } else {
                      var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = $mdgriffith$elm_codegen$Internal$Render$RenderingDocsLine(1), $temp$rendered = rendered + (`

@docs ` + exposedName);
                      docMode = $temp$docMode;
                      groups = $temp$groups;
                      mode = $temp$mode;
                      rendered = $temp$rendered;
                      continue exposedGroupToMarkdown;
                    }
                  } else {
                    var docsItemCount = mode.a;
                    if (docsItemCount > 5) {
                      var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = $mdgriffith$elm_codegen$Internal$Render$RenderingDocsLine(1), $temp$rendered = rendered + (`
@docs ` + exposedName);
                      docMode = $temp$docMode;
                      groups = $temp$groups;
                      mode = $temp$mode;
                      rendered = $temp$rendered;
                      continue exposedGroupToMarkdown;
                    } else {
                      var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = $mdgriffith$elm_codegen$Internal$Render$RenderingDocsLine(docsItemCount + 1), $temp$rendered = rendered + (", " + exposedName);
                      docMode = $temp$docMode;
                      groups = $temp$groups;
                      mode = $temp$mode;
                      rendered = $temp$rendered;
                      continue exposedGroupToMarkdown;
                    }
                  }
                } else {
                  var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = mode, $temp$rendered = rendered;
                  docMode = $temp$docMode;
                  groups = $temp$groups;
                  mode = $temp$mode;
                  rendered = $temp$rendered;
                  continue exposedGroupToMarkdown;
                }
              default:
                var groupDecls = groups.a.a;
                var rest = groups.b;
                var separator = $elm$core$String$isEmpty(rendered) ? "" : `

`;
                var renderedSection = A4($mdgriffith$elm_codegen$Internal$Render$exposedGroupToMarkdown, docMode, $elm$core$List$reverse(groupDecls), $mdgriffith$elm_codegen$Internal$Render$Normal, "");
                var $temp$docMode = docMode, $temp$groups = rest, $temp$mode = $mdgriffith$elm_codegen$Internal$Render$Normal, $temp$rendered = _Utils_ap(rendered, _Utils_ap(separator, renderedSection));
                docMode = $temp$docMode;
                groups = $temp$groups;
                mode = $temp$mode;
                rendered = $temp$rendered;
                continue exposedGroupToMarkdown;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Render$Exposed = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$ExposedGroup = function(a) {
      return { $: 2, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$ModuleDocs = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$getExposedGroups = F2(function(decl, groups) {
      switch (decl.$) {
        case 0:
          var decDetails = decl.a;
          var _v1 = decDetails.eb;
          if (!_v1.$) {
            return groups;
          } else {
            return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Render$Exposed(decDetails.j), groups);
          }
        case 2:
          var docs = decl.a;
          return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Render$ModuleDocs(docs), groups);
        case 4:
          var groupDecls = decl.a;
          return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Render$ExposedGroup(A3($elm$core$List$foldl, $mdgriffith$elm_codegen$Internal$Render$getExposedGroups, _List_Nil, groupDecls)), groups);
        default:
          return groups;
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$nodeAtLine = F2(function(line, exp) {
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, {
        n: { dm: 0, mu: line },
        iy: { dm: 0, mu: line }
      }, exp);
    });
    var $mdgriffith$elm_codegen$Internal$Render$groupExposedItems = F2(function(line, group) {
      return A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$nodeAtLine(line), group.eb);
    });
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$builtIn = function(name) {
      _v0$13:
        while (true) {
          if (name.b) {
            if (name.b.b) {
              if (name.a === "Platform" && !name.b.b.b) {
                switch (name.b.a) {
                  case "Sub":
                    var _v1 = name.b;
                    return true;
                  case "Cmd":
                    var _v2 = name.b;
                    return true;
                  default:
                    break _v0$13;
                }
              } else {
                break _v0$13;
              }
            } else {
              switch (name.a) {
                case "List":
                  return true;
                case "Maybe":
                  return true;
                case "String":
                  return true;
                case "Basics":
                  return true;
                case "Char":
                  return true;
                case "Debug":
                  return true;
                case "Tuple":
                  return true;
                case "Result":
                  return true;
                case "Platform":
                  return true;
                case "Sub":
                  return true;
                case "Cmd":
                  return true;
                default:
                  break _v0$13;
              }
            }
          } else {
            break _v0$13;
          }
        }
      return false;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$findAlias = F2(function(modName, aliases) {
      findAlias:
        while (true) {
          if (!aliases.b) {
            return $elm$core$Maybe$Nothing;
          } else {
            var _v1 = aliases.a;
            var aliasModName = _v1.a;
            var alias = _v1.b;
            var remain = aliases.b;
            if (_Utils_eq(modName, aliasModName)) {
              return $elm$core$Maybe$Just(alias);
            } else {
              var $temp$modName = modName, $temp$aliases = remain;
              modName = $temp$modName;
              aliases = $temp$aliases;
              continue findAlias;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$isParser = function(name) {
      _v0$2:
        while (true) {
          if (name.b && name.a === "Parser") {
            if (!name.b.b) {
              return true;
            } else {
              if (name.b.a === "Advanced" && !name.b.b.b) {
                var _v1 = name.b;
                return true;
              } else {
                break _v0$2;
              }
            }
          } else {
            break _v0$2;
          }
        }
      return false;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$isUrlParser = function(name) {
      if (name.b && name.a === "Url" && name.b.b && name.b.a === "Parser" && !name.b.b.b) {
        var _v1 = name.b;
        return true;
      } else {
        return false;
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$makeImport = F3(function(thisModule, aliases, name) {
      if (_Utils_eq(thisModule, name)) {
        return $elm$core$Maybe$Nothing;
      } else {
        if (!name.b) {
          return $elm$core$Maybe$Nothing;
        } else {
          var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$findAlias, name, aliases);
          if (_v1.$ === 1) {
            return $mdgriffith$elm_codegen$Internal$Compiler$builtIn(name) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just({
              ec: $mdgriffith$elm_codegen$Internal$Compiler$isUrlParser(name) ? $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("</>")),
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("<?>"))
              ])))) : $mdgriffith$elm_codegen$Internal$Compiler$isParser(name) ? $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("|=")),
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("|."))
              ])))) : $elm$core$Maybe$Nothing,
              gm: $elm$core$Maybe$Nothing,
              lK: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
            });
          } else {
            var alias = _v1.a;
            return $elm$core$Maybe$Just({
              ec: $mdgriffith$elm_codegen$Internal$Compiler$isUrlParser(name) ? $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("</>")),
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("<?>"))
              ])))) : $mdgriffith$elm_codegen$Internal$Compiler$isParser(name) ? $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("|=")),
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("|."))
              ])))) : $elm$core$Maybe$Nothing,
              gm: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(_List_fromArray([alias]))),
              lK: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
            });
          }
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedBlock = function(a) {
      return { $: 2, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedComment = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedDecl = function(a) {
      return { $: 0, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$addDocs = F2(function(maybeDoc, decl) {
      if (maybeDoc.$ === 1) {
        return decl;
      } else {
        var doc = maybeDoc.a;
        switch (decl.$) {
          case 0:
            var func = decl.a;
            return $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(_Utils_update(func, {
              bH: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
            }));
          case 1:
            var typealias = decl.a;
            return $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(_Utils_update(typealias, {
              bH: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
            }));
          case 2:
            var typeDecl = decl.a;
            return $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(_Utils_update(typeDecl, {
              bH: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
            }));
          case 3:
            return decl;
          case 4:
            return decl;
          default:
            return decl;
        }
      }
    });
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function(a) {
      return { $: 1, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function(a) {
      return { $: 3, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function(a) {
      return { $: 2, a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$addExposed = F4(function(exposePath, exposed, declaration, otherExposes) {
      if (!exposed.$) {
        return otherExposes;
      } else {
        var details = exposed.a;
        var addToExposedCollection = function(_new) {
          if (!otherExposes.b) {
            return _List_fromArray([
              {
                eb: _List_fromArray([_new]),
                e4: exposePath
              }
            ]);
          } else {
            var top = otherExposes.a;
            var rest = otherExposes.b;
            return _Utils_eq(top.e4, exposePath) ? A2($elm$core$List$cons, {
              eb: A2($elm$core$List$cons, _new, top.eb),
              e4: top.e4
            }, rest) : A2($elm$core$List$cons, {
              eb: _List_fromArray([_new]),
              e4: exposePath
            }, otherExposes);
          }
        };
        switch (declaration.$) {
          case 0:
            var fn = declaration.a;
            var fnName = $mdgriffith$elm_codegen$Internal$Compiler$denode(function($2) {
              return $2.j;
            }($mdgriffith$elm_codegen$Internal$Compiler$denode(fn.kJ)));
            return addToExposedCollection($stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(fnName));
          case 1:
            var synonym = declaration.a;
            var aliasName = $mdgriffith$elm_codegen$Internal$Compiler$denode(synonym.j);
            return addToExposedCollection($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(aliasName));
          case 2:
            var myType = declaration.a;
            var typeName = $mdgriffith$elm_codegen$Internal$Compiler$denode(myType.j);
            return details.aN ? addToExposedCollection($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose({
              j: typeName,
              l1: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
            })) : addToExposedCollection($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(typeName));
          case 3:
            var myPort = declaration.a;
            var typeName = $mdgriffith$elm_codegen$Internal$Compiler$denode(myPort.j);
            return addToExposedCollection($stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(typeName));
          case 4:
            return otherExposes;
          default:
            return otherExposes;
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Render$renderDecls = F3(function(fileDetails, decl, gathered) {
      switch (decl.$) {
        case 1:
          var comm = decl.a;
          return _Utils_update(gathered, {
            aM: A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Compiler$RenderedComment(comm), gathered.aM)
          });
        case 3:
          var block = decl.a;
          return _Utils_update(gathered, {
            aM: A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Compiler$RenderedBlock(block), gathered.aM)
          });
        case 2:
          return gathered;
        case 0:
          var decDetails = decl.a;
          var result = decDetails.aE(fileDetails.ba);
          return {
            aM: A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Compiler$RenderedDecl(A2($mdgriffith$elm_codegen$Internal$Render$addDocs, decDetails.kU, result.kJ)), gathered.aM),
            ad: gathered.ad,
            eb: A4($mdgriffith$elm_codegen$Internal$Render$addExposed, gathered.ad, decDetails.eb, result.kJ, gathered.eb),
            aO: function() {
              if (gathered.aO) {
                return gathered.aO;
              } else {
                var _v1 = result.kJ;
                if (_v1.$ === 3) {
                  return true;
                } else {
                  return false;
                }
              }
            }(),
            d: _Utils_ap(result.au, _Utils_ap(decDetails.d, gathered.d)),
            jy: function() {
              var _v2 = result.m5;
              if (_v2.$ === 1) {
                return gathered.jy;
              } else {
                var warn = _v2.a;
                return A2($elm$core$List$cons, warn, gathered.jy);
              }
            }()
          };
        default:
          var groupDecls = decl.a;
          var incrementExposePath = function(g2) {
            return _Utils_update(g2, {
              ad: function() {
                var _v3 = g2.ad;
                if (!_v3.b) {
                  return _List_Nil;
                } else {
                  var top = _v3.a;
                  var remain = _v3.b;
                  return A2($elm$core$List$cons, top + 1, remain);
                }
              }()
            });
          };
          return incrementExposePath(A3($elm$core$List$foldl, $mdgriffith$elm_codegen$Internal$Render$renderDecls(fileDetails), _Utils_update(gathered, {
            ad: A2($elm$core$List$cons, 0, gathered.ad)
          }), groupDecls));
      }
    });
    var $the_sett$elm_pretty_printer$Internals$Concatenate = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $the_sett$elm_pretty_printer$Pretty$append = F2(function(doc1, doc2) {
      return A2($the_sett$elm_pretty_printer$Internals$Concatenate, function(_v0) {
        return doc1;
      }, function(_v1) {
        return doc2;
      });
    });
    var $elm_community$basics_extra$Basics$Extra$flip = F3(function(f, b, a) {
      return A2(f, a, b);
    });
    var $the_sett$elm_pretty_printer$Pretty$a = $elm_community$basics_extra$Basics$Extra$flip($the_sett$elm_pretty_printer$Pretty$append);
    var $the_sett$elm_pretty_printer$Internals$Line = F2(function(a, b) {
      return { $: 4, a, b };
    });
    var $the_sett$elm_pretty_printer$Pretty$line = A2($the_sett$elm_pretty_printer$Internals$Line, " ", "");
    var $the_sett$elm_pretty_printer$Internals$Empty = { $: 0 };
    var $the_sett$elm_pretty_printer$Pretty$empty = $the_sett$elm_pretty_printer$Internals$Empty;
    var $the_sett$elm_pretty_printer$Pretty$join = F2(function(sep, docs) {
      join:
        while (true) {
          if (!docs.b) {
            return $the_sett$elm_pretty_printer$Pretty$empty;
          } else {
            if (!docs.a.$) {
              var _v1 = docs.a;
              var ds = docs.b;
              var $temp$sep = sep, $temp$docs = ds;
              sep = $temp$sep;
              docs = $temp$docs;
              continue join;
            } else {
              var d = docs.a;
              var ds = docs.b;
              var step = F2(function(x2, rest) {
                if (!x2.$) {
                  return rest;
                } else {
                  var doc = x2;
                  return A2($the_sett$elm_pretty_printer$Pretty$append, sep, A2($the_sett$elm_pretty_printer$Pretty$append, doc, rest));
                }
              });
              var spersed = A3($elm$core$List$foldr, step, $the_sett$elm_pretty_printer$Pretty$empty, ds);
              return A2($the_sett$elm_pretty_printer$Pretty$append, d, spersed);
            }
          }
        }
    });
    var $the_sett$elm_pretty_printer$Pretty$lines = $the_sett$elm_pretty_printer$Pretty$join($the_sett$elm_pretty_printer$Pretty$line);
    var $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$Compiler$denode);
    var $mdgriffith$elm_codegen$Internal$Compiler$denodeAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$Compiler$denode);
    var $the_sett$elm_pretty_printer$Internals$Text = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $the_sett$elm_pretty_printer$Pretty$char = function(c) {
      return A2($the_sett$elm_pretty_printer$Internals$Text, $elm$core$String$fromChar(c), $elm$core$Maybe$Nothing);
    };
    var $the_sett$elm_pretty_printer$Pretty$surround = F3(function(left, right, doc) {
      return A2($the_sett$elm_pretty_printer$Pretty$append, A2($the_sett$elm_pretty_printer$Pretty$append, left, doc), right);
    });
    var $the_sett$elm_pretty_printer$Pretty$parens = function(doc) {
      return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$char("("), $the_sett$elm_pretty_printer$Pretty$char(")"), doc);
    };
    var $the_sett$elm_pretty_printer$Pretty$string = function(val) {
      return A2($the_sett$elm_pretty_printer$Internals$Text, val, $elm$core$Maybe$Nothing);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose = function(tlExpose) {
      switch (tlExpose.$) {
        case 0:
          var val = tlExpose.a;
          return $the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string(val));
        case 1:
          var val = tlExpose.a;
          return $the_sett$elm_pretty_printer$Pretty$string(val);
        case 2:
          var val = tlExpose.a;
          return $the_sett$elm_pretty_printer$Pretty$string(val);
        default:
          var exposedType = tlExpose.a;
          var _v1 = exposedType.l1;
          if (_v1.$ === 1) {
            return $the_sett$elm_pretty_printer$Pretty$string(exposedType.j);
          } else {
            return A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("(..)"), $the_sett$elm_pretty_printer$Pretty$string(exposedType.j));
          }
      }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineTopLevelExposes = function(exposes) {
      if (!exposes.b) {
        return $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("");
      } else {
        var hd = exposes.a;
        var tl = exposes.b;
        return A3($elm$core$List$foldl, F2(function(exp, result) {
          var _v1 = _Utils_Tuple2(exp, result);
          if (_v1.a.$ === 3) {
            var typeExpose = _v1.a.a;
            var _v2 = typeExpose.l1;
            if (!_v2.$) {
              return exp;
            } else {
              return result;
            }
          } else {
            if (_v1.b.$ === 3) {
              var typeExpose = _v1.b.a;
              var _v3 = typeExpose.l1;
              if (!_v3.$) {
                return result;
              } else {
                return exp;
              }
            } else {
              return result;
            }
          }
        }), hd, tl);
      }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName = function(tle) {
      switch (tle.$) {
        case 0:
          var val = tle.a;
          return val;
        case 1:
          var val = tle.a;
          return val;
        case 2:
          var val = tle.a;
          return val;
        default:
          var exposedType = tle.a;
          return exposedType.j;
      }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByExposingName = function(innerImports) {
      var _v0 = function() {
        if (!innerImports.b) {
          return _Utils_Tuple3("", _List_Nil, _List_fromArray([_List_Nil]));
        } else {
          var hd = innerImports.a;
          return A3($elm$core$List$foldl, F2(function(exp, _v2) {
            var currName = _v2.a;
            var currAccum = _v2.b;
            var accum = _v2.c;
            var nextName = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(exp);
            return _Utils_eq(nextName, currName) ? _Utils_Tuple3(currName, A2($elm$core$List$cons, exp, currAccum), accum) : _Utils_Tuple3(nextName, _List_fromArray([exp]), A2($elm$core$List$cons, currAccum, accum));
          }), _Utils_Tuple3($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(hd), _List_Nil, _List_Nil), innerImports);
        }
      }();
      var hdGroup = _v0.b;
      var remGroups = _v0.c;
      return $elm$core$List$reverse(A2($elm$core$List$cons, hdGroup, remGroups));
    };
    var $elm$core$List$sortWith = _List_sortWith;
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder = F2(function(tlel, tler) {
      var _v0 = _Utils_Tuple2(tlel, tler);
      if (!_v0.a.$) {
        if (!_v0.b.$) {
          return A2($elm$core$Basics$compare, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tlel), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tler));
        } else {
          return 0;
        }
      } else {
        if (!_v0.b.$) {
          return 2;
        } else {
          return A2($elm$core$Basics$compare, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tlel), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tler));
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings = function(tlExposings) {
      return A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineTopLevelExposes, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByExposingName(A2($elm$core$List$sortWith, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder, tlExposings)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyExposing = function(exposing_) {
      var exposings = function() {
        if (!exposing_.$) {
          return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$string(" ("), $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$string(".."));
        } else {
          var tll = exposing_.a;
          return $elm$core$List$length(tll) <= 5 ? A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$string(" ("), $the_sett$elm_pretty_printer$Pretty$string(")"), A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings($mdgriffith$elm_codegen$Internal$Compiler$denodeAll(tll))))) : A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$string(`
    ( `), $the_sett$elm_pretty_printer$Pretty$string(`
    )`), A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(`
    , `), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings($mdgriffith$elm_codegen$Internal$Compiler$denodeAll(tll)))));
        }
      }();
      return A2($the_sett$elm_pretty_printer$Pretty$a, exposings, $the_sett$elm_pretty_printer$Pretty$string("exposing"));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyMaybe = F2(function(prettyFn, maybeVal) {
      return A2($elm$core$Maybe$withDefault, $the_sett$elm_pretty_printer$Pretty$empty, A2($elm$core$Maybe$map, prettyFn, maybeVal));
    });
    var $mdgriffith$elm_codegen$Internal$Write$dot = $the_sett$elm_pretty_printer$Pretty$string(".");
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleName = function(name) {
      return A2($the_sett$elm_pretty_printer$Pretty$join, $mdgriffith$elm_codegen$Internal$Write$dot, A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, name));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameAlias = function(name) {
      if (!name.b) {
        return $the_sett$elm_pretty_printer$Pretty$empty;
      } else {
        return A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$join, $mdgriffith$elm_codegen$Internal$Write$dot, A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, name)), $the_sett$elm_pretty_printer$Pretty$string("as "));
      }
    };
    var $the_sett$elm_pretty_printer$Pretty$space = $the_sett$elm_pretty_printer$Pretty$char(" ");
    var $mdgriffith$elm_codegen$Internal$Write$prettyImport = function(import_) {
      return A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$space, _List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("import"),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(import_.lK)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameAlias, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(import_.gm)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettyExposing, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(import_.ec))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode = $stil4m$elm_syntax$Elm$Syntax$Node$value;
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify = function(exp) {
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings = F2(function(left, right) {
      var _v0 = _Utils_Tuple2(left, right);
      if (!_v0.a.$) {
        var range = _v0.a.a;
        return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
      } else {
        if (!_v0.b.$) {
          var range = _v0.b.a;
          return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
        } else {
          var leftNodes = _v0.a.a;
          var rightNodes = _v0.b.a;
          return $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll(A2($elm$core$List$append, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll(leftNodes), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll(rightNodes))));
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings = F2(function(maybeLeft, maybeRight) {
      var _v0 = _Utils_Tuple2(maybeLeft, maybeRight);
      if (_v0.a.$ === 1) {
        if (_v0.b.$ === 1) {
          var _v1 = _v0.a;
          var _v2 = _v0.b;
          return $elm$core$Maybe$Nothing;
        } else {
          var _v4 = _v0.a;
          var right = _v0.b.a;
          return $elm$core$Maybe$Just(right);
        }
      } else {
        if (_v0.b.$ === 1) {
          var left = _v0.a.a;
          var _v3 = _v0.b;
          return $elm$core$Maybe$Just(left);
        } else {
          var left = _v0.a.a;
          var right = _v0.b.a;
          return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings, left, right));
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$or = F2(function(ma, mb) {
      if (ma.$ === 1) {
        return mb;
      } else {
        return ma;
      }
    });
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposing = function(exp) {
      if (!exp.$) {
        var range = exp.a;
        return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
      } else {
        var nodes = exp.a;
        return $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll($mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll(nodes))));
      }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineImports = function(innerImports) {
      if (!innerImports.b) {
        return {
          ec: $elm$core$Maybe$Nothing,
          gm: $elm$core$Maybe$Nothing,
          lK: $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify(_List_Nil)
        };
      } else {
        var hd = innerImports.a;
        var tl = innerImports.b;
        var combinedImports = A3($elm$core$List$foldl, F2(function(imp, result) {
          return {
            ec: $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe(A2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe(imp.ec), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe(result.ec))),
            gm: A2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$or, imp.gm, result.gm),
            lK: imp.lK
          };
        }), hd, tl);
        return _Utils_update(combinedImports, {
          ec: A2($elm$core$Maybe$map, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposing, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify)), combinedImports.ec)
        });
      }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByModuleName = function(innerImports) {
      var _v0 = function() {
        if (!innerImports.b) {
          return _Utils_Tuple3(_List_Nil, _List_Nil, _List_fromArray([_List_Nil]));
        } else {
          var hd = innerImports.a;
          return A3($elm$core$List$foldl, F2(function(imp, _v2) {
            var currName = _v2.a;
            var currAccum = _v2.b;
            var accum = _v2.c;
            var nextName = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(imp.lK);
            return _Utils_eq(nextName, currName) ? _Utils_Tuple3(currName, A2($elm$core$List$cons, imp, currAccum), accum) : _Utils_Tuple3(nextName, _List_fromArray([imp]), A2($elm$core$List$cons, currAccum, accum));
          }), _Utils_Tuple3($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(hd.lK), _List_Nil, _List_Nil), innerImports);
        }
      }();
      var hdGroup = _v0.b;
      var remGroups = _v0.c;
      return $elm$core$List$reverse(A2($elm$core$List$cons, hdGroup, remGroups));
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupImports = function(imports) {
      var impName = function(imp) {
        return $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(imp.lK);
      };
      return A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineImports, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByModuleName(A2($elm$core$List$sortBy, impName, imports)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyImports = function(imports) {
      return $the_sett$elm_pretty_printer$Pretty$lines(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyImport, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupImports(imports)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$importsPretty = function(imports) {
      if (!imports.b) {
        return $the_sett$elm_pretty_printer$Pretty$line;
      } else {
        return A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $mdgriffith$elm_codegen$Internal$Write$prettyImports(imports))));
      }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyComments = function(comments) {
      if (!comments.b) {
        return $the_sett$elm_pretty_printer$Pretty$empty;
      } else {
        return A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$lines(A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, comments))));
      }
    };
    var $elm$core$List$drop = F2(function(n, list) {
      drop:
        while (true) {
          if (n <= 0) {
            return list;
          } else {
            if (!list.b) {
              return list;
            } else {
              var x2 = list.a;
              var xs = list.b;
              var $temp$n = n - 1, $temp$list = xs;
              n = $temp$n;
              list = $temp$list;
              continue drop;
            }
          }
        }
    });
    var $the_sett$elm_pretty_printer$Internals$Nest = F2(function(a, b) {
      return { $: 2, a, b };
    });
    var $the_sett$elm_pretty_printer$Pretty$nest = F2(function(depth, doc) {
      return A2($the_sett$elm_pretty_printer$Internals$Nest, depth, function(_v0) {
        return doc;
      });
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyDocumentation = function(docs) {
      return A2($elm$core$String$contains, `
`, docs) ? $the_sett$elm_pretty_printer$Pretty$string("{-| " + (docs + `
-}`)) : $the_sett$elm_pretty_printer$Pretty$string("{-| " + (docs + " -}"));
    };
    var $the_sett$elm_pretty_printer$Internals$Union = F2(function(a, b) {
      return { $: 5, a, b };
    });
    var $the_sett$elm_pretty_printer$Internals$flatten = function(doc) {
      flatten:
        while (true) {
          switch (doc.$) {
            case 1:
              var doc1 = doc.a;
              var doc2 = doc.b;
              return A2($the_sett$elm_pretty_printer$Internals$Concatenate, function(_v1) {
                return $the_sett$elm_pretty_printer$Internals$flatten(doc1(0));
              }, function(_v2) {
                return $the_sett$elm_pretty_printer$Internals$flatten(doc2(0));
              });
            case 2:
              var i = doc.a;
              var doc1 = doc.b;
              return A2($the_sett$elm_pretty_printer$Internals$Nest, i, function(_v3) {
                return $the_sett$elm_pretty_printer$Internals$flatten(doc1(0));
              });
            case 5:
              var doc1 = doc.a;
              var doc2 = doc.b;
              var $temp$doc = doc1;
              doc = $temp$doc;
              continue flatten;
            case 4:
              var hsep = doc.a;
              return A2($the_sett$elm_pretty_printer$Internals$Text, hsep, $elm$core$Maybe$Nothing);
            case 6:
              var fn = doc.a;
              var $temp$doc = fn(0);
              doc = $temp$doc;
              continue flatten;
            case 7:
              var fn = doc.a;
              var $temp$doc = fn(0);
              doc = $temp$doc;
              continue flatten;
            default:
              var x2 = doc;
              return x2;
          }
        }
    };
    var $the_sett$elm_pretty_printer$Pretty$group = function(doc) {
      return A2($the_sett$elm_pretty_printer$Internals$Union, $the_sett$elm_pretty_printer$Internals$flatten(doc), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$isNakedCompound = function(typeAnn) {
      switch (typeAnn.$) {
        case 1:
          if (!typeAnn.b.b) {
            return false;
          } else {
            return true;
          }
        case 6:
          return true;
        default:
          return false;
      }
    };
    var $elm$core$Tuple$mapBoth = F3(function(funcA, funcB, _v0) {
      var x2 = _v0.a;
      var y2 = _v0.b;
      return _Utils_Tuple2(funcA(x2), funcB(y2));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot = F2(function(aliases, name) {
      if (!name.b) {
        return $the_sett$elm_pretty_printer$Pretty$empty;
      } else {
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$findAlias, name, aliases);
        if (_v1.$ === 1) {
          return A2($the_sett$elm_pretty_printer$Pretty$a, $mdgriffith$elm_codegen$Internal$Write$dot, A2($the_sett$elm_pretty_printer$Pretty$join, $mdgriffith$elm_codegen$Internal$Write$dot, A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, name)));
        } else {
          var alias = _v1.a;
          return A2($the_sett$elm_pretty_printer$Pretty$a, $mdgriffith$elm_codegen$Internal$Write$dot, $the_sett$elm_pretty_printer$Pretty$string(alias));
        }
      }
    });
    var $the_sett$elm_pretty_printer$Pretty$separators = function(sep) {
      return $the_sett$elm_pretty_printer$Pretty$join(A2($the_sett$elm_pretty_printer$Internals$Line, sep, sep));
    };
    var $the_sett$elm_pretty_printer$Pretty$words = $the_sett$elm_pretty_printer$Pretty$join($the_sett$elm_pretty_printer$Pretty$space);
    var $mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn = F2(function(aliases, _v13) {
      var name = _v13.a;
      var ann = _v13.b;
      return $the_sett$elm_pretty_printer$Pretty$group(A2($the_sett$elm_pretty_printer$Pretty$nest, 4, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          $the_sett$elm_pretty_printer$Pretty$string(name),
          $the_sett$elm_pretty_printer$Pretty$string(":")
        ])),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, ann)
      ]))));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation = F3(function(aliases, left, right) {
      var expandLeft = function(ann) {
        if (ann.$ === 6) {
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens, aliases, ann);
        } else {
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, ann);
        }
      };
      var innerFnTypeAnn = F2(function(_v10, _v11) {
        var innerLeft = _v10.b;
        var innerRight = _v11.b;
        var rightSide = expandRight(innerRight);
        if (rightSide.b) {
          var hd = rightSide.a;
          var tl = rightSide.b;
          return A2($elm$core$List$cons, expandLeft(innerLeft), A2($elm$core$List$cons, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("->"),
            hd
          ])), tl));
        } else {
          return _List_Nil;
        }
      });
      var expandRight = function(ann) {
        if (ann.$ === 6) {
          var innerLeft = ann.a;
          var innerRight = ann.b;
          return A2(innerFnTypeAnn, innerLeft, innerRight);
        } else {
          return _List_fromArray([
            A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, ann)
          ]);
        }
      };
      return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$lines(A2(innerFnTypeAnn, left, right)));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord = F3(function(aliases, paramName, fields) {
      var addBarToFirst = function(exprs) {
        if (!exprs.b) {
          return _List_Nil;
        } else {
          var hd = exprs.a;
          var tl = exprs.b;
          return A2($elm$core$List$cons, A2($the_sett$elm_pretty_printer$Pretty$a, hd, $the_sett$elm_pretty_printer$Pretty$string("| ")), tl);
        }
      };
      if (!fields.b) {
        return $the_sett$elm_pretty_printer$Pretty$string("{}");
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          $the_sett$elm_pretty_printer$Pretty$string("{"),
          $the_sett$elm_pretty_printer$Pretty$string(paramName)
        ])));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        return $the_sett$elm_pretty_printer$Pretty$group(A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$empty, close, A2($the_sett$elm_pretty_printer$Pretty$nest, 4, A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", addBarToFirst(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn(aliases), A2($elm$core$List$map, A2($elm$core$Tuple$mapBoth, $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denode), fields)))), open))));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecord = F2(function(aliases, fields) {
      if (!fields.b) {
        return $the_sett$elm_pretty_printer$Pretty$string("{}");
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("{"));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        return $the_sett$elm_pretty_printer$Pretty$group(A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn(aliases), A2($elm$core$List$map, A2($elm$core$Tuple$mapBoth, $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denode), fields)))));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTupled = F2(function(aliases, anns) {
      return $the_sett$elm_pretty_printer$Pretty$parens(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(anns))), $the_sett$elm_pretty_printer$Pretty$space)));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation = F2(function(aliases, typeAnn) {
      switch (typeAnn.$) {
        case 0:
          var val = typeAnn.a;
          return $the_sett$elm_pretty_printer$Pretty$string(val);
        case 1:
          var fqName = typeAnn.a;
          var anns = typeAnn.b;
          return A3($mdgriffith$elm_codegen$Internal$Write$prettyTyped, aliases, fqName, anns);
        case 2:
          return $the_sett$elm_pretty_printer$Pretty$string("()");
        case 3:
          var anns = typeAnn.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyTupled, aliases, anns);
        case 4:
          var recordDef = typeAnn.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyRecord, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(recordDef));
        case 5:
          var _v3 = typeAnn.a;
          var paramName = _v3.b;
          var _v4 = typeAnn.b;
          var recordDef = _v4.b;
          return A3($mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord, aliases, paramName, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(recordDef));
        default:
          var fromAnn = typeAnn.a;
          var toAnn = typeAnn.b;
          return A3($mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation, aliases, fromAnn, toAnn);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens = F2(function(aliases, typeAnn) {
      return $mdgriffith$elm_codegen$Internal$Write$isNakedCompound(typeAnn) ? $the_sett$elm_pretty_printer$Pretty$parens(A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, typeAnn)) : A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, typeAnn);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTyped = F3(function(aliases, _v0, anns) {
      var _v1 = _v0.b;
      var moduleName = _v1.a;
      var typeName = _v1.b;
      var typeDoc = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(typeName), A2($mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot, aliases, moduleName));
      var argsDoc = $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(anns)));
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([typeDoc, argsDoc]));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor = F2(function(aliases, cons) {
      return A2($the_sett$elm_pretty_printer$Pretty$nest, 4, $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(cons.j)),
        $the_sett$elm_pretty_printer$Pretty$lines(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(cons.bA)))
      ]))));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors = F2(function(aliases, constructors) {
      return A2($the_sett$elm_pretty_printer$Pretty$join, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("| "), $the_sett$elm_pretty_printer$Pretty$line), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor(aliases), constructors));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyCustomType = F2(function(aliases, type_) {
      var customTypePretty = A2($the_sett$elm_pretty_printer$Pretty$nest, 4, A2($the_sett$elm_pretty_printer$Pretty$a, A2($mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(type_.kA)), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("= "), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("type"),
        $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(type_.j)),
        $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(type_.eC)))
      ]))))));
      return $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(type_.bH)),
        customTypePretty
      ]));
    });
    var $the_sett$elm_pretty_printer$Internals$Column = function(a) {
      return { $: 7, a };
    };
    var $the_sett$elm_pretty_printer$Pretty$column = $the_sett$elm_pretty_printer$Internals$Column;
    var $the_sett$elm_pretty_printer$Internals$Nesting = function(a) {
      return { $: 6, a };
    };
    var $the_sett$elm_pretty_printer$Pretty$nesting = $the_sett$elm_pretty_printer$Internals$Nesting;
    var $the_sett$elm_pretty_printer$Pretty$align = function(doc) {
      return $the_sett$elm_pretty_printer$Pretty$column(function(currentColumn) {
        return $the_sett$elm_pretty_printer$Pretty$nesting(function(indentLvl) {
          return A2($the_sett$elm_pretty_printer$Pretty$nest, currentColumn - indentLvl, doc);
        });
      });
    };
    var $mdgriffith$elm_codegen$Internal$Write$bottomContext = { ma: 11 };
    var $elm$core$Basics$modBy = _Basics_modBy;
    var $mdgriffith$elm_codegen$Internal$Write$decrementIndent = F2(function(currentIndent, spaces) {
      var modded = A2($elm$core$Basics$modBy, 4, currentIndent - spaces);
      return !modded ? 4 : modded;
    });
    var $mdgriffith$elm_codegen$Internal$Write$doubleLines = $the_sett$elm_pretty_printer$Pretty$join(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$line));
    var $mdgriffith$elm_codegen$Internal$Write$escapeChar = function(val) {
      switch (val) {
        case "\\":
          return "\\\\";
        case "'":
          return "\\'";
        case "\t":
          return "\\t";
        case `
`:
          return "\\n";
        default:
          var c = val;
          return $elm$core$String$fromChar(c);
      }
    };
    var $elm$core$String$fromFloat = _String_fromNumber;
    var $the_sett$elm_pretty_printer$Internals$copy = F2(function(i, s) {
      return !i ? "" : _Utils_ap(s, A2($the_sett$elm_pretty_printer$Internals$copy, i - 1, s));
    });
    var $the_sett$elm_pretty_printer$Pretty$hang = F2(function(spaces, doc) {
      return $the_sett$elm_pretty_printer$Pretty$align(A2($the_sett$elm_pretty_printer$Pretty$nest, spaces, doc));
    });
    var $the_sett$elm_pretty_printer$Pretty$indent = F2(function(spaces, doc) {
      return A2($the_sett$elm_pretty_printer$Pretty$hang, spaces, A2($the_sett$elm_pretty_printer$Pretty$append, $the_sett$elm_pretty_printer$Pretty$string(A2($the_sett$elm_pretty_printer$Internals$copy, spaces, " ")), doc));
    });
    var $mdgriffith$elm_codegen$Internal$Write$optionalGroup = F2(function(flag, doc) {
      return flag ? doc : $the_sett$elm_pretty_printer$Pretty$group(doc);
    });
    var $mdgriffith$elm_codegen$Internal$Write$precedence = function(symbol) {
      switch (symbol) {
        case ">>":
          return 9;
        case "<<":
          return 9;
        case "^":
          return 8;
        case "*":
          return 7;
        case "/":
          return 7;
        case "//":
          return 7;
        case "%":
          return 7;
        case "rem":
          return 7;
        case "+":
          return 6;
        case "-":
          return 6;
        case "++":
          return 5;
        case "::":
          return 5;
        case "==":
          return 4;
        case "/=":
          return 4;
        case "<":
          return 4;
        case ">":
          return 4;
        case "<=":
          return 4;
        case ">=":
          return 4;
        case "&&":
          return 3;
        case "||":
          return 2;
        case "|>":
          return 0;
        case "<|":
          return 0;
        default:
          return 0;
      }
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function(a) {
      return { $: 14, a };
    };
    var $mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses = F2(function(isTop, pattern) {
      var shouldRemove = function(pat) {
        var _v6 = _Utils_Tuple2(isTop, pat);
        _v6$2:
          while (true) {
            switch (_v6.b.$) {
              case 12:
                if (!_v6.a) {
                  var _v7 = _v6.b;
                  return false;
                } else {
                  break _v6$2;
                }
              case 13:
                var _v8 = _v6.b;
                return false;
              default:
                break _v6$2;
            }
          }
        return isTop;
      };
      var removeParens = function(pat) {
        removeParens:
          while (true) {
            if (pat.$ === 14) {
              var _v1 = pat.a;
              var innerPat = _v1.b;
              if (shouldRemove(innerPat)) {
                var $temp$pat = innerPat;
                pat = $temp$pat;
                continue removeParens;
              } else {
                return pat;
              }
            } else {
              return pat;
            }
          }
      };
      var addParens = function(pat) {
        var _v2 = _Utils_Tuple2(isTop, pat);
        _v2$2:
          while (true) {
            if (!_v2.a) {
              switch (_v2.b.$) {
                case 12:
                  if (_v2.b.b.b) {
                    var _v3 = _v2.b;
                    var _v4 = _v3.b;
                    return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern($mdgriffith$elm_codegen$Internal$Compiler$nodify(pat));
                  } else {
                    break _v2$2;
                  }
                case 13:
                  var _v5 = _v2.b;
                  return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern($mdgriffith$elm_codegen$Internal$Compiler$nodify(pat));
                default:
                  break _v2$2;
              }
            } else {
              break _v2$2;
            }
          }
        return pat;
      };
      return addParens(removeParens(pattern));
    });
    var $the_sett$elm_pretty_printer$Pretty$braces = function(doc) {
      return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$char("{"), $the_sett$elm_pretty_printer$Pretty$char("}"), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$quotes = function(doc) {
      return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$char('"'), $the_sett$elm_pretty_printer$Pretty$char('"'), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$singleQuotes = function(doc) {
      return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$char("'"), $the_sett$elm_pretty_printer$Pretty$char("'"), doc);
    };
    var $elm$core$String$fromList = _String_fromList;
    var $rtfeldman$elm_hex$Hex$unsafeToDigit = function(num) {
      unsafeToDigit:
        while (true) {
          switch (num) {
            case 0:
              return "0";
            case 1:
              return "1";
            case 2:
              return "2";
            case 3:
              return "3";
            case 4:
              return "4";
            case 5:
              return "5";
            case 6:
              return "6";
            case 7:
              return "7";
            case 8:
              return "8";
            case 9:
              return "9";
            case 10:
              return "a";
            case 11:
              return "b";
            case 12:
              return "c";
            case 13:
              return "d";
            case 14:
              return "e";
            case 15:
              return "f";
            default:
              var $temp$num = num;
              num = $temp$num;
              continue unsafeToDigit;
          }
        }
    };
    var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(function(digits, num) {
      unsafePositiveToDigits:
        while (true) {
          if (num < 16) {
            return A2($elm$core$List$cons, $rtfeldman$elm_hex$Hex$unsafeToDigit(num), digits);
          } else {
            var $temp$digits = A2($elm$core$List$cons, $rtfeldman$elm_hex$Hex$unsafeToDigit(A2($elm$core$Basics$modBy, 16, num)), digits), $temp$num = num / 16 | 0;
            digits = $temp$digits;
            num = $temp$num;
            continue unsafePositiveToDigits;
          }
        }
    });
    var $rtfeldman$elm_hex$Hex$toString = function(num) {
      return $elm$core$String$fromList(num < 0 ? A2($elm$core$List$cons, "-", A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner = F3(function(aliases, isTop, pattern) {
      var _v0 = A2($mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses, isTop, pattern);
      switch (_v0.$) {
        case 0:
          return $the_sett$elm_pretty_printer$Pretty$string("_");
        case 1:
          return $the_sett$elm_pretty_printer$Pretty$string("()");
        case 2:
          var val = _v0.a;
          return $mdgriffith$elm_codegen$Internal$Write$singleQuotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escapeChar(val)));
        case 3:
          var val = _v0.a;
          return $mdgriffith$elm_codegen$Internal$Write$quotes($the_sett$elm_pretty_printer$Pretty$string(val));
        case 4:
          var val = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt(val));
        case 5:
          var val = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$string($rtfeldman$elm_hex$Hex$toString(val));
        case 6:
          var val = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromFloat(val));
        case 7:
          var vals = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$parens(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, true), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(vals))), $the_sett$elm_pretty_printer$Pretty$space)));
        case 8:
          var fields = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$braces(A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$space, A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(fields)))));
        case 9:
          var _v1 = _v0.a;
          var hdPat = _v1.b;
          var _v2 = _v0.b;
          var tlPat = _v2.b;
          return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
            A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false, hdPat),
            $the_sett$elm_pretty_printer$Pretty$string("::"),
            A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false, tlPat)
          ]));
        case 10:
          var listPats = _v0.a;
          if (!listPats.b) {
            return $the_sett$elm_pretty_printer$Pretty$string("[]");
          } else {
            var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("["));
            var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("]"), $the_sett$elm_pretty_printer$Pretty$space);
            return A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(listPats))));
          }
        case 11:
          var _var = _v0.a;
          return $the_sett$elm_pretty_printer$Pretty$string(_var);
        case 12:
          var qnRef = _v0.a;
          var listPats = _v0.b;
          return $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$cons, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(qnRef.j), A2($mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot, aliases, qnRef.lK)), A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(listPats))));
        case 13:
          var _v4 = _v0.a;
          var pat = _v4.b;
          var _v5 = _v0.b;
          var name = _v5.b;
          return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
            A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false, pat),
            $the_sett$elm_pretty_printer$Pretty$string("as"),
            $the_sett$elm_pretty_printer$Pretty$string(name)
          ]));
        default:
          var _v6 = _v0.a;
          var pat = _v6.b;
          return $the_sett$elm_pretty_printer$Pretty$parens(A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, true, pat));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyArgs = F2(function(aliases, args) {
      return $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), args));
    });
    var $mdgriffith$elm_codegen$Internal$Write$escape = function(val) {
      return A3($elm$core$String$replace, "\t", "\\t", A3($elm$core$String$replace, `
`, "\\n", A3($elm$core$String$replace, '"', "\\\"", A3($elm$core$String$replace, "\\", "\\\\", val))));
    };
    var $mdgriffith$elm_codegen$Internal$Write$tripleQuotes = function(doc) {
      return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$string('"""'), $the_sett$elm_pretty_printer$Pretty$string('"""'), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyLiteral = function(val) {
      return A2($elm$core$String$contains, `
`, val) ? $mdgriffith$elm_codegen$Internal$Write$tripleQuotes($the_sett$elm_pretty_printer$Pretty$string(val)) : $mdgriffith$elm_codegen$Internal$Write$quotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escape(val)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPattern = F2(function(aliases, pattern) {
      return A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, true, pattern);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettySignature = F2(function(aliases, sig) {
      return $the_sett$elm_pretty_printer$Pretty$group(A2($the_sett$elm_pretty_printer$Pretty$nest, 4, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(sig.j)),
          $the_sett$elm_pretty_printer$Pretty$string(":")
        ])),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(sig.bw))
      ]))));
    });
    var $the_sett$elm_pretty_printer$Pretty$tightline = A2($the_sett$elm_pretty_printer$Internals$Line, "", "");
    var $mdgriffith$elm_codegen$Internal$Write$showParen = F2(function(show, _v0) {
      var child = _v0.a;
      var alwaysBreak = _v0.b;
      if (show) {
        var open = $the_sett$elm_pretty_printer$Pretty$string("(");
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$tightline);
        return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$nest, 1, child)))), alwaysBreak);
      } else {
        return _Utils_Tuple2(child, alwaysBreak);
      }
    });
    var $elm$core$String$padLeft = F3(function(n, _char, string) {
      return _Utils_ap(A2($elm$core$String$repeat, n - $elm$core$String$length(string), $elm$core$String$fromChar(_char)), string);
    });
    var $mdgriffith$elm_codegen$Internal$Write$toHexString = function(val) {
      var padWithZeros = function(str) {
        var length = $elm$core$String$length(str);
        return length < 2 ? A3($elm$core$String$padLeft, 2, "0", str) : length > 2 && length < 4 ? A3($elm$core$String$padLeft, 4, "0", str) : length > 4 && length < 8 ? A3($elm$core$String$padLeft, 8, "0", str) : str;
      };
      return "0x" + padWithZeros($elm$core$String$toUpper($rtfeldman$elm_hex$Hex$toString(val)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$topContext = { ma: 0 };
    var $elm$core$List$unzip = function(pairs) {
      var step = F2(function(_v0, _v1) {
        var x2 = _v0.a;
        var y2 = _v0.b;
        var xs = _v1.a;
        var ys = _v1.b;
        return _Utils_Tuple2(A2($elm$core$List$cons, x2, xs), A2($elm$core$List$cons, y2, ys));
      });
      return A3($elm$core$List$foldr, step, _Utils_Tuple2(_List_Nil, _List_Nil), pairs);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyApplication = F3(function(aliases, indent, exprs) {
      var _v41 = A2($elm$core$Tuple$mapSecond, $elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A2($elm$core$List$map, A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$bottomContext, indent), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(exprs))));
      var prettyExpressions = _v41.a;
      var alwaysBreak = _v41.b;
      return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A2($the_sett$elm_pretty_printer$Pretty$nest, indent, $the_sett$elm_pretty_printer$Pretty$lines(prettyExpressions)))), alwaysBreak);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock = F3(function(aliases, indent, caseBlock) {
      var prettyCase = function(_v38) {
        var _v39 = _v38.a;
        var pattern = _v39.b;
        var _v40 = _v38.b;
        var expr = _v40.b;
        return A2($the_sett$elm_pretty_printer$Pretty$indent, indent, A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$indent, 4, A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, expr).a), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(" ->"), A2($mdgriffith$elm_codegen$Internal$Write$prettyPattern, aliases, pattern)))));
      };
      var patternsPart = $mdgriffith$elm_codegen$Internal$Write$doubleLines(A2($elm$core$List$map, prettyCase, caseBlock.aw));
      var casePart = function() {
        var _v37 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(caseBlock.c));
        var caseExpression = _v37.a;
        var alwaysBreak = _v37.b;
        return A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
          A2($the_sett$elm_pretty_printer$Pretty$nest, indent, A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("case"),
            caseExpression
          ])))),
          $the_sett$elm_pretty_printer$Pretty$string("of")
        ])));
      }();
      return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([casePart, patternsPart]))), true);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyExpression = F2(function(aliases, expression) {
      return A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, expression).a;
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner = F4(function(aliases, context, indent, expression) {
      prettyExpressionInner:
        while (true) {
          var noninfix = $mdgriffith$elm_codegen$Internal$Write$showParen(context.ma > 10);
          switch (expression.$) {
            case 0:
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("()"), false);
            case 1:
              var exprs = expression.a;
              return noninfix(A3($mdgriffith$elm_codegen$Internal$Write$prettyApplication, aliases, indent, exprs));
            case 2:
              var symbol = expression.a;
              var dir = expression.b;
              var exprl = expression.c;
              var exprr = expression.d;
              return A2($mdgriffith$elm_codegen$Internal$Write$showParen, _Utils_cmp(context.ma, $mdgriffith$elm_codegen$Internal$Write$precedence(symbol)) > 0, A6($mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication, aliases, indent, symbol, dir, exprl, exprr));
            case 3:
              var modl = expression.a;
              var val = expression.b;
              return _Utils_Tuple2(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(val), A2($mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot, aliases, modl)), false);
            case 4:
              var exprBool = expression.a;
              var exprTrue = expression.b;
              var exprFalse = expression.c;
              return noninfix(A5($mdgriffith$elm_codegen$Internal$Write$prettyIfBlock, aliases, indent, exprBool, exprTrue, exprFalse));
            case 5:
              var symbol = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string(symbol)), false);
            case 6:
              var symbol = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string(symbol), false);
            case 7:
              var val = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt(val)), false);
            case 8:
              var val = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$toHexString(val)), false);
            case 9:
              var val = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromFloat(val)), false);
            case 10:
              var _v34 = expression.a;
              var expr = _v34.b;
              return noninfix(function() {
                var _v35 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$bottomContext, 4, expr);
                var prettyExpr = _v35.a;
                var alwaysBreak = _v35.b;
                return _Utils_Tuple2(A2($the_sett$elm_pretty_printer$Pretty$a, prettyExpr, $the_sett$elm_pretty_printer$Pretty$string("-")), alwaysBreak);
              }());
            case 11:
              var val = expression.a;
              return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$prettyLiteral(val), false);
            case 12:
              var val = expression.a;
              return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$singleQuotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escapeChar(val))), false);
            case 13:
              var exprs = expression.a;
              return A3($mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression, aliases, indent, exprs);
            case 14:
              var _v36 = expression.a;
              var expr = _v36.b;
              var $temp$aliases = aliases, $temp$context = context, $temp$indent = indent, $temp$expression = expr;
              aliases = $temp$aliases;
              context = $temp$context;
              indent = $temp$indent;
              expression = $temp$expression;
              continue prettyExpressionInner;
            case 15:
              var letBlock = expression.a;
              return noninfix(A3($mdgriffith$elm_codegen$Internal$Write$prettyLetBlock, aliases, indent, letBlock));
            case 16:
              var caseBlock = expression.a;
              return noninfix(A3($mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock, aliases, indent, caseBlock));
            case 17:
              var lambda = expression.a;
              return noninfix(A3($mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression, aliases, indent, lambda));
            case 18:
              var setters = expression.a;
              return A2($mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr, aliases, setters);
            case 19:
              var exprs = expression.a;
              return A3($mdgriffith$elm_codegen$Internal$Write$prettyList, aliases, indent, exprs);
            case 20:
              var expr = expression.a;
              var field = expression.b;
              return A3($mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess, aliases, expr, field);
            case 21:
              var field = expression.a;
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string(field), false);
            case 22:
              var _var = expression.a;
              var setters = expression.b;
              return A4($mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression, aliases, indent, _var, setters);
            default:
              return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("glsl"), true);
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyFun = F2(function(aliases, fn) {
      return $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(fn.bH)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettySignature(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(fn.mC)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(fn.kJ))
      ]));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation = F2(function(aliases, impl) {
      return A2($the_sett$elm_pretty_printer$Pretty$nest, 4, A2($the_sett$elm_pretty_printer$Pretty$a, A2($mdgriffith$elm_codegen$Internal$Write$prettyExpression, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(impl.c)), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(impl.j)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyArgs, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(impl.bA)),
        $the_sett$elm_pretty_printer$Pretty$string("=")
      ])))));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyIfBlock = F5(function(aliases, indent, exprBool, exprTrue, exprFalse) {
      var innerIfBlock = F3(function(_v27, _v28, _v29) {
        var innerExprBool = _v27.b;
        var innerExprTrue = _v28.b;
        var innerExprFalse = _v29.b;
        var truePart = A2($the_sett$elm_pretty_printer$Pretty$indent, indent, A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, innerExprTrue).a);
        var ifPart = function() {
          var _v32 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, innerExprBool);
          var alwaysBreak = _v32.b;
          return A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
            A2($the_sett$elm_pretty_printer$Pretty$nest, indent, A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$string("if"),
              A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, innerExprBool).a
            ])))),
            $the_sett$elm_pretty_printer$Pretty$string("then")
          ])));
        }();
        var falsePart = function() {
          if (innerExprFalse.$ === 4) {
            var nestedExprBool = innerExprFalse.a;
            var nestedExprTrue = innerExprFalse.b;
            var nestedExprFalse = innerExprFalse.c;
            return A3(innerIfBlock, nestedExprBool, nestedExprTrue, nestedExprFalse);
          } else {
            return _List_fromArray([
              A2($the_sett$elm_pretty_printer$Pretty$indent, indent, A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, innerExprFalse).a)
            ]);
          }
        }();
        var elsePart = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("else"), $the_sett$elm_pretty_printer$Pretty$line);
        if (!falsePart.b) {
          return _List_Nil;
        } else {
          if (!falsePart.b.b) {
            var falseExpr = falsePart.a;
            return _List_fromArray([ifPart, truePart, elsePart, falseExpr]);
          } else {
            var hd = falsePart.a;
            var tl = falsePart.b;
            return A2($elm$core$List$append, _List_fromArray([
              ifPart,
              truePart,
              $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([elsePart, hd]))
            ]), tl);
          }
        }
      });
      var prettyExpressions = A3(innerIfBlock, exprBool, exprTrue, exprFalse);
      return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$lines(prettyExpressions)), true);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression = F3(function(aliases, indent, lambda) {
      var _v26 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(lambda.c));
      var prettyExpr = _v26.a;
      var alwaysBreak = _v26.b;
      return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A2($the_sett$elm_pretty_printer$Pretty$nest, indent, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(" ->"), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(lambda.cF))), $the_sett$elm_pretty_printer$Pretty$string("\\"))),
        prettyExpr
      ]))))), alwaysBreak);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyLetBlock = F3(function(aliases, indent, letBlock) {
      return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("let"),
        A2($the_sett$elm_pretty_printer$Pretty$indent, indent, $mdgriffith$elm_codegen$Internal$Write$doubleLines(A2($elm$core$List$map, A2($mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration, aliases, indent), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(letBlock.aM)))),
        $the_sett$elm_pretty_printer$Pretty$string("in"),
        A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(letBlock.c)).a
      ]))), true);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration = F3(function(aliases, indent, letDecl) {
      if (!letDecl.$) {
        var fn = letDecl.a;
        return A2($mdgriffith$elm_codegen$Internal$Write$prettyFun, aliases, fn);
      } else {
        var _v24 = letDecl.a;
        var pattern = _v24.b;
        var _v25 = letDecl.b;
        var expr = _v25.b;
        return A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$indent, indent, A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, expr).a), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          A3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false, pattern),
          $the_sett$elm_pretty_printer$Pretty$string("=")
        ]))));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyList = F3(function(aliases, indent, exprs) {
      if (!exprs.b) {
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("[]"), false);
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("["));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("]"), $the_sett$elm_pretty_printer$Pretty$line);
        var _v22 = A2($elm$core$Tuple$mapSecond, $elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A2($elm$core$List$map, A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, A2($mdgriffith$elm_codegen$Internal$Write$decrementIndent, indent, 2)), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(exprs))));
        var prettyExpressions = _v22.a;
        var alwaysBreak = _v22.b;
        return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication = F6(function(aliases, indent, symbol, dir, _v15, _v16) {
      var exprl = _v15.b;
      var exprr = _v16.b;
      var prec = $mdgriffith$elm_codegen$Internal$Write$precedence(symbol);
      var _v17 = function() {
        switch (dir) {
          case 0:
            return _Utils_Tuple2(prec, prec + 1);
          case 2:
            return _Utils_Tuple2(prec + 1, prec + 1);
          default:
            return _Utils_Tuple2(prec + 1, prec);
        }
      }();
      var lprec = _v17.a;
      var rprec = _v17.b;
      var _v19 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, { ma: rprec }, indent + 4, exprr);
      var right = _v19.a;
      var breakRight = _v19.b;
      var _v20 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, { ma: lprec }, indent, exprl);
      var left = _v20.a;
      var breakLeft = _v20.b;
      var alwaysBreak = breakLeft || breakRight;
      return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A2($the_sett$elm_pretty_printer$Pretty$a, right, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(symbol), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, left)))))), alwaysBreak);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess = F3(function(aliases, _v12, _v13) {
      var expr = _v12.b;
      var field = _v13.b;
      var _v14 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$bottomContext, 4, expr);
      var prettyExpr = _v14.a;
      var alwaysBreak = _v14.b;
      return _Utils_Tuple2(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(field), A2($the_sett$elm_pretty_printer$Pretty$a, $mdgriffith$elm_codegen$Internal$Write$dot, prettyExpr)), alwaysBreak);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr = F2(function(aliases, setters) {
      if (!setters.b) {
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("{}"), false);
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("{"));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        var _v11 = A2($elm$core$Tuple$mapSecond, $elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettySetter(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(setters))));
        var prettyExpressions = _v11.a;
        var alwaysBreak = _v11.b;
        return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression = F4(function(aliases, indent, _v6, setters) {
      var _var = _v6.b;
      var addBarToFirst = function(exprs) {
        if (!exprs.b) {
          return _List_Nil;
        } else {
          var hd = exprs.a;
          var tl = exprs.b;
          return A2($elm$core$List$cons, A2($the_sett$elm_pretty_printer$Pretty$a, hd, $the_sett$elm_pretty_printer$Pretty$string("| ")), tl);
        }
      };
      if (!setters.b) {
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("{}"), false);
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          $the_sett$elm_pretty_printer$Pretty$string("{"),
          $the_sett$elm_pretty_printer$Pretty$string(_var)
        ])));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        var _v8 = A2($elm$core$Tuple$mapSecond, $elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Write$prettySetter(aliases), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(setters))));
        var prettyExpressions = _v8.a;
        var alwaysBreak = _v8.b;
        return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$empty, close, A2($the_sett$elm_pretty_printer$Pretty$nest, indent, A2($the_sett$elm_pretty_printer$Pretty$a, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", addBarToFirst(prettyExpressions)), open))))), alwaysBreak);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettySetter = F2(function(aliases, _v2) {
      var _v3 = _v2.a;
      var fld = _v3.b;
      var _v4 = _v2.b;
      var val = _v4.b;
      var _v5 = A4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, val);
      var prettyExpr = _v5.a;
      var alwaysBreak = _v5.b;
      return _Utils_Tuple2(A2($the_sett$elm_pretty_printer$Pretty$nest, 4, A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          $the_sett$elm_pretty_printer$Pretty$string(fld),
          $the_sett$elm_pretty_printer$Pretty$string("=")
        ])),
        prettyExpr
      ])))), alwaysBreak);
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression = F3(function(aliases, indent, exprs) {
      if (!exprs.b) {
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("()"), false);
      } else {
        var open = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("("));
        var close = A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$line);
        var _v1 = A2($elm$core$Tuple$mapSecond, $elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A2($elm$core$List$map, A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, A2($mdgriffith$elm_codegen$Internal$Write$decrementIndent, indent, 2)), $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(exprs))));
        var prettyExpressions = _v1.a;
        var alwaysBreak = _v1.b;
        return _Utils_Tuple2(A2($mdgriffith$elm_codegen$Internal$Write$optionalGroup, alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align(A3($the_sett$elm_pretty_printer$Pretty$surround, open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyDestructuring = F3(function(aliases, pattern, expr) {
      return A2($the_sett$elm_pretty_printer$Pretty$nest, 4, $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
          A2($mdgriffith$elm_codegen$Internal$Write$prettyPattern, aliases, pattern),
          $the_sett$elm_pretty_printer$Pretty$string("=")
        ])),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyExpression, aliases, expr)
      ])));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyInfix = function(infix_) {
      var dirToString = function(direction) {
        switch (direction) {
          case 0:
            return "left";
          case 1:
            return "right";
          default:
            return "non";
        }
      };
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("infix"),
        $the_sett$elm_pretty_printer$Pretty$string(dirToString($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.o))),
        $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.ma))),
        $the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.r))),
        $the_sett$elm_pretty_printer$Pretty$string("="),
        $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.p))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration = F2(function(aliases, sig) {
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("port"),
        A2($mdgriffith$elm_codegen$Internal$Write$prettySignature, aliases, sig)
      ]));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias = F2(function(aliases, tAlias) {
      var typeAliasPretty = A2($the_sett$elm_pretty_printer$Pretty$nest, 4, A2($the_sett$elm_pretty_printer$Pretty$a, A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation, aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(tAlias.bw)), A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("type alias"),
        $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(tAlias.j)),
        $the_sett$elm_pretty_printer$Pretty$words(A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll(tAlias.eC))),
        $the_sett$elm_pretty_printer$Pretty$string("=")
      ])))));
      return $the_sett$elm_pretty_printer$Pretty$lines(_List_fromArray([
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(tAlias.bH)),
        typeAliasPretty
      ]));
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration = F2(function(aliases, decl) {
      switch (decl.$) {
        case 0:
          var fn = decl.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyFun, aliases, fn);
        case 1:
          var tAlias = decl.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias, aliases, tAlias);
        case 2:
          var type_ = decl.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyCustomType, aliases, type_);
        case 3:
          var sig = decl.a;
          return A2($mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration, aliases, sig);
        case 4:
          var infix_ = decl.a;
          return $mdgriffith$elm_codegen$Internal$Write$prettyInfix(infix_);
        default:
          var _v1 = decl.a;
          var pattern = _v1.b;
          var _v2 = decl.b;
          var expr = _v2.b;
          return A3($mdgriffith$elm_codegen$Internal$Write$prettyDestructuring, aliases, pattern, expr);
      }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyDeclarations = F2(function(aliases, decls) {
      return A3($elm$core$List$foldl, $elm$core$Basics$apL, $the_sett$elm_pretty_printer$Pretty$empty, $elm$core$List$reverse(A2($elm$core$List$drop, 1, $elm$core$List$reverse(A2($elm$core$List$concatMap, function(decl) {
        switch (decl.$) {
          case 1:
            var content = decl.a;
            return _List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$string(content + `
`)),
              A2($elm$core$Basics$composeR, $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line), $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line))
            ]);
          case 2:
            var source = decl.a;
            return _List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$string(source)),
              A2($elm$core$Basics$composeR, $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line), A2($elm$core$Basics$composeR, $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line), $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line)))
            ]);
          default:
            var innerDecl = decl.a;
            return _List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$a(A2($mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration, aliases, innerDecl)),
              A2($elm$core$Basics$composeR, $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line), A2($elm$core$Basics$composeR, $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line), $the_sett$elm_pretty_printer$Pretty$a($the_sett$elm_pretty_printer$Pretty$line)))
            ]);
        }
      }, decls)))));
    });
    var $mdgriffith$elm_codegen$Internal$Comments$delimeters = function(doc) {
      return A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$string("-}"), A2($the_sett$elm_pretty_printer$Pretty$a, doc, $the_sett$elm_pretty_printer$Pretty$string("{-|")));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$getParts = function(_v0) {
      var parts = _v0;
      return $elm$core$List$reverse(parts);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$DocTags = function(a) {
      return { $: 2, a };
    };
    var $mdgriffith$elm_codegen$Internal$Comments$fitAndSplit = F2(function(width, tags) {
      if (!tags.b) {
        return _List_Nil;
      } else {
        var t = tags.a;
        var ts = tags.b;
        var _v1 = A3($elm$core$List$foldl, F2(function(tag, _v2) {
          var allSplits = _v2.a;
          var curSplit = _v2.b;
          var remaining = _v2.c;
          return _Utils_cmp($elm$core$String$length(tag), remaining) < 1 ? _Utils_Tuple3(allSplits, A2($elm$core$List$cons, tag, curSplit), remaining - $elm$core$String$length(tag)) : _Utils_Tuple3(_Utils_ap(allSplits, _List_fromArray([
            $elm$core$List$reverse(curSplit)
          ])), _List_fromArray([tag]), width - $elm$core$String$length(tag));
        }), _Utils_Tuple3(_List_Nil, _List_fromArray([t]), width - $elm$core$String$length(t)), ts);
        var splitsExceptLast = _v1.a;
        var lastSplit = _v1.b;
        return _Utils_ap(splitsExceptLast, _List_fromArray([
          $elm$core$List$reverse(lastSplit)
        ]));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Comments$mergeDocTags = function(innerParts) {
      var _v0 = A3($elm$core$List$foldr, F2(function(part, _v1) {
        var accum = _v1.a;
        var context = _v1.b;
        if (context.$ === 1) {
          if (part.$ === 2) {
            var tags2 = part.a;
            return _Utils_Tuple2(accum, $elm$core$Maybe$Just(tags2));
          } else {
            var otherPart = part;
            return _Utils_Tuple2(A2($elm$core$List$cons, otherPart, accum), $elm$core$Maybe$Nothing);
          }
        } else {
          var contextTags = context.a;
          if (part.$ === 2) {
            var tags2 = part.a;
            return _Utils_Tuple2(accum, $elm$core$Maybe$Just(_Utils_ap(contextTags, tags2)));
          } else {
            var otherPart = part;
            return _Utils_Tuple2(A2($elm$core$List$cons, otherPart, A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Comments$DocTags($elm$core$List$sort(contextTags)), accum)), $elm$core$Maybe$Nothing);
          }
        }
      }), _Utils_Tuple2(_List_Nil, $elm$core$Maybe$Nothing), innerParts);
      var partsExceptMaybeFirst = _v0.a;
      var maybeFirstPart = _v0.b;
      if (maybeFirstPart.$ === 1) {
        return partsExceptMaybeFirst;
      } else {
        var tags = maybeFirstPart.a;
        return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Comments$DocTags($elm$core$List$sort(tags)), partsExceptMaybeFirst);
      }
    };
    var $mdgriffith$elm_codegen$Internal$Comments$layoutTags = F2(function(width, parts) {
      return A3($elm$core$List$foldr, F2(function(part, _v0) {
        var accumParts = _v0.a;
        var accumDocTags = _v0.b;
        if (part.$ === 2) {
          var tags = part.a;
          var splits = A2($mdgriffith$elm_codegen$Internal$Comments$fitAndSplit, width, tags);
          return _Utils_Tuple2(_Utils_ap(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Comments$DocTags, splits), accumParts), _Utils_ap(accumDocTags, splits));
        } else {
          var otherPart = part;
          return _Utils_Tuple2(A2($elm$core$List$cons, otherPart, accumParts), accumDocTags);
        }
      }), _Utils_Tuple2(_List_Nil, _List_Nil), $mdgriffith$elm_codegen$Internal$Comments$mergeDocTags(parts));
    });
    var $the_sett$elm_pretty_printer$Internals$NLine = F3(function(a, b, c) {
      return { $: 2, a, b, c };
    });
    var $the_sett$elm_pretty_printer$Internals$NNil = { $: 0 };
    var $the_sett$elm_pretty_printer$Internals$NText = F3(function(a, b, c) {
      return { $: 1, a, b, c };
    });
    var $the_sett$elm_pretty_printer$Internals$fits = F2(function(w, normal) {
      fits:
        while (true) {
          if (w < 0) {
            return false;
          } else {
            switch (normal.$) {
              case 0:
                return true;
              case 1:
                var text = normal.a;
                var innerNormal = normal.b;
                var $temp$w = w - $elm$core$String$length(text), $temp$normal = innerNormal(0);
                w = $temp$w;
                normal = $temp$normal;
                continue fits;
              default:
                return true;
            }
          }
        }
    });
    var $the_sett$elm_pretty_printer$Internals$better = F4(function(w, k2, doc, doc2Fn) {
      return A2($the_sett$elm_pretty_printer$Internals$fits, w - k2, doc) ? doc : doc2Fn(0);
    });
    var $the_sett$elm_pretty_printer$Internals$best = F3(function(width, startCol, x2) {
      var be = F3(function(w, k2, docs) {
        be:
          while (true) {
            if (!docs.b) {
              return $the_sett$elm_pretty_printer$Internals$NNil;
            } else {
              switch (docs.a.b.$) {
                case 0:
                  var _v1 = docs.a;
                  var i = _v1.a;
                  var _v2 = _v1.b;
                  var ds = docs.b;
                  var $temp$w = w, $temp$k = k2, $temp$docs = ds;
                  w = $temp$w;
                  k2 = $temp$k;
                  docs = $temp$docs;
                  continue be;
                case 1:
                  var _v3 = docs.a;
                  var i = _v3.a;
                  var _v4 = _v3.b;
                  var doc = _v4.a;
                  var doc2 = _v4.b;
                  var ds = docs.b;
                  var $temp$w = w, $temp$k = k2, $temp$docs = A2($elm$core$List$cons, _Utils_Tuple2(i, doc(0)), A2($elm$core$List$cons, _Utils_Tuple2(i, doc2(0)), ds));
                  w = $temp$w;
                  k2 = $temp$k;
                  docs = $temp$docs;
                  continue be;
                case 2:
                  var _v5 = docs.a;
                  var i = _v5.a;
                  var _v6 = _v5.b;
                  var j2 = _v6.a;
                  var doc = _v6.b;
                  var ds = docs.b;
                  var $temp$w = w, $temp$k = k2, $temp$docs = A2($elm$core$List$cons, _Utils_Tuple2(i + j2, doc(0)), ds);
                  w = $temp$w;
                  k2 = $temp$k;
                  docs = $temp$docs;
                  continue be;
                case 3:
                  var _v7 = docs.a;
                  var i = _v7.a;
                  var _v8 = _v7.b;
                  var text = _v8.a;
                  var maybeTag = _v8.b;
                  var ds = docs.b;
                  return A3($the_sett$elm_pretty_printer$Internals$NText, text, function(_v9) {
                    return A3(be, w, k2 + $elm$core$String$length(text), ds);
                  }, maybeTag);
                case 4:
                  var _v10 = docs.a;
                  var i = _v10.a;
                  var _v11 = _v10.b;
                  var vsep = _v11.b;
                  var ds = docs.b;
                  return A3($the_sett$elm_pretty_printer$Internals$NLine, i, vsep, function(_v12) {
                    return A3(be, w, i + $elm$core$String$length(vsep), ds);
                  });
                case 5:
                  var _v13 = docs.a;
                  var i = _v13.a;
                  var _v14 = _v13.b;
                  var doc = _v14.a;
                  var doc2 = _v14.b;
                  var ds = docs.b;
                  return A4($the_sett$elm_pretty_printer$Internals$better, w, k2, A3(be, w, k2, A2($elm$core$List$cons, _Utils_Tuple2(i, doc), ds)), function(_v15) {
                    return A3(be, w, k2, A2($elm$core$List$cons, _Utils_Tuple2(i, doc2), ds));
                  });
                case 6:
                  var _v16 = docs.a;
                  var i = _v16.a;
                  var fn = _v16.b.a;
                  var ds = docs.b;
                  var $temp$w = w, $temp$k = k2, $temp$docs = A2($elm$core$List$cons, _Utils_Tuple2(i, fn(i)), ds);
                  w = $temp$w;
                  k2 = $temp$k;
                  docs = $temp$docs;
                  continue be;
                default:
                  var _v17 = docs.a;
                  var i = _v17.a;
                  var fn = _v17.b.a;
                  var ds = docs.b;
                  var $temp$w = w, $temp$k = k2, $temp$docs = A2($elm$core$List$cons, _Utils_Tuple2(i, fn(k2)), ds);
                  w = $temp$w;
                  k2 = $temp$k;
                  docs = $temp$docs;
                  continue be;
              }
            }
          }
      });
      return A3(be, width, startCol, _List_fromArray([
        _Utils_Tuple2(0, x2)
      ]));
    });
    var $the_sett$elm_pretty_printer$Internals$layout = function(normal) {
      var layoutInner = F2(function(normal2, acc) {
        layoutInner:
          while (true) {
            switch (normal2.$) {
              case 0:
                return acc;
              case 1:
                var text = normal2.a;
                var innerNormal = normal2.b;
                var maybeTag = normal2.c;
                var $temp$normal2 = innerNormal(0), $temp$acc = A2($elm$core$List$cons, text, acc);
                normal2 = $temp$normal2;
                acc = $temp$acc;
                continue layoutInner;
              default:
                var i = normal2.a;
                var sep = normal2.b;
                var innerNormal = normal2.c;
                var norm = innerNormal(0);
                if (norm.$ === 2) {
                  var $temp$normal2 = innerNormal(0), $temp$acc = A2($elm$core$List$cons, `
` + sep, acc);
                  normal2 = $temp$normal2;
                  acc = $temp$acc;
                  continue layoutInner;
                } else {
                  var $temp$normal2 = innerNormal(0), $temp$acc = A2($elm$core$List$cons, `
` + (A2($the_sett$elm_pretty_printer$Internals$copy, i, " ") + sep), acc);
                  normal2 = $temp$normal2;
                  acc = $temp$acc;
                  continue layoutInner;
                }
            }
          }
      });
      return $elm$core$String$concat($elm$core$List$reverse(A2(layoutInner, normal, _List_Nil)));
    };
    var $the_sett$elm_pretty_printer$Pretty$pretty = F2(function(w, doc) {
      return $the_sett$elm_pretty_printer$Internals$layout(A3($the_sett$elm_pretty_printer$Internals$best, w, 0, doc));
    });
    var $mdgriffith$elm_codegen$Internal$Comments$prettyCode = function(val) {
      return A2($the_sett$elm_pretty_printer$Pretty$indent, 4, $the_sett$elm_pretty_printer$Pretty$string(val));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyMarkdown = function(val) {
      return $the_sett$elm_pretty_printer$Pretty$string(val);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyTags = function(tags) {
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("@docs"),
        A2($the_sett$elm_pretty_printer$Pretty$join, $the_sett$elm_pretty_printer$Pretty$string(", "), A2($elm$core$List$map, $the_sett$elm_pretty_printer$Pretty$string, tags))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyCommentPart = function(part) {
      switch (part.$) {
        case 0:
          var val = part.a;
          return $mdgriffith$elm_codegen$Internal$Comments$prettyMarkdown(val);
        case 1:
          var val = part.a;
          return $mdgriffith$elm_codegen$Internal$Comments$prettyCode(val);
        default:
          var tags = part.a;
          return $mdgriffith$elm_codegen$Internal$Comments$prettyTags(tags);
      }
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyFileComment = F2(function(width, comment) {
      var _v0 = A2($mdgriffith$elm_codegen$Internal$Comments$layoutTags, width, $mdgriffith$elm_codegen$Internal$Comments$getParts(comment));
      var parts = _v0.a;
      var splits = _v0.b;
      return _Utils_Tuple2(A2($the_sett$elm_pretty_printer$Pretty$pretty, width, $mdgriffith$elm_codegen$Internal$Comments$delimeters($the_sett$elm_pretty_printer$Pretty$lines(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Comments$prettyCommentPart, parts)))), splits);
    });
    var $mdgriffith$elm_codegen$Internal$Write$checkIfIsIndented = F2(function(tll, count) {
      checkIfIsIndented:
        while (true) {
          if (count >= 5) {
            return true;
          } else {
            if (!tll.b) {
              return false;
            } else {
              var _v1 = tll.a;
              var range = _v1.a;
              var xs = tll.b;
              if (range.iy.mu > 0) {
                return true;
              } else {
                var $temp$tll = xs, $temp$count = count + 1;
                tll = $temp$tll;
                count = $temp$count;
                continue checkIfIsIndented;
              }
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyGroupedExposing = F2(function(_v0, rendered) {
      var range = _v0.a;
      var exposedElement = _v0.b;
      var renderedTopElement = $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose(exposedElement);
      var currentRow = range.iy.mu;
      var newRow = !_Utils_eq(currentRow, rendered.b1) || rendered.bn > 5;
      var newRendered = rendered.bK ? renderedTopElement : newRow ? A2($the_sett$elm_pretty_printer$Pretty$append, $the_sett$elm_pretty_printer$Pretty$string(`
    , `), renderedTopElement) : A2($the_sett$elm_pretty_printer$Pretty$append, $the_sett$elm_pretty_printer$Pretty$string(", "), renderedTopElement);
      return {
        bK: false,
        b1: currentRow,
        bl: A2($the_sett$elm_pretty_printer$Pretty$append, rendered.bl, newRendered),
        bn: newRow ? 0 : rendered.bn + 1
      };
    });
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleExposing = function(exposing_) {
      var exposings = function() {
        if (!exposing_.$) {
          return A3($the_sett$elm_pretty_printer$Pretty$surround, $the_sett$elm_pretty_printer$Pretty$string(" ("), $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$string(".."));
        } else {
          var tll = exposing_.a;
          var isIndented = A2($mdgriffith$elm_codegen$Internal$Write$checkIfIsIndented, tll, 0);
          var start = isIndented ? $the_sett$elm_pretty_printer$Pretty$string(`
    ( `) : $the_sett$elm_pretty_printer$Pretty$string(" ( ");
          var end = isIndented ? $the_sett$elm_pretty_printer$Pretty$string(`
    )`) : $the_sett$elm_pretty_printer$Pretty$string(" )");
          return A2($the_sett$elm_pretty_printer$Pretty$append, A3($elm$core$List$foldr, $mdgriffith$elm_codegen$Internal$Write$prettyGroupedExposing, { bK: true, b1: 0, bl: start, bn: 0 }, tll).bl, end);
        }
      }();
      return A2($the_sett$elm_pretty_printer$Pretty$a, exposings, $the_sett$elm_pretty_printer$Pretty$string("exposing"));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyDefaultModuleData = function(moduleData) {
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("module"),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.lK)),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.ec))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyEffectModuleData = function(moduleData) {
      var prettyCmdAndSub = F2(function(maybeCmd, maybeSub) {
        var _v0 = _Utils_Tuple2(maybeCmd, maybeSub);
        if (!_v0.a.$) {
          if (!_v0.b.$) {
            var cmdName = _v0.a.a;
            var subName = _v0.b.a;
            return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$string("where { command ="),
              $the_sett$elm_pretty_printer$Pretty$string(cmdName),
              $the_sett$elm_pretty_printer$Pretty$string(","),
              $the_sett$elm_pretty_printer$Pretty$string("subscription ="),
              $the_sett$elm_pretty_printer$Pretty$string(subName),
              $the_sett$elm_pretty_printer$Pretty$string("}")
            ])));
          } else {
            var cmdName = _v0.a.a;
            var _v3 = _v0.b;
            return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$string("where { command ="),
              $the_sett$elm_pretty_printer$Pretty$string(cmdName),
              $the_sett$elm_pretty_printer$Pretty$string("}")
            ])));
          }
        } else {
          if (_v0.b.$ === 1) {
            var _v1 = _v0.a;
            var _v2 = _v0.b;
            return $elm$core$Maybe$Nothing;
          } else {
            var _v4 = _v0.a;
            var subName = _v0.b.a;
            return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
              $the_sett$elm_pretty_printer$Pretty$string("where { subscription ="),
              $the_sett$elm_pretty_printer$Pretty$string(subName),
              $the_sett$elm_pretty_printer$Pretty$string("}")
            ])));
          }
        }
      });
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("effect module"),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.lK)),
        A2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe, $elm$core$Basics$identity, A2(prettyCmdAndSub, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(moduleData.ky), $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe(moduleData.mJ))),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.ec))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPortModuleData = function(moduleData) {
      return $the_sett$elm_pretty_printer$Pretty$words(_List_fromArray([
        $the_sett$elm_pretty_printer$Pretty$string("port module"),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.lK)),
        $mdgriffith$elm_codegen$Internal$Write$prettyModuleExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.ec))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyModule = function(mod) {
      switch (mod.$) {
        case 0:
          var defaultModuleData = mod.a;
          return $mdgriffith$elm_codegen$Internal$Write$prettyDefaultModuleData(defaultModuleData);
        case 1:
          var defaultModuleData = mod.a;
          return $mdgriffith$elm_codegen$Internal$Write$prettyPortModuleData(defaultModuleData);
        default:
          var effectModuleData = mod.a;
          return $mdgriffith$elm_codegen$Internal$Write$prettyEffectModuleData(effectModuleData);
      }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prepareLayout = F2(function(width, file) {
      return A2($the_sett$elm_pretty_printer$Pretty$a, A2($mdgriffith$elm_codegen$Internal$Write$prettyDeclarations, file.jQ, file.aM), A2($the_sett$elm_pretty_printer$Pretty$a, $mdgriffith$elm_codegen$Internal$Write$importsPretty(file.d), function(doc) {
        var _v0 = file.kz;
        if (_v0.$ === 1) {
          return doc;
        } else {
          var fileComment = _v0.a;
          var _v1 = A2($mdgriffith$elm_codegen$Internal$Comments$prettyFileComment, width, fileComment);
          var fileCommentStr = _v1.a;
          return A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $mdgriffith$elm_codegen$Internal$Write$prettyComments(_List_fromArray([fileCommentStr])), doc));
        }
      }(A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, A2($the_sett$elm_pretty_printer$Pretty$a, $the_sett$elm_pretty_printer$Pretty$line, $mdgriffith$elm_codegen$Internal$Write$prettyModule(file.lJ))))));
    });
    var $mdgriffith$elm_codegen$Internal$Write$pretty = F2(function(width, file) {
      return A2($the_sett$elm_pretty_printer$Pretty$pretty, width, A2($mdgriffith$elm_codegen$Internal$Write$prepareLayout, width, file));
    });
    var $mdgriffith$elm_codegen$Internal$Write$write = $mdgriffith$elm_codegen$Internal$Write$pretty(80);
    var $mdgriffith$elm_codegen$Internal$Render$render = F2(function(initialDocs, fileDetails) {
      var rendered = A3($elm$core$List$foldl, $mdgriffith$elm_codegen$Internal$Render$renderDecls(fileDetails), {
        aM: _List_Nil,
        ad: _List_fromArray([0]),
        eb: _List_Nil,
        aO: false,
        d: _List_Nil,
        jy: _List_Nil
      }, fileDetails.aM);
      var body = $mdgriffith$elm_codegen$Internal$Write$write({
        jQ: fileDetails.jQ,
        kz: function() {
          var exposedGroups = A3($elm$core$List$foldl, $mdgriffith$elm_codegen$Internal$Render$getExposedGroups, _List_Nil, fileDetails.aM);
          var docCommentString = A4($mdgriffith$elm_codegen$Internal$Render$exposedGroupToMarkdown, function() {
            var _v0 = rendered.eb;
            if (!_v0.b) {
              return 1;
            } else {
              return 0;
            }
          }(), $elm$core$List$reverse(exposedGroups), $mdgriffith$elm_codegen$Internal$Render$Normal, initialDocs);
          return $elm$core$String$trim(docCommentString) === "" ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Internal$Comments$addPart, $mdgriffith$elm_codegen$Internal$Comments$emptyComment, $mdgriffith$elm_codegen$Internal$Comments$Markdown(`
` + (docCommentString + `
`))));
        }(),
        aM: $elm$core$List$reverse(rendered.aM),
        d: A2($elm$core$List$filterMap, A2($mdgriffith$elm_codegen$Internal$Compiler$makeImport, fileDetails.lK, fileDetails.jQ), $mdgriffith$elm_codegen$Internal$Render$dedupImports(rendered.d)),
        lJ: (rendered.aO ? $stil4m$elm_syntax$Elm$Syntax$Module$PortModule : $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule)({
          ec: function() {
            var _v1 = rendered.eb;
            if (!_v1.b) {
              return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange));
            } else {
              return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($elm$core$List$concat(A2($elm$core$List$indexedMap, $mdgriffith$elm_codegen$Internal$Render$groupExposedItems, rendered.eb))));
            }
          }(),
          lK: $mdgriffith$elm_codegen$Internal$Compiler$nodify(fileDetails.lK)
        })
      });
      return {
        ds: body,
        l7: A2($elm$core$String$join, "/", fileDetails.lK) + ".elm",
        jy: rendered.jy
      };
    });
    var $mdgriffith$elm_codegen$Internal$Index$startIndex = function(modName) {
      return A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, 0, _List_Nil, $elm$core$Set$empty, true);
    };
    var $mdgriffith$elm_codegen$Elm$file = F2(function(mod, decs) {
      return A2($mdgriffith$elm_codegen$Internal$Render$render, "", {
        jQ: _List_Nil,
        aM: decs,
        ba: $mdgriffith$elm_codegen$Internal$Index$startIndex($elm$core$Maybe$Just(mod)),
        lK: mod
      });
    });
    var $mdgriffith$elm_codegen$Elm$Fn = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Elm$fnArg = F2(function(argument, _v0) {
      var toFnDetails = _v0;
      return function(index) {
        var argDetails = A2($mdgriffith$elm_codegen$Internal$Arg$toDetails, index, argument);
        var fnDetails = toFnDetails(argDetails.ba);
        return {
          cF: _Utils_ap(fnDetails.cF, _List_fromArray([argDetails.dI])),
          j8: fnDetails.j8(argDetails.jt),
          d: _Utils_ap(fnDetails.d, argDetails.dI.d)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$fnBuilder = function(innerValue) {
      return function(_v0) {
        return { cF: _List_Nil, j8: innerValue, d: _List_Nil };
      };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function(a) {
      return { $: 17, a };
    };
    var $mdgriffith$elm_codegen$Elm$fnDone = function(_v0) {
      var toFnDetails = _v0;
      return function(index) {
        var fnDetails = toFnDetails(index);
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, $mdgriffith$elm_codegen$Internal$Index$next(index), fnDetails.j8);
        var _return = _v1.b;
        return {
          h: function() {
            var _v2 = _return.h;
            if (_v2.$ === 1) {
              return _return.h;
            } else {
              return A3($elm$core$List$foldr, F2(function(argDetails, result) {
                if (result.$ === 1) {
                  var err = result.a;
                  return $elm$core$Result$Err(err);
                } else {
                  var resultAnnotation = result.a;
                  var _v4 = argDetails.h;
                  if (_v4.$ === 1) {
                    var err = _v4.a;
                    return $elm$core$Result$Err(err);
                  } else {
                    var argAnnotation = _v4.a;
                    return $elm$core$Result$Ok({
                      jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, resultAnnotation.jQ, argAnnotation.jQ),
                      g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, resultAnnotation.g, argAnnotation.g),
                      ji: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify(argAnnotation.ji), $mdgriffith$elm_codegen$Internal$Compiler$nodify(resultAnnotation.ji))
                    });
                  }
                }
              }), _return.h, fnDetails.cF);
            }
          }(),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
            cF: A2($elm$core$List$map, function($2) {
              return $2.g7;
            }, fnDetails.cF),
            c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return.c)
          }),
          d: _Utils_ap(fnDetails.d, _return.d)
        };
      };
    };
    var $mdgriffith$elm_codegen$Elm$fn = F2(function(arg1, toExpression) {
      return $mdgriffith$elm_codegen$Elm$fnDone(A2($mdgriffith$elm_codegen$Elm$fnArg, arg1, $mdgriffith$elm_codegen$Elm$fnBuilder(toExpression)));
    });
    var $mdgriffith$elm_codegen$Elm$Annotation$getAliases = function(_v0) {
      var ann = _v0;
      return ann.jQ;
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$typed = F3(function(mod, name, args) {
      return {
        jQ: A3($elm$core$List$foldl, F2(function(ann, aliases) {
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, args),
        h: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, name)), $mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, args))),
        d: A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, args)
      };
    });
    var $mdgriffith$elm_codegen$Elm$Annotation$int = A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "Int", _List_Nil);
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function(a) {
      return { $: 10, a };
    };
    var $mdgriffith$elm_codegen$Internal$Arg$item = F2(function(_v0, _v1) {
      var itemArg = _v0;
      var arg = _v1;
      return function(index) {
        var toSequence = arg(index);
        var itemDetails = itemArg(toSequence.ba);
        var details = toSequence.dI;
        var imports = details.d;
        var newAnnotation = A2($elm$core$Result$map, function(ann) {
          return { jQ: ann.jQ, g: ann.g, ji: ann.ji };
        }, details.h);
        return {
          dI: {
            h: newAnnotation,
            d: imports,
            g7: function() {
              var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$denode(details.g7);
              switch (_v2.$) {
                case 10:
                  var listItems = _v2.a;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_Utils_ap(listItems, _List_fromArray([itemDetails.dI.g7]))));
                case 12:
                  var base = _v2.a;
                  var variantItems = _v2.b;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern, base, _Utils_ap(variantItems, _List_fromArray([itemDetails.dI.g7]))));
                default:
                  return details.g7;
              }
            }()
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(itemDetails.ba),
          jt: toSequence.jt(itemDetails.jt)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$item = $mdgriffith$elm_codegen$Internal$Arg$item;
    var $mdgriffith$elm_codegen$Elm$Annotation$list = function(inner) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "List", _List_fromArray([inner]));
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$named = F2(function(mod, name) {
      return {
        jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
        h: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), _List_Nil),
        d: function() {
          if (!mod.b) {
            return _List_Nil;
          } else {
            return _List_fromArray([mod]);
          }
        }()
      };
    });
    var $mdgriffith$elm_codegen$Elm$Annotation$record = function(fields) {
      return {
        jQ: A3($elm$core$List$foldl, F2(function(_v0, aliases) {
          var ann = _v0.b;
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, fields),
        h: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$map, function(_v1) {
          var name = _v1.a;
          var ann = _v1.b;
          return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatValue(name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(ann)));
        }, fields))),
        d: A2($elm$core$List$concatMap, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports), fields)
      };
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$string = A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "String", _List_Nil);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function(a) {
      return { $: 11, a };
    };
    var $mdgriffith$elm_codegen$Internal$Index$indexToString = function(_v0) {
      var top = _v0.b;
      var tail = _v0.c;
      return _Utils_ap(!top ? "" : "_" + $elm$core$String$fromInt(top), function() {
        if (!tail.b) {
          return "";
        } else {
          if (!tail.b.b) {
            var one = tail.a;
            return "_" + $elm$core$String$fromInt(one);
          } else {
            if (!tail.b.b.b) {
              var one = tail.a;
              var _v2 = tail.b;
              var two = _v2.a;
              return "_" + ($elm$core$String$fromInt(one) + ("_" + $elm$core$String$fromInt(two)));
            } else {
              if (!tail.b.b.b.b) {
                var one = tail.a;
                var _v3 = tail.b;
                var two = _v3.a;
                var _v4 = _v3.b;
                var three = _v4.a;
                return "_" + ($elm$core$String$fromInt(one) + ("_" + ($elm$core$String$fromInt(two) + ("_" + $elm$core$String$fromInt(three)))));
              } else {
                return "_" + A2($elm$core$String$join, "_", A2($elm$core$List$map, $elm$core$String$fromInt, tail));
              }
            }
          }
        }
      }());
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$mapNode = F2(function(fn, _v0) {
      var range = _v0.a;
      var n = _v0.b;
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, fn(n));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation = F2(function(index, ann) {
      switch (ann.$) {
        case 0:
          var str = ann.a;
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(_Utils_ap(str, $mdgriffith$elm_codegen$Internal$Index$indexToString(index)));
        case 1:
          var modName = ann.a;
          var anns = ann.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, modName, A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$mapNode($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index)), anns));
        case 2:
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
        case 3:
          var tupled = ann.a;
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$mapNode($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index)), tupled));
        case 4:
          var recordDefinition = ann.a;
          return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$protectField(index), recordDefinition));
        case 5:
          var recordName = ann.a;
          var _v3 = ann.b;
          var recordRange = _v3.a;
          var recordDefinition = _v3.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, A2($mdgriffith$elm_codegen$Internal$Compiler$mapNode, function(n) {
            return _Utils_ap(n, $mdgriffith$elm_codegen$Internal$Index$indexToString(index));
          }, recordName), A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, recordRange, A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$protectField(index), recordDefinition)));
        default:
          var one = ann.a;
          var two = ann.b;
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, A2($mdgriffith$elm_codegen$Internal$Compiler$mapNode, $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), one), A2($mdgriffith$elm_codegen$Internal$Compiler$mapNode, $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), two));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$protectField = F2(function(index, _v0) {
      var nodeRange = _v0.a;
      var _v1 = _v0.b;
      var nodedName = _v1.a;
      var nodedType = _v1.b;
      return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, nodeRange, _Utils_Tuple2(nodedName, A2($mdgriffith$elm_codegen$Internal$Compiler$mapNode, $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), nodedType)));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getInnerInference = F2(function(index, _v0) {
      var details = _v0;
      return {
        jQ: details.jQ,
        g: $elm$core$Dict$empty,
        ji: A2($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation, index, details.h)
      };
    });
    var $mdgriffith$elm_codegen$Internal$Index$getName = F2(function(desiredName, index) {
      var modName = index.a;
      var top = index.b;
      var tail = index.c;
      var scope2 = index.d;
      var check = index.e;
      var formattedName = $mdgriffith$elm_codegen$Internal$Format$formatValue(desiredName);
      if (!A2($elm$core$Set$member, formattedName, scope2)) {
        return _Utils_Tuple2(formattedName, A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, top, tail, A2($elm$core$Set$insert, formattedName, scope2), check));
      } else {
        var protectedName = _Utils_ap(formattedName, $elm$core$String$fromInt(top));
        if (!A2($elm$core$Set$member, protectedName, scope2)) {
          return _Utils_Tuple2(protectedName, A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, top + 1, tail, A2($elm$core$Set$insert, protectedName, scope2), check));
        } else {
          var protectedNameLevel2 = _Utils_ap(formattedName, $mdgriffith$elm_codegen$Internal$Index$indexToString(index));
          return _Utils_Tuple2(protectedNameLevel2, A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, top + 1, tail, A2($elm$core$Set$insert, protectedNameLevel2, scope2), check));
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Arg$varWith = F2(function(rawName, ann) {
      return function(index) {
        var imports = $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(ann);
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Index$getName, rawName, index);
        var name = _v0.a;
        var nameIndex = _v0.b;
        var annotation = $elm$core$Result$Ok(A2($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference, nameIndex, ann));
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(name))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(nameIndex),
          jt: function(_v1) {
            return {
              h: annotation,
              c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, $mdgriffith$elm_codegen$Internal$Format$sanitize(name)),
              d: imports
            };
          }
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$varWith = $mdgriffith$elm_codegen$Internal$Arg$varWith;
    var $mdgriffith$elm_codegen$Elm$Variant = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $mdgriffith$elm_codegen$Elm$variantWith = $mdgriffith$elm_codegen$Elm$Variant;
    var $author$project$Generate$Assets$assetRootFile = A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Asset"]), _List_fromArray([
      A2($mdgriffith$elm_codegen$Elm$customType, "Src", _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Src", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]))
      ])),
      A2($mdgriffith$elm_codegen$Elm$declaration, "toString", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "src", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Src")), function(src) {
        return A3($mdgriffith$elm_codegen$Elm$Case$custom, src, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Src"), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "innerSrc", $mdgriffith$elm_codegen$Elm$Annotation$string), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Src", $elm$core$Basics$identity)), $elm$core$Basics$identity)
        ]));
      })),
      A2($mdgriffith$elm_codegen$Elm$customType, "Content", _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Binary", _List_Nil),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Text", _List_Nil),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Markdown", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("title", $mdgriffith$elm_codegen$Elm$Annotation$string),
            _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("level", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("text", $mdgriffith$elm_codegen$Elm$Annotation$string)
            ]))))
          ]))
        ]))
      ]))
    ]));
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper = F2(function(last, reversedArgs) {
      makeFunctionReversedHelper:
        while (true) {
          if (!reversedArgs.b) {
            return last;
          } else {
            if (!reversedArgs.b.b) {
              var penUlt = reversedArgs.a;
              return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, penUlt), A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, last));
            } else {
              var penUlt = reversedArgs.a;
              var remain = reversedArgs.b;
              var $temp$last = A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, penUlt), A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, last)), $temp$reversedArgs = remain;
              last = $temp$last;
              reversedArgs = $temp$reversedArgs;
              continue makeFunctionReversedHelper;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$makeFunction = F2(function(result, args) {
      return A2($mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper, result, $elm$core$List$reverse(args));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper = F4(function(aliases, cache, fn, args) {
      applyTypeHelper:
        while (true) {
          switch (fn.$) {
            case 6:
              var _v1 = fn.a;
              var one = _v1.b;
              var _v2 = fn.b;
              var two = _v2.b;
              if (!args.b) {
                return $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: cache, ji: fn });
              } else {
                var top = args.a;
                var rest = args.b;
                var _v4 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, aliases, cache, one, top);
                if (!_v4.b.$) {
                  var variableCache = _v4.a;
                  var $temp$aliases = aliases, $temp$cache = variableCache, $temp$fn = two, $temp$args = rest;
                  aliases = $temp$aliases;
                  cache = $temp$cache;
                  fn = $temp$fn;
                  args = $temp$args;
                  continue applyTypeHelper;
                } else {
                  var err = _v4.b.a;
                  return $elm$core$Result$Err(_List_fromArray([err]));
                }
              }
            case 0:
              var varName = fn.a;
              if (!args.b) {
                return $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: cache, ji: fn });
              } else {
                var resultType = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(varName + "_result");
                return $elm$core$Result$Ok({
                  jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                  g: A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, varName, A2($mdgriffith$elm_codegen$Internal$Compiler$makeFunction, resultType, args), cache),
                  ji: resultType
                });
              }
            default:
              var _final = fn;
              if (!args.b) {
                return $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: cache, ji: fn });
              } else {
                return $elm$core$Result$Err(_List_fromArray([
                  A2($mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs, _final, args)
                ]));
              }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences = F3(function(expressions, annotations, inferences) {
      mergeArgInferences:
        while (true) {
          if (!expressions.b) {
            return $elm$core$Result$Ok({
              g: inferences,
              aX: $elm$core$List$reverse(annotations)
            });
          } else {
            var top = expressions.a;
            var remain = expressions.b;
            var _v1 = top.h;
            if (!_v1.$) {
              var ann = _v1.a;
              var $temp$expressions = remain, $temp$annotations = A2($elm$core$List$cons, ann.ji, annotations), $temp$inferences = A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, inferences, ann.g);
              expressions = $temp$expressions;
              annotations = $temp$annotations;
              inferences = $temp$inferences;
              continue mergeArgInferences;
            } else {
              var err = _v1.a;
              return $elm$core$Result$Err(err);
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$applyType = F3(function(index, annotation, args) {
      if (annotation.$ === 1) {
        var err = annotation.a;
        return $elm$core$Result$Err(err);
      } else {
        var fnAnnotation = annotation.a;
        if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
          var _v1 = A3($mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences, args, _List_Nil, fnAnnotation.g);
          if (!_v1.$) {
            var mergedArgs = _v1.a;
            return A4($mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper, fnAnnotation.jQ, mergedArgs.g, fnAnnotation.ji, mergedArgs.aX);
          } else {
            var err = _v1.a;
            return $elm$core$Result$Err(err);
          }
        } else {
          return $elm$core$Result$Err(_List_Nil);
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$expression = function(toExp) {
      return function(index) {
        return toExp($mdgriffith$elm_codegen$Internal$Index$dive(index));
      };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getImports = function(exp) {
      return exp.d;
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function(a) {
      return { $: 14, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$parens = function(expr) {
      switch (expr.$) {
        case 0:
          return expr;
        case 7:
          return expr;
        case 11:
          return expr;
        case 8:
          return expr;
        case 9:
          return expr;
        case 13:
          return expr;
        case 14:
          return expr;
        case 12:
          return expr;
        case 19:
          return expr;
        case 3:
          return expr;
        case 21:
          return expr;
        case 22:
          return expr;
        case 18:
          return expr;
        case 17:
          return expr;
        default:
          return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$threadHelper = F3(function(index, exps, rendered) {
      threadHelper:
        while (true) {
          if (!exps.b) {
            return $elm$core$List$reverse(rendered);
          } else {
            var toExpDetails = exps.a;
            var remain = exps.b;
            var $temp$index = $mdgriffith$elm_codegen$Internal$Index$next(index), $temp$exps = remain, $temp$rendered = A2($elm$core$List$cons, toExpDetails(index), rendered);
            index = $temp$index;
            exps = $temp$exps;
            rendered = $temp$rendered;
            continue threadHelper;
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$thread = F2(function(index, exps) {
      return A3($mdgriffith$elm_codegen$Internal$Compiler$threadHelper, index, exps, _List_Nil);
    });
    var $mdgriffith$elm_codegen$Elm$apply = F2(function(fnExp, argExpressions) {
      return $mdgriffith$elm_codegen$Internal$Compiler$expression(function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, fnExp);
        var annotationIndex = _v0.a;
        var fnDetails = _v0.b;
        var args = A2($mdgriffith$elm_codegen$Internal$Compiler$thread, annotationIndex, argExpressions);
        return {
          h: A3($mdgriffith$elm_codegen$Internal$Compiler$applyType, index, fnDetails.h, args),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$Application($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$cons, fnDetails.c, A2($elm$core$List$map, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$parens, function($2) {
            return $2.c;
          }), args)))),
          d: _Utils_ap(fnDetails.d, A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getImports, args))
        };
      });
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function(a) {
      return { $: 7, a };
    };
    var $mdgriffith$elm_codegen$Internal$Types$int = A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "Int")), _List_Nil);
    var $mdgriffith$elm_codegen$Elm$int = function(intVal) {
      return function(_v0) {
        return {
          h: $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: $mdgriffith$elm_codegen$Internal$Types$int }),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$Integer(intVal),
          d: _List_Nil
        };
      };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$DuplicateFieldInRecord = function(a) {
      return { $: 5, a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function(a) {
      return { $: 18, a };
    };
    var $mdgriffith$elm_codegen$Elm$record = function(fields) {
      return $mdgriffith$elm_codegen$Internal$Compiler$expression(function(index) {
        var unified = A3($elm$core$List$foldl, F2(function(_v4, found) {
          var unformattedFieldName = _v4.a;
          var fieldExpression = _v4.b;
          var fieldName = $mdgriffith$elm_codegen$Internal$Format$formatValue(unformattedFieldName);
          var _v5 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, found.ba, fieldExpression);
          var newIndex = _v5.a;
          var exp = _v5.b;
          return {
            aj: function() {
              if (A2($elm$core$Set$member, fieldName, found.bj)) {
                return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Internal$Compiler$DuplicateFieldInRecord(fieldName), found.aj);
              } else {
                var _v6 = exp.h;
                if (_v6.$ === 1) {
                  if (!_v6.a.b) {
                    return found.aj;
                  } else {
                    var errs = _v6.a;
                    return _Utils_ap(errs, found.aj);
                  }
                } else {
                  return found.aj;
                }
              }
            }(),
            ak: function() {
              var _v7 = exp.h;
              if (_v7.$ === 1) {
                return found.ak;
              } else {
                var ann = _v7.a;
                return A2($elm$core$List$cons, _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Format$formatValue(fieldName), ann), found.ak);
              }
            }(),
            a7: A2($elm$core$List$cons, _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(exp.c)), found.a7),
            d: _Utils_ap(exp.d, found.d),
            ba: newIndex,
            bj: A2($elm$core$Set$insert, fieldName, found.bj)
          };
        }), { aj: _List_Nil, ak: _List_Nil, a7: _List_Nil, d: _List_Nil, ba: index, bj: $elm$core$Set$empty }, fields);
        return {
          h: function() {
            var _v0 = unified.aj;
            if (!_v0.b) {
              return $elm$core$Result$Ok({
                jQ: A3($elm$core$List$foldl, F2(function(_v1, gathered) {
                  var ann = _v1.b;
                  return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, ann.jQ, gathered);
                }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, unified.ak),
                g: A3($elm$core$List$foldl, F2(function(_v2, gathered) {
                  var ann = _v2.b;
                  return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, ann.g, gathered);
                }), $elm$core$Dict$empty, unified.ak),
                ji: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$map, function(_v3) {
                  var name = _v3.a;
                  var ann = _v3.b;
                  return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(name), $mdgriffith$elm_codegen$Internal$Compiler$nodify(ann.ji));
                }, $elm$core$List$reverse(unified.ak))))
              });
            } else {
              var errs = _v0;
              return $elm$core$Result$Err(errs);
            }
          }(),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll($elm$core$List$reverse(unified.a7))),
          d: unified.d
        };
      });
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function(a) {
      return { $: 11, a };
    };
    var $mdgriffith$elm_codegen$Internal$Types$string = A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "String")), _List_Nil);
    var $mdgriffith$elm_codegen$Elm$string = function(literal) {
      return function(_v0) {
        return {
          h: $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: $mdgriffith$elm_codegen$Internal$Types$string }),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$Literal(literal),
          d: _List_Nil
        };
      };
    };
    var $author$project$Generate$Assets$encodeHeader = function(_v0) {
      var level = _v0.a;
      var text = _v0.b;
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("level", $mdgriffith$elm_codegen$Elm$int(level)),
        _Utils_Tuple2("text", $mdgriffith$elm_codegen$Elm$string(text))
      ]));
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function(a) {
      return { $: 19, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$MismatchedList = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyHelper = F2(function(exps, existing) {
      unifyHelper:
        while (true) {
          if (!exps.b) {
            return $elm$core$Result$Ok(existing);
          } else {
            var top = exps.a;
            var remain = exps.b;
            var _v1 = top.h;
            if (!_v1.$) {
              var ann = _v1.a;
              var _v2 = A4($mdgriffith$elm_codegen$Internal$Compiler$unifiable, ann.jQ, ann.g, ann.ji, existing.ji);
              if (_v2.b.$ === 1) {
                return $elm$core$Result$Err(_List_fromArray([
                  A2($mdgriffith$elm_codegen$Internal$Compiler$MismatchedList, ann.ji, existing.ji)
                ]));
              } else {
                var cache = _v2.a;
                var _new = _v2.b.a;
                var $temp$exps = remain, $temp$existing = {
                  jQ: existing.jQ,
                  g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, existing.g, cache),
                  ji: _new
                };
                exps = $temp$exps;
                existing = $temp$existing;
                continue unifyHelper;
              }
            } else {
              var err = _v1.a;
              return $elm$core$Result$Err(err);
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$unify = function(exps) {
      if (!exps.b) {
        return $elm$core$Result$Ok({
          jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
          g: $elm$core$Dict$empty,
          ji: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType("a")
        });
      } else {
        var top = exps.a;
        var remain = exps.b;
        var _v1 = top.h;
        if (!_v1.$) {
          var ann = _v1.a;
          return A2($mdgriffith$elm_codegen$Internal$Compiler$unifyHelper, remain, ann);
        } else {
          var err = _v1.a;
          return $elm$core$Result$Err(err);
        }
      }
    };
    var $mdgriffith$elm_codegen$Elm$list = function(exprs) {
      return $mdgriffith$elm_codegen$Internal$Compiler$expression(function(index) {
        var exprDetails = A2($mdgriffith$elm_codegen$Internal$Compiler$thread, index, exprs);
        return {
          h: A2($elm$core$Result$map, function(inner) {
            return {
              jQ: inner.jQ,
              g: inner.g,
              ji: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(_List_Nil, "List")), _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify(inner.ji)
              ]))
            };
          }, $mdgriffith$elm_codegen$Internal$Compiler$unify(exprDetails)),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(A2($elm$core$List$map, A2($elm$core$Basics$composeR, function($2) {
            return $2.c;
          }, $mdgriffith$elm_codegen$Internal$Compiler$nodify), exprDetails)),
          d: A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getImports, exprDetails)
        };
      });
    };
    var $mdgriffith$elm_codegen$Internal$Index$protectTypeName = F2(function(base, index) {
      var tail = index.c;
      if (!tail.b) {
        return $mdgriffith$elm_codegen$Internal$Format$formatValue(base);
      } else {
        return $mdgriffith$elm_codegen$Internal$Format$formatValue(_Utils_ap(base, $mdgriffith$elm_codegen$Internal$Index$indexToString(index)));
      }
    });
    var $mdgriffith$elm_codegen$Elm$value = function(details) {
      return function(index) {
        var importFrom = A2($mdgriffith$elm_codegen$Internal$Index$getImport, index, details.i);
        return {
          h: function() {
            var _v0 = details.h;
            if (_v0.$ === 1) {
              var typename = A2($mdgriffith$elm_codegen$Internal$Index$protectTypeName, details.j, index);
              return $elm$core$Result$Ok({
                jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                g: $elm$core$Dict$empty,
                ji: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(typename)
              });
            } else {
              var ann = _v0.a;
              return $elm$core$Result$Ok(A2($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference, index, ann));
            }
          }(),
          c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, importFrom, $mdgriffith$elm_codegen$Internal$Format$sanitize(details.j)),
          d: function() {
            var _v1 = details.h;
            if (_v1.$ === 1) {
              if (!importFrom.b) {
                return _List_Nil;
              } else {
                return _List_fromArray([importFrom]);
              }
            } else {
              var ann = _v1.a;
              if (!importFrom.b) {
                return $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(ann);
              } else {
                return A2($elm$core$List$cons, importFrom, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(ann));
              }
            }
          }()
        };
      };
    };
    var $author$project$Generate$Assets$encodeContent = function(content) {
      switch (content.$) {
        case 0:
          return $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Content")),
            i: _List_fromArray(["Asset"]),
            j: "Binary"
          });
        case 1:
          return $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Content")),
            i: _List_fromArray(["Asset"]),
            j: "Text"
          });
        default:
          var title = content.a.mR;
          var headers = content.a.eS;
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Content")),
            i: _List_fromArray(["Asset"]),
            j: "Markdown"
          }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
              _Utils_Tuple2("title", $mdgriffith$elm_codegen$Elm$string(title)),
              _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Assets$encodeHeader, headers)))
            ]))
          ]));
      }
    };
    var $author$project$Generate$Assets$encodeFileInfo = function(info) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(info.j)),
        _Utils_Tuple2("crumbs", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $mdgriffith$elm_codegen$Elm$string, info.ax))),
        _Utils_Tuple2("pathOnServer", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Src")),
          i: _List_fromArray(["Asset"]),
          j: "Src"
        }), _List_fromArray([
          $mdgriffith$elm_codegen$Elm$string(info.aB)
        ]))),
        _Utils_Tuple2("content", $author$project$Generate$Assets$encodeContent(info.aK))
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Exposed = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Group = function(a) {
      return { $: 4, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$exposeConstructor = function(decl) {
      switch (decl.$) {
        case 1:
          return decl;
        case 3:
          return decl;
        case 2:
          return decl;
        case 0:
          var details = decl.a;
          return $mdgriffith$elm_codegen$Internal$Compiler$Declaration(_Utils_update(details, {
            eb: function() {
              var _v1 = details.eb;
              if (!_v1.$) {
                return $mdgriffith$elm_codegen$Internal$Compiler$Exposed({ aN: true });
              } else {
                var exposed = _v1.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$Exposed(_Utils_update(exposed, { aN: true }));
              }
            }()
          }));
        default:
          var group = decl.a;
          return $mdgriffith$elm_codegen$Internal$Compiler$Group(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$exposeConstructor, group));
      }
    };
    var $mdgriffith$elm_codegen$Elm$exposeConstructor = $mdgriffith$elm_codegen$Internal$Compiler$exposeConstructor;
    var $author$project$Generate$Assets$capitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toUpper(top), remain);
    };
    var $author$project$Generate$Assets$decapitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toLower(top), remain);
    };
    var $author$project$Generate$Assets$toCamelCase = function(str) {
      var parts = A2($elm$core$String$split, "-", str);
      if (!parts.b) {
        return "";
      } else {
        var top = parts.a;
        var tail = parts.b;
        return _Utils_ap($author$project$Generate$Assets$decapitalize(top), A2($elm$core$String$join, "", A2($elm$core$List$map, $author$project$Generate$Assets$capitalize, tail)));
      }
    };
    var $author$project$Generate$Assets$declarationName = function(file) {
      var _v0 = file.ax;
      if (!_v0.b) {
        return $author$project$Generate$Assets$toCamelCase(file.j);
      } else {
        return A2($elm$core$String$join, "_", A2($elm$core$List$map, $author$project$Generate$Assets$toCamelCase, file.ax)) + ("_" + $author$project$Generate$Assets$toCamelCase(file.j));
      }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$expose = function(decl) {
      switch (decl.$) {
        case 1:
          return decl;
        case 3:
          return decl;
        case 2:
          return decl;
        case 0:
          var details = decl.a;
          return $mdgriffith$elm_codegen$Internal$Compiler$Declaration(_Utils_update(details, {
            eb: function() {
              var _v1 = details.eb;
              if (_v1.$ === 1) {
                return details.eb;
              } else {
                return $mdgriffith$elm_codegen$Internal$Compiler$Exposed({ aN: false });
              }
            }()
          }));
        default:
          var group = decl.a;
          return $mdgriffith$elm_codegen$Internal$Compiler$Group(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$expose, group));
      }
    };
    var $mdgriffith$elm_codegen$Elm$expose = $mdgriffith$elm_codegen$Internal$Compiler$expose;
    var $author$project$Generate$Assets$toDirectoryEntry = function(file) {
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, $author$project$Generate$Assets$declarationName(file), A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Src"), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["Asset"]),
        j: "Src"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$string(file.aB)
      ])))));
    };
    var $author$project$Generate$Assets$Binary = { $: 0 };
    var $author$project$Generate$Assets$Markdown = function(a) {
      return { $: 2, a };
    };
    var $author$project$Generate$Assets$Text = { $: 1 };
    var $elm$core$String$dropRight = F2(function(n, string) {
      return n < 1 ? string : A3($elm$core$String$slice, 0, -n, string);
    });
    var $author$project$Path$extension = function(str) {
      var ext = A2($elm$core$String$startsWith, ".", str) ? "" : A2($elm$core$Maybe$withDefault, "", $elm$core$List$head($elm$core$List$reverse(A2($elm$core$String$split, ".", str))));
      var base = A2($elm$core$String$dropRight, $elm$core$String$length(ext) + 1, str);
      return _Utils_Tuple2(base, ext);
    };
    var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(function(_function, acc, list) {
      foldl:
        while (true) {
          if (!list.b) {
            return acc;
          } else {
            var block = list.a;
            var remainingBlocks = list.b;
            switch (block.$) {
              case 0:
                var html = block.a;
                if (!html.$) {
                  var children = html.c;
                  var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(children, remainingBlocks);
                  _function = $temp$function;
                  acc = $temp$acc;
                  list = $temp$list;
                  continue foldl;
                } else {
                  var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                  _function = $temp$function;
                  acc = $temp$acc;
                  list = $temp$list;
                  continue foldl;
                }
              case 1:
                var blocks = block.b;
                var childBlocks = A2($elm$core$List$concatMap, function(_v3) {
                  var children2 = _v3.b;
                  return children2;
                }, blocks);
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(childBlocks, remainingBlocks);
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 2:
                var blocks = block.c;
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap($elm$core$List$concat(blocks), remainingBlocks);
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 3:
                var blocks = block.a;
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = _Utils_ap(blocks, remainingBlocks);
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 4:
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 5:
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 6:
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              case 7:
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              default:
                var $temp$function = _function, $temp$acc = A2(_function, block, acc), $temp$list = remainingBlocks;
                _function = $temp$function;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function(block) {
      switch (block.$) {
        case 5:
          var inlines = block.a;
          return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
        case 0:
          var html = block.a;
          if (!html.$) {
            var blocks = html.c;
            return A3($dillonkearns$elm_markdown$Markdown$Block$foldl, F2(function(nestedBlock, soFar) {
              return _Utils_ap(soFar, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
            }), "", blocks);
          } else {
            return "";
          }
        case 1:
          var items = block.b;
          return A2($elm$core$String$join, `
`, A2($elm$core$List$map, function(_v4) {
            var blocks2 = _v4.b;
            return A2($elm$core$String$join, `
`, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks2));
          }, items));
        case 2:
          var items = block.c;
          return A2($elm$core$String$join, `
`, A2($elm$core$List$map, function(blocks2) {
            return A2($elm$core$String$join, `
`, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks2));
          }, items));
        case 3:
          var blocks = block.a;
          return A2($elm$core$String$join, `
`, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
        case 4:
          var inlines = block.b;
          return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
        case 6:
          var header = block.a;
          var rows = block.b;
          return A2($elm$core$String$join, `
`, $elm$core$List$concat(_List_fromArray([
            A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText, A2($elm$core$List$map, function($2) {
              return $2.fz;
            }, header)),
            $elm$core$List$concat(A2($elm$core$List$map, $elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText), rows))
          ])));
        case 7:
          var body = block.a.j8;
          return body;
        default:
          return "";
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function(inlines) {
      return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, "", inlines);
    };
    var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(function(inline, text) {
      switch (inline.$) {
        case 7:
          var str = inline.a;
          return _Utils_ap(text, str);
        case 8:
          return text + " ";
        case 6:
          var str = inline.a;
          return _Utils_ap(text, str);
        case 1:
          var inlines = inline.c;
          return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
        case 2:
          var inlines = inline.c;
          return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
        case 0:
          var html = inline.a;
          if (!html.$) {
            var blocks = html.c;
            return A3($dillonkearns$elm_markdown$Markdown$Block$foldl, F2(function(block, soFar) {
              return _Utils_ap(soFar, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
            }), text, blocks);
          } else {
            return text;
          }
        case 4:
          var inlines = inline.a;
          return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
        case 3:
          var inlines = inline.a;
          return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
        default:
          var inlines = inline.a;
          return _Utils_ap(text, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt = function(headingLevel) {
      switch (headingLevel) {
        case 0:
          return 1;
        case 1:
          return 2;
        case 2:
          return 3;
        case 3:
          return 4;
        case 4:
          return 5;
        default:
          return 6;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = { $: 10 };
    var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function(a) {
      return { $: 3, a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function(a) {
      return { $: 11, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function(a) {
      return { $: 4, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function(a) {
      return { $: 7, a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function(a) {
      return { $: 6, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = 2;
    var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function(a) {
      return { $: 3, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(function(a, b) {
      return { $: 6, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = { $: 0 };
    var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(function(a, b) {
      return { $: 4, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function(a) {
      return { $: 2, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function(a) {
      return { $: 0, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(function(a, b) {
      return { $: 3, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function(a) {
      return { $: 0, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(function(a, b, c) {
      return { $: 2, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = 1;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function(a) {
      return { $: 6, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function(a) {
      return { $: 2, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(function(a, b, c) {
      return { $: 1, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$NoTask = 0;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3(function(a, b, c) {
      return { $: 2, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6(function(a, b, c, d, e, f) {
      return { $: 4, a, b, c, d, e, f };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function(a) {
      return { $: 12, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function(a) {
      return { $: 2, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Strong = function(a) {
      return { $: 4, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(function(a, b) {
      return { $: 6, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function(a) {
      return { $: 8, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$Block$Text = function(a) {
      return { $: 7, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = { $: 7 };
    var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4(function(a, b, c, d) {
      return { $: 3, a, b, c, d };
    });
    var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(function(state, linkRef) {
      return {
        a: A2($elm$core$List$cons, linkRef, state.a),
        b: state.b
      };
    });
    var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function(_char) {
      switch (_char) {
        case " ":
          return true;
        case "\t":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2($elm$parser$Parser$Advanced$Token, "\r", $elm$parser$Parser$Expecting("a carriage return"));
    var $dillonkearns$elm_markdown$Parser$Token$newline = A2($elm$parser$Parser$Advanced$Token, `
`, $elm$parser$Parser$Expecting("a newline"));
    var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
        $elm$parser$Parser$Advanced$succeed(0)
      ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2($elm$parser$Parser$Advanced$map, function(_v0) {
      return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
    }, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $dillonkearns$elm_markdown$Whitespace$lineEnd));
    var $dillonkearns$elm_markdown$Parser$Token$space = A2($elm$parser$Parser$Advanced$Token, " ", $elm$parser$Parser$Expecting("a space"));
    var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray([
      $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, ">", $elm$parser$Parser$Expecting(">"))),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, ">", $elm$parser$Parser$Expecting(" >"))),
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, " >", $elm$parser$Parser$Expecting("  >"))),
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "  >", $elm$parser$Parser$Expecting("   >")))
      ])))
    ]);
    var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function(_char) {
      switch (_char) {
        case `
`:
          return true;
        case "\r":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
    var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("the end of the input"));
    var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
    var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote), $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
      $elm$parser$Parser$Advanced$succeed(0)
    ]))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function(problem) {
      switch (problem.$) {
        case 0:
          var string = problem.a;
          return "Expecting " + string;
        case 1:
          return "Expecting int";
        case 2:
          return "Expecting hex";
        case 3:
          return "Expecting octal";
        case 4:
          return "Expecting binary";
        case 5:
          return "Expecting float";
        case 6:
          return "Expecting number";
        case 7:
          return "Expecting variable";
        case 8:
          var string = problem.a;
          return "Expecting symbol " + string;
        case 9:
          var string = problem.a;
          return "Expecting keyword " + string;
        case 10:
          return "Expecting keyword end";
        case 11:
          return "Unexpected char";
        case 12:
          var problemDescription = problem.a;
          return problemDescription;
        default:
          return "Bad repeat";
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function(deadEnd) {
      return "Problem at row " + ($elm$core$String$fromInt(deadEnd.mu) + (`
` + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.hk)));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function(deadEnds) {
      return A2($elm$core$String$join, `
`, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph = function(block) {
      endWithOpenBlockOrParagraph:
        while (true) {
          switch (block.$) {
            case 1:
              var str = block.a;
              return !A2($elm$core$String$endsWith, str, `
`);
            case 12:
              var blocks = block.a;
              if (blocks.b) {
                var last = blocks.a;
                var $temp$block = last;
                block = $temp$block;
                continue endWithOpenBlockOrParagraph;
              } else {
                return false;
              }
            case 4:
              var blockslist = block.e;
              if (blockslist.b) {
                var blocks = blockslist.a;
                if (blocks.b) {
                  var last = blocks.a;
                  var $temp$block = last;
                  block = $temp$block;
                  continue endWithOpenBlockOrParagraph;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            case 0:
              return true;
            default:
              return false;
          }
        }
    };
    var $dillonkearns$elm_markdown$HtmlParser$Cdata = function(a) {
      return { $: 3, a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$Element = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $dillonkearns$elm_markdown$HtmlParser$Text = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting("at least 1 tag name character");
    var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function(c) {
      switch (c) {
        case " ":
          return false;
        case "\r":
          return false;
        case `
`:
          return false;
        case "\t":
          return false;
        case "/":
          return false;
        case "<":
          return false;
        case ">":
          return false;
        case '"':
          return false;
        case "'":
          return false;
        case "=":
          return false;
        default:
          return true;
      }
    };
    var $dillonkearns$elm_markdown$HtmlParser$tagName = A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(name, _v0) {
      return $elm$core$String$toLower(name);
    }), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
    var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
    var $dillonkearns$elm_markdown$HtmlParser$symbol = function(str) {
      return $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, str, $elm$parser$Parser$ExpectingSymbol(str)));
    };
    var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(_List_fromArray([
      _Utils_Tuple2("amp", "&"),
      _Utils_Tuple2("lt", "<"),
      _Utils_Tuple2("gt", ">"),
      _Utils_Tuple2("apos", "'"),
      _Utils_Tuple2("quot", '"')
    ]));
    var $elm$core$Char$fromCode = _Char_fromCode;
    var $elm$core$Result$fromMaybe = F2(function(err, maybe) {
      if (!maybe.$) {
        var v = maybe.a;
        return $elm$core$Result$Ok(v);
      } else {
        return $elm$core$Result$Err(err);
      }
    });
    var $elm$core$Basics$pow = _Basics_pow;
    var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(function(position, chars, accumulated) {
      fromStringHelp:
        while (true) {
          if (!chars.b) {
            return $elm$core$Result$Ok(accumulated);
          } else {
            var _char = chars.a;
            var rest = chars.b;
            switch (_char) {
              case "0":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated;
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "1":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "2":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 2 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "3":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 3 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "4":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 4 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "5":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 5 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "6":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 6 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "7":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 7 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "8":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 8 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "9":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 9 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "a":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 10 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "b":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 11 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "c":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 12 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "d":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 13 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "e":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 14 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              case "f":
                var $temp$position = position - 1, $temp$chars = rest, $temp$accumulated = accumulated + 15 * A2($elm$core$Basics$pow, 16, position);
                position = $temp$position;
                chars = $temp$chars;
                accumulated = $temp$accumulated;
                continue fromStringHelp;
              default:
                var nonHex = _char;
                return $elm$core$Result$Err($elm$core$String$fromChar(nonHex) + " is not a valid hexadecimal character.");
            }
          }
        }
    });
    var $elm$core$List$tail = function(list) {
      if (list.b) {
        var x2 = list.a;
        var xs = list.b;
        return $elm$core$Maybe$Just(xs);
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $elm$core$String$foldr = _String_foldr;
    var $elm$core$String$toList = function(string) {
      return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
    };
    var $rtfeldman$elm_hex$Hex$fromString = function(str) {
      if ($elm$core$String$isEmpty(str)) {
        return $elm$core$Result$Err("Empty strings are not valid hexadecimal strings.");
      } else {
        var result = function() {
          if (A2($elm$core$String$startsWith, "-", str)) {
            var list = A2($elm$core$Maybe$withDefault, _List_Nil, $elm$core$List$tail($elm$core$String$toList(str)));
            return A2($elm$core$Result$map, $elm$core$Basics$negate, A3($rtfeldman$elm_hex$Hex$fromStringHelp, $elm$core$List$length(list) - 1, list, 0));
          } else {
            return A3($rtfeldman$elm_hex$Hex$fromStringHelp, $elm$core$String$length(str) - 1, $elm$core$String$toList(str), 0);
          }
        }();
        var formatError = function(err) {
          return A2($elm$core$String$join, " ", _List_fromArray(['"' + (str + '"'), "is not a valid hexadecimal string because", err]));
        };
        return A2($elm$core$Result$mapError, formatError, result);
      }
    };
    var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function(s) {
      return A2($elm$core$String$startsWith, "#x", s) ? A2($elm$core$Result$mapError, $elm$parser$Parser$Problem, A2($elm$core$Result$map, $elm$core$Char$fromCode, $rtfeldman$elm_hex$Hex$fromString(A2($elm$core$String$dropLeft, 2, s)))) : A2($elm$core$String$startsWith, "#", s) ? A2($elm$core$Result$fromMaybe, $elm$parser$Parser$Problem("Invalid escaped character: " + s), A2($elm$core$Maybe$map, $elm$core$Char$fromCode, $elm$core$String$toInt(A2($elm$core$String$dropLeft, 1, s)))) : A2($elm$core$Result$fromMaybe, $elm$parser$Parser$Problem('No entity named "&' + (s + ';" found.')), A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities));
    };
    var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function(end_) {
      var process2 = function(entityStr) {
        var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
        if (!_v0.$) {
          var c = _v0.a;
          return $elm$parser$Parser$Advanced$succeed(c);
        } else {
          var e = _v0.a;
          return $elm$parser$Parser$Advanced$problem(e);
        }
      };
      var isEntityChar = function(c) {
        return !_Utils_eq(c, end_) && c !== ";";
      };
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("&")), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$andThen, process2, $elm$parser$Parser$Advanced$getChompedString(A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, isEntityChar, $elm$parser$Parser$Expecting("an entity character")), $elm$parser$Parser$Advanced$chompWhile(isEntityChar)))), $dillonkearns$elm_markdown$HtmlParser$symbol(";")));
    };
    var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(function(closingChar, predicate, accum) {
      return A2($elm$parser$Parser$Advanced$andThen, function(soFar) {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
          A2($elm$parser$Parser$Advanced$map, function(escaped) {
            return $elm$parser$Parser$Advanced$Loop(_Utils_ap(accum, _Utils_ap(soFar, $elm$core$String$fromChar(escaped))));
          }, $dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
          $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(_Utils_ap(accum, soFar)))
        ]));
      }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompWhile(predicate)));
    });
    var $dillonkearns$elm_markdown$HtmlParser$textString = function(closingChar) {
      var predicate = function(c) {
        return !_Utils_eq(c, closingChar) && c !== "&";
      };
      return A2($elm$parser$Parser$Advanced$loop, "", A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
    };
    var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol('"')), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$textString('"'), $dillonkearns$elm_markdown$HtmlParser$symbol('"'))),
      A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("'")), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$textString("'"), $dillonkearns$elm_markdown$HtmlParser$symbol("'")))
    ]));
    var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(function(_new, mValue) {
      if (!mValue.$) {
        var v = mValue.a;
        return $elm$core$Maybe$Just(v);
      } else {
        return $elm$core$Maybe$Just(_new);
      }
    });
    var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function(c) {
      switch (c) {
        case " ":
          return true;
        case "\r":
          return true;
        case `
`:
          return true;
        case "\t":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
    var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function(attrs) {
      var process2 = F2(function(name, value) {
        return $elm$parser$Parser$Advanced$Loop(A3($elm$core$Dict$update, $elm$core$String$toLower(name), $dillonkearns$elm_markdown$HtmlParser$keepOldest(value), attrs));
      });
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(process2), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace), $dillonkearns$elm_markdown$HtmlParser$symbol("=")), $dillonkearns$elm_markdown$HtmlParser$whiteSpace)), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
        $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(attrs))
      ]));
    };
    var $dillonkearns$elm_markdown$HtmlParser$attributes = A2($elm$parser$Parser$Advanced$map, A2($elm$core$Dict$foldl, F3(function(key, value, accum) {
      return A2($elm$core$List$cons, { j: key, jt: value }, accum);
    }), _List_Nil), A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
    var $elm$parser$Parser$Advanced$chompUntilEndOr = function(str) {
      return function(s) {
        var _v0 = A5(_Parser_findSubString, str, s.f, s.mu, s.di, s.iv);
        var newOffset = _v0.a;
        var newRow = _v0.b;
        var newCol = _v0.c;
        var adjustedOffset = newOffset < 0 ? $elm$core$String$length(s.iv) : newOffset;
        return A3($elm$parser$Parser$Advanced$Good, _Utils_cmp(s.f, adjustedOffset) < 0, 0, { di: newCol, m: s.m, q: s.q, f: adjustedOffset, mu: newRow, iv: s.iv });
      };
    };
    var $dillonkearns$elm_markdown$HtmlParser$cdata = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("<![CDATA[")), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("]]>")), $dillonkearns$elm_markdown$HtmlParser$symbol("]]>")));
    var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(function(options, accum) {
      return A2($elm$parser$Parser$Advanced$map, function(f) {
        return f(accum);
      }, $elm$parser$Parser$Advanced$oneOf(options));
    });
    var $dillonkearns$elm_markdown$HtmlParser$fail = function(str) {
      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem(str));
    };
    var $dillonkearns$elm_markdown$HtmlParser$closingTag = function(startTagName) {
      var closingTagName = A2($elm$parser$Parser$Advanced$andThen, function(endTagName) {
        return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(0) : $dillonkearns$elm_markdown$HtmlParser$fail("tag name mismatch: " + (startTagName + (" and " + endTagName)));
      }, $dillonkearns$elm_markdown$HtmlParser$tagName);
      return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$symbol("</"), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), closingTagName), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), $dillonkearns$elm_markdown$HtmlParser$symbol(">"));
    };
    var $dillonkearns$elm_markdown$HtmlParser$Comment = function(a) {
      return { $: 2, a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$toToken = function(str) {
      return A2($elm$parser$Parser$Advanced$Token, str, $elm$parser$Parser$Expecting(str));
    };
    var $dillonkearns$elm_markdown$HtmlParser$comment = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment), $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$HtmlParser$toToken("<!--"))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("-->")), $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$HtmlParser$toToken("-->"))));
    var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(function(a, b) {
      return { $: 5, a, b };
    });
    var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting("at least 1 uppercase character");
    var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter), $elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
    var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$isWhitespace, $elm$parser$Parser$Expecting("at least one whitespace")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
    var $dillonkearns$elm_markdown$HtmlParser$docType = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration), $dillonkearns$elm_markdown$HtmlParser$symbol("<!")), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr(">")), $dillonkearns$elm_markdown$HtmlParser$symbol(">")));
    var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function(a) {
      return { $: 4, a };
    };
    var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction), $dillonkearns$elm_markdown$HtmlParser$symbol("<?")), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntilEndOr("?>")), $dillonkearns$elm_markdown$HtmlParser$symbol("?>")));
    var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function(c) {
      switch (c) {
        case "<":
          return false;
        case "&":
          return false;
        default:
          return true;
      }
    };
    var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray([
      A2($elm$parser$Parser$Advanced$map, function(_v0) {
        return $elm$parser$Parser$Advanced$Loop(0);
      }, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar, $elm$parser$Parser$Expecting("is not & or <")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
      A2($elm$parser$Parser$Advanced$map, function(_v1) {
        return $elm$parser$Parser$Advanced$Loop(0);
      }, $dillonkearns$elm_markdown$HtmlParser$escapedChar("<")),
      $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(0))
    ]);
    var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function(_v0) {
      return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
    };
    var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(A2($elm$parser$Parser$Advanced$loop, 0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
    var $dillonkearns$elm_markdown$HtmlParser$children = function(startTagName) {
      return A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$HtmlParser$childrenStep($dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
    };
    var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function(startTagName) {
      return _List_fromArray([
        A2($elm$parser$Parser$Advanced$map, F2(function(_v1, accum) {
          return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(accum));
        }), $dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
        A2($elm$parser$Parser$Advanced$andThen, function(text) {
          return $elm$core$String$isEmpty(text) ? A2($elm$parser$Parser$Advanced$map, F2(function(_v2, accum) {
            return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(accum));
          }), $dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(function(accum) {
            return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, $dillonkearns$elm_markdown$HtmlParser$Text(text), accum));
          });
        }, $dillonkearns$elm_markdown$HtmlParser$textNodeString),
        A2($elm$parser$Parser$Advanced$map, F2(function(_new, accum) {
          return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, _new, accum));
        }), $dillonkearns$elm_markdown$HtmlParser$cyclic$html())
      ]);
    };
    var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function(startTagName) {
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Element(startTagName)), $dillonkearns$elm_markdown$HtmlParser$whiteSpace), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$map, function(_v0) {
          return _List_Nil;
        }, $dillonkearns$elm_markdown$HtmlParser$symbol("/>")),
        A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol(">")), $dillonkearns$elm_markdown$HtmlParser$children(startTagName))
      ])));
    };
    function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
        $dillonkearns$elm_markdown$HtmlParser$processingInstruction,
        $dillonkearns$elm_markdown$HtmlParser$comment,
        $dillonkearns$elm_markdown$HtmlParser$docType,
        $dillonkearns$elm_markdown$HtmlParser$cyclic$element()
      ]));
    }
    function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$HtmlParser$symbol("<")), A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
    }
    var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
    $dillonkearns$elm_markdown$HtmlParser$cyclic$html = function() {
      return $dillonkearns$elm_markdown$HtmlParser$html;
    };
    var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
    $dillonkearns$elm_markdown$HtmlParser$cyclic$element = function() {
      return $dillonkearns$elm_markdown$HtmlParser$element;
    };
    var $dillonkearns$elm_markdown$Parser$Token$tab = A2($elm$parser$Parser$Advanced$Token, "\t", $elm$parser$Parser$Expecting("a tab"));
    var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "   ", $elm$parser$Parser$ExpectingSymbol("Indentation"))),
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, " \t", $elm$parser$Parser$ExpectingSymbol("Indentation"))),
        $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "  \t", $elm$parser$Parser$ExpectingSymbol("Indentation")))
      ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock), $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function(_int) {
      return !A2($elm$core$Basics$modBy, 2, _int);
    };
    var $dillonkearns$elm_markdown$Markdown$Block$Loose = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$Tight = 1;
    var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function(isTight) {
      return isTight ? 1 : 0;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(function(joinWith, string1, string2) {
      var _v0 = _Utils_Tuple2(string1, string2);
      if (_v0.a === "") {
        return string2;
      } else {
        if (_v0.b === "") {
          return string1;
        } else {
          return _Utils_ap(string1, _Utils_ap(joinWith, string2));
        }
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(function(string1, string2) {
      return string1 + (`
` + string2);
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(rawLine, _v0) {
      return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
    }), $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
    var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4(function(order, intended, marker, body) {
      return { j8: body, lr: intended, lE: marker, l3: order };
    });
    var $elm$parser$Parser$Advanced$getCol = function(s) {
      return A3($elm$parser$Parser$Advanced$Good, false, s.di, s);
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(function(bodyStartPos) {
      return _Utils_Tuple2(bodyStartPos, "");
    }), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function(condition) {
      return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, condition, $elm$parser$Parser$Problem("Expected one or more character")), $elm$parser$Parser$Advanced$chompWhile(condition));
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(F2(function(bodyStartPos, item) {
      return _Utils_Tuple2(bodyStartPos, item);
    })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$getCol), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = 0;
    var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = 1;
    var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2($elm$parser$Parser$Advanced$Token, ")", $elm$parser$Parser$Expecting("a `)`"));
    var $dillonkearns$elm_markdown$Parser$Token$dot = A2($elm$parser$Parser$Advanced$Token, ".", $elm$parser$Parser$Expecting("a `.`"));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
    ]));
    var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(str, _v0) {
      return A2($elm$core$Maybe$withDefault, 0, $elm$core$String$toInt(str));
    }), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
    var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2($elm$parser$Parser$Advanced$andThen, function(parsed) {
      return parsed <= 999999999 ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Starting numbers must be nine digits or less."));
    }, $dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
    var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
    var $elm$core$List$repeatHelp = F3(function(result, n, value) {
      repeatHelp:
        while (true) {
          if (n <= 0) {
            return result;
          } else {
            var $temp$result = A2($elm$core$List$cons, value, result), $temp$n = n - 1, $temp$value = value;
            result = $temp$result;
            n = $temp$n;
            value = $temp$value;
            continue repeatHelp;
          }
        }
    });
    var $elm$core$List$repeat = F2(function(n, value) {
      return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
    });
    var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(function(n, parser) {
      var _v0 = A2($elm$core$List$repeat, n, parser);
      if (!_v0.b) {
        return $elm$parser$Parser$Advanced$succeed(0);
      } else {
        var firstParser = _v0.a;
        var remainingParsers = _v0.b;
        return A3($elm$core$List$foldl, F2(function(p, parsers) {
          return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
            $elm$parser$Parser$Advanced$succeed(0)
          ]));
        }), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
          firstParser,
          $elm$parser$Parser$Advanced$succeed(0)
        ])), remainingParsers);
      }
    });
    var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function(parsed) {
      if (parsed === 1) {
        return $elm$parser$Parser$Advanced$succeed(parsed);
      } else {
        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Lists inside a paragraph or after a paragraph without a blank line must start with 1"));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function(previousWasBody) {
      return previousWasBody ? A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)), $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)), $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
    };
    var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function(previousWasBody) {
      var parseSubsequentItem = F5(function(start, order, marker, mid, _v0) {
        var end = _v0.a;
        var body = _v0.b;
        return end - mid <= 4 ? A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, mid - start + 1, marker, _Utils_ap(A2($elm$core$String$repeat, end - mid - 1, " "), body));
      });
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(parseSubsequentItem), $elm$parser$Parser$Advanced$getCol), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)), $elm$parser$Parser$Advanced$getCol), previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function(previousWasBody) {
      return A2($elm$parser$Parser$Advanced$map, function(item) {
        return A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, true, item.lr, item.lE, item.l3, _List_Nil, item.j8);
      }, $dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function(a) {
      return { $: 2, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = { $: 1 };
    var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(function(a, b, c) {
      return { $: 4, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(function(a, b, c) {
      return { $: 3, a, b, c };
    });
    var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function(a) {
      return { $: 7, a };
    };
    var $dillonkearns$elm_markdown$Markdown$Inline$Text = function(a) {
      return { $: 0, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function(_v0) {
      var match = _v0;
      var _v1 = match.ji;
      switch (_v1.$) {
        case 0:
          return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.iW);
        case 1:
          return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
        case 2:
          return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.iW);
        case 3:
          var _v2 = _v1.a;
          var text = _v2.a;
          var url = _v2.b;
          return A3($dillonkearns$elm_markdown$Markdown$Inline$Link, url, $elm$core$Maybe$Nothing, _List_fromArray([
            $dillonkearns$elm_markdown$Markdown$Inline$Text(text)
          ]));
        case 4:
          var _v3 = _v1.a;
          var url = _v3.a;
          var maybeTitle = _v3.b;
          return A3($dillonkearns$elm_markdown$Markdown$Inline$Link, url, maybeTitle, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.y));
        case 5:
          var _v4 = _v1.a;
          var url = _v4.a;
          var maybeTitle = _v4.b;
          return A3($dillonkearns$elm_markdown$Markdown$Inline$Image, url, maybeTitle, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.y));
        case 6:
          var model = _v1.a;
          return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
        case 7:
          var length = _v1.a;
          return A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, length, $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.y));
        default:
          return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough($dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.y));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function(matches) {
      return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(function(parentMatch, childMatch) {
      return { n: childMatch.n - parentMatch.B, y: childMatch.y, iy: childMatch.iy - parentMatch.B, iW: childMatch.iW, L: childMatch.L - parentMatch.B, B: childMatch.B - parentMatch.B, ji: childMatch.ji };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(function(parentMatch, childMatch) {
      return {
        n: parentMatch.n,
        y: A2($elm$core$List$cons, A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch), parentMatch.y),
        iy: parentMatch.iy,
        iW: parentMatch.iW,
        L: parentMatch.L,
        B: parentMatch.B,
        ji: parentMatch.ji
      };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function(_v4) {
      var match = _v4;
      return {
        n: match.n,
        y: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.y),
        iy: match.iy,
        iW: match.iW,
        L: match.L,
        B: match.B,
        ji: match.ji
      };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function(matches) {
      var _v2 = A2($elm$core$List$sortBy, function(_v3) {
        var match = _v3;
        return match.iy;
      }, matches);
      if (!_v2.b) {
        return _List_Nil;
      } else {
        var first = _v2.a;
        var rest = _v2.b;
        return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(function(remaining, _v0, matchesTail) {
      organizeMatchesHelp:
        while (true) {
          var prevMatch = _v0;
          if (!remaining.b) {
            return A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(prevMatch), matchesTail);
          } else {
            var match = remaining.a;
            var rest = remaining.b;
            if (_Utils_cmp(prevMatch.n, match.iy) < 1) {
              var $temp$remaining = rest, $temp$_v0 = match, $temp$matchesTail = A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(prevMatch), matchesTail);
              remaining = $temp$remaining;
              _v0 = $temp$_v0;
              matchesTail = $temp$matchesTail;
              continue organizeMatchesHelp;
            } else {
              if (_Utils_cmp(prevMatch.iy, match.iy) < 0 && _Utils_cmp(prevMatch.n, match.n) > 0) {
                var $temp$remaining = rest, $temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match), $temp$matchesTail = matchesTail;
                remaining = $temp$remaining;
                _v0 = $temp$_v0;
                matchesTail = $temp$matchesTail;
                continue organizeMatchesHelp;
              } else {
                var $temp$remaining = rest, $temp$_v0 = prevMatch, $temp$matchesTail = matchesTail;
                remaining = $temp$remaining;
                _v0 = $temp$_v0;
                matchesTail = $temp$matchesTail;
                continue organizeMatchesHelp;
              }
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = { $: 0 };
    var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function(string) {
      return A2($elm$core$String$contains, "&", string);
    };
    var $elm$regex$Regex$Match = F4(function(match, index, number, submatches) {
      return { ba: index, aQ: match, lX: number, b9: submatches };
    });
    var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
    var $elm$regex$Regex$fromString = function(string) {
      return A2($elm$regex$Regex$fromStringWith, { kl: false, lN: false }, string);
    };
    var $elm$regex$Regex$never = _Regex_never;
    var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("&#([0-9]{1,8});"));
    var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
    var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function(_int) {
      var remain_ = A2($elm$core$Basics$modBy, 16, _int);
      var remain = A2($elm$core$Basics$modBy, 131070, _int);
      return _int >= 131070 && ((0 <= remain && remain <= 15 || 65536 <= remain && remain <= 65551) && (remain_ === 14 || remain_ === 15));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function(_int) {
      return _int === 9 || (_int === 10 || (_int === 13 || (_int === 133 || (32 <= _int && _int <= 126 || (160 <= _int && _int <= 55295 || (57344 <= _int && _int <= 64975 || (65008 <= _int && _int <= 65533 || 65536 <= _int && _int <= 1114109)))))));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function(_int) {
      return $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && !$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int) ? $elm$core$String$fromChar($elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar($elm$core$Char$fromCode(65533));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function(match) {
      var _v0 = match.b9;
      if (_v0.b && !_v0.a.$) {
        var first = _v0.a.a;
        var _v1 = $elm$core$String$toInt(first);
        if (!_v1.$) {
          var v = _v1.a;
          return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
        } else {
          return match.aQ;
        }
      } else {
        return match.aQ;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
    var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("&([0-9a-zA-Z]+);"));
    var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(_List_fromArray([
      _Utils_Tuple2("quot", 34),
      _Utils_Tuple2("amp", 38),
      _Utils_Tuple2("apos", 39),
      _Utils_Tuple2("lt", 60),
      _Utils_Tuple2("gt", 62),
      _Utils_Tuple2("nbsp", 160),
      _Utils_Tuple2("iexcl", 161),
      _Utils_Tuple2("cent", 162),
      _Utils_Tuple2("pound", 163),
      _Utils_Tuple2("curren", 164),
      _Utils_Tuple2("yen", 165),
      _Utils_Tuple2("brvbar", 166),
      _Utils_Tuple2("sect", 167),
      _Utils_Tuple2("uml", 168),
      _Utils_Tuple2("copy", 169),
      _Utils_Tuple2("ordf", 170),
      _Utils_Tuple2("laquo", 171),
      _Utils_Tuple2("not", 172),
      _Utils_Tuple2("shy", 173),
      _Utils_Tuple2("reg", 174),
      _Utils_Tuple2("macr", 175),
      _Utils_Tuple2("deg", 176),
      _Utils_Tuple2("plusmn", 177),
      _Utils_Tuple2("sup2", 178),
      _Utils_Tuple2("sup3", 179),
      _Utils_Tuple2("acute", 180),
      _Utils_Tuple2("micro", 181),
      _Utils_Tuple2("para", 182),
      _Utils_Tuple2("middot", 183),
      _Utils_Tuple2("cedil", 184),
      _Utils_Tuple2("sup1", 185),
      _Utils_Tuple2("ordm", 186),
      _Utils_Tuple2("raquo", 187),
      _Utils_Tuple2("frac14", 188),
      _Utils_Tuple2("frac12", 189),
      _Utils_Tuple2("frac34", 190),
      _Utils_Tuple2("iquest", 191),
      _Utils_Tuple2("Agrave", 192),
      _Utils_Tuple2("Aacute", 193),
      _Utils_Tuple2("Acirc", 194),
      _Utils_Tuple2("Atilde", 195),
      _Utils_Tuple2("Auml", 196),
      _Utils_Tuple2("Aring", 197),
      _Utils_Tuple2("AElig", 198),
      _Utils_Tuple2("Ccedil", 199),
      _Utils_Tuple2("Egrave", 200),
      _Utils_Tuple2("Eacute", 201),
      _Utils_Tuple2("Ecirc", 202),
      _Utils_Tuple2("Euml", 203),
      _Utils_Tuple2("Igrave", 204),
      _Utils_Tuple2("Iacute", 205),
      _Utils_Tuple2("Icirc", 206),
      _Utils_Tuple2("Iuml", 207),
      _Utils_Tuple2("ETH", 208),
      _Utils_Tuple2("Ntilde", 209),
      _Utils_Tuple2("Ograve", 210),
      _Utils_Tuple2("Oacute", 211),
      _Utils_Tuple2("Ocirc", 212),
      _Utils_Tuple2("Otilde", 213),
      _Utils_Tuple2("Ouml", 214),
      _Utils_Tuple2("times", 215),
      _Utils_Tuple2("Oslash", 216),
      _Utils_Tuple2("Ugrave", 217),
      _Utils_Tuple2("Uacute", 218),
      _Utils_Tuple2("Ucirc", 219),
      _Utils_Tuple2("Uuml", 220),
      _Utils_Tuple2("Yacute", 221),
      _Utils_Tuple2("THORN", 222),
      _Utils_Tuple2("szlig", 223),
      _Utils_Tuple2("agrave", 224),
      _Utils_Tuple2("aacute", 225),
      _Utils_Tuple2("acirc", 226),
      _Utils_Tuple2("atilde", 227),
      _Utils_Tuple2("auml", 228),
      _Utils_Tuple2("aring", 229),
      _Utils_Tuple2("aelig", 230),
      _Utils_Tuple2("ccedil", 231),
      _Utils_Tuple2("egrave", 232),
      _Utils_Tuple2("eacute", 233),
      _Utils_Tuple2("ecirc", 234),
      _Utils_Tuple2("euml", 235),
      _Utils_Tuple2("igrave", 236),
      _Utils_Tuple2("iacute", 237),
      _Utils_Tuple2("icirc", 238),
      _Utils_Tuple2("iuml", 239),
      _Utils_Tuple2("eth", 240),
      _Utils_Tuple2("ntilde", 241),
      _Utils_Tuple2("ograve", 242),
      _Utils_Tuple2("oacute", 243),
      _Utils_Tuple2("ocirc", 244),
      _Utils_Tuple2("otilde", 245),
      _Utils_Tuple2("ouml", 246),
      _Utils_Tuple2("divide", 247),
      _Utils_Tuple2("oslash", 248),
      _Utils_Tuple2("ugrave", 249),
      _Utils_Tuple2("uacute", 250),
      _Utils_Tuple2("ucirc", 251),
      _Utils_Tuple2("uuml", 252),
      _Utils_Tuple2("yacute", 253),
      _Utils_Tuple2("thorn", 254),
      _Utils_Tuple2("yuml", 255),
      _Utils_Tuple2("OElig", 338),
      _Utils_Tuple2("oelig", 339),
      _Utils_Tuple2("Scaron", 352),
      _Utils_Tuple2("scaron", 353),
      _Utils_Tuple2("Yuml", 376),
      _Utils_Tuple2("fnof", 402),
      _Utils_Tuple2("circ", 710),
      _Utils_Tuple2("tilde", 732),
      _Utils_Tuple2("Alpha", 913),
      _Utils_Tuple2("Beta", 914),
      _Utils_Tuple2("Gamma", 915),
      _Utils_Tuple2("Delta", 916),
      _Utils_Tuple2("Epsilon", 917),
      _Utils_Tuple2("Zeta", 918),
      _Utils_Tuple2("Eta", 919),
      _Utils_Tuple2("Theta", 920),
      _Utils_Tuple2("Iota", 921),
      _Utils_Tuple2("Kappa", 922),
      _Utils_Tuple2("Lambda", 923),
      _Utils_Tuple2("Mu", 924),
      _Utils_Tuple2("Nu", 925),
      _Utils_Tuple2("Xi", 926),
      _Utils_Tuple2("Omicron", 927),
      _Utils_Tuple2("Pi", 928),
      _Utils_Tuple2("Rho", 929),
      _Utils_Tuple2("Sigma", 931),
      _Utils_Tuple2("Tau", 932),
      _Utils_Tuple2("Upsilon", 933),
      _Utils_Tuple2("Phi", 934),
      _Utils_Tuple2("Chi", 935),
      _Utils_Tuple2("Psi", 936),
      _Utils_Tuple2("Omega", 937),
      _Utils_Tuple2("alpha", 945),
      _Utils_Tuple2("beta", 946),
      _Utils_Tuple2("gamma", 947),
      _Utils_Tuple2("delta", 948),
      _Utils_Tuple2("epsilon", 949),
      _Utils_Tuple2("zeta", 950),
      _Utils_Tuple2("eta", 951),
      _Utils_Tuple2("theta", 952),
      _Utils_Tuple2("iota", 953),
      _Utils_Tuple2("kappa", 954),
      _Utils_Tuple2("lambda", 955),
      _Utils_Tuple2("mu", 956),
      _Utils_Tuple2("nu", 957),
      _Utils_Tuple2("xi", 958),
      _Utils_Tuple2("omicron", 959),
      _Utils_Tuple2("pi", 960),
      _Utils_Tuple2("rho", 961),
      _Utils_Tuple2("sigmaf", 962),
      _Utils_Tuple2("sigma", 963),
      _Utils_Tuple2("tau", 964),
      _Utils_Tuple2("upsilon", 965),
      _Utils_Tuple2("phi", 966),
      _Utils_Tuple2("chi", 967),
      _Utils_Tuple2("psi", 968),
      _Utils_Tuple2("omega", 969),
      _Utils_Tuple2("thetasym", 977),
      _Utils_Tuple2("upsih", 978),
      _Utils_Tuple2("piv", 982),
      _Utils_Tuple2("ensp", 8194),
      _Utils_Tuple2("emsp", 8195),
      _Utils_Tuple2("thinsp", 8201),
      _Utils_Tuple2("zwnj", 8204),
      _Utils_Tuple2("zwj", 8205),
      _Utils_Tuple2("lrm", 8206),
      _Utils_Tuple2("rlm", 8207),
      _Utils_Tuple2("ndash", 8211),
      _Utils_Tuple2("mdash", 8212),
      _Utils_Tuple2("lsquo", 8216),
      _Utils_Tuple2("rsquo", 8217),
      _Utils_Tuple2("sbquo", 8218),
      _Utils_Tuple2("ldquo", 8220),
      _Utils_Tuple2("rdquo", 8221),
      _Utils_Tuple2("bdquo", 8222),
      _Utils_Tuple2("dagger", 8224),
      _Utils_Tuple2("Dagger", 8225),
      _Utils_Tuple2("bull", 8226),
      _Utils_Tuple2("hellip", 8230),
      _Utils_Tuple2("permil", 8240),
      _Utils_Tuple2("prime", 8242),
      _Utils_Tuple2("Prime", 8243),
      _Utils_Tuple2("lsaquo", 8249),
      _Utils_Tuple2("rsaquo", 8250),
      _Utils_Tuple2("oline", 8254),
      _Utils_Tuple2("frasl", 8260),
      _Utils_Tuple2("euro", 8364),
      _Utils_Tuple2("image", 8465),
      _Utils_Tuple2("weierp", 8472),
      _Utils_Tuple2("real", 8476),
      _Utils_Tuple2("trade", 8482),
      _Utils_Tuple2("alefsym", 8501),
      _Utils_Tuple2("larr", 8592),
      _Utils_Tuple2("uarr", 8593),
      _Utils_Tuple2("rarr", 8594),
      _Utils_Tuple2("darr", 8595),
      _Utils_Tuple2("harr", 8596),
      _Utils_Tuple2("crarr", 8629),
      _Utils_Tuple2("lArr", 8656),
      _Utils_Tuple2("uArr", 8657),
      _Utils_Tuple2("rArr", 8658),
      _Utils_Tuple2("dArr", 8659),
      _Utils_Tuple2("hArr", 8660),
      _Utils_Tuple2("forall", 8704),
      _Utils_Tuple2("part", 8706),
      _Utils_Tuple2("exist", 8707),
      _Utils_Tuple2("empty", 8709),
      _Utils_Tuple2("nabla", 8711),
      _Utils_Tuple2("isin", 8712),
      _Utils_Tuple2("notin", 8713),
      _Utils_Tuple2("ni", 8715),
      _Utils_Tuple2("prod", 8719),
      _Utils_Tuple2("sum", 8721),
      _Utils_Tuple2("minus", 8722),
      _Utils_Tuple2("lowast", 8727),
      _Utils_Tuple2("radic", 8730),
      _Utils_Tuple2("prop", 8733),
      _Utils_Tuple2("infin", 8734),
      _Utils_Tuple2("ang", 8736),
      _Utils_Tuple2("and", 8743),
      _Utils_Tuple2("or", 8744),
      _Utils_Tuple2("cap", 8745),
      _Utils_Tuple2("cup", 8746),
      _Utils_Tuple2("int", 8747),
      _Utils_Tuple2("there4", 8756),
      _Utils_Tuple2("sim", 8764),
      _Utils_Tuple2("cong", 8773),
      _Utils_Tuple2("asymp", 8776),
      _Utils_Tuple2("ne", 8800),
      _Utils_Tuple2("equiv", 8801),
      _Utils_Tuple2("le", 8804),
      _Utils_Tuple2("ge", 8805),
      _Utils_Tuple2("sub", 8834),
      _Utils_Tuple2("sup", 8835),
      _Utils_Tuple2("nsub", 8836),
      _Utils_Tuple2("sube", 8838),
      _Utils_Tuple2("supe", 8839),
      _Utils_Tuple2("oplus", 8853),
      _Utils_Tuple2("otimes", 8855),
      _Utils_Tuple2("perp", 8869),
      _Utils_Tuple2("sdot", 8901),
      _Utils_Tuple2("lceil", 8968),
      _Utils_Tuple2("rceil", 8969),
      _Utils_Tuple2("lfloor", 8970),
      _Utils_Tuple2("rfloor", 8971),
      _Utils_Tuple2("lang", 9001),
      _Utils_Tuple2("rang", 9002),
      _Utils_Tuple2("loz", 9674),
      _Utils_Tuple2("spades", 9824),
      _Utils_Tuple2("clubs", 9827),
      _Utils_Tuple2("hearts", 9829),
      _Utils_Tuple2("diams", 9830)
    ]));
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function(match) {
      var _v0 = match.b9;
      if (_v0.b && !_v0.a.$) {
        var first = _v0.a.a;
        var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
        if (!_v1.$) {
          var code = _v1.a;
          return $elm$core$String$fromChar($elm$core$Char$fromCode(code));
        } else {
          return match.aQ;
        }
      } else {
        return match.aQ;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
    var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString('(\\\\+)([!"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
    var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex, function(regexMatch) {
      var _v0 = regexMatch.b9;
      if (_v0.b && !_v0.a.$ && _v0.b.b && !_v0.b.a.$) {
        var backslashes = _v0.a.a;
        var _v1 = _v0.b;
        var escapedStr = _v1.a.a;
        return _Utils_ap(A2($elm$core$String$repeat, $elm$core$String$length(backslashes) / 2 | 0, "\\"), escapedStr);
      } else {
        return regexMatch.aQ;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("&#[Xx]([0-9a-fA-F]{1,8});"));
    var $elm$core$String$foldl = _String_foldl;
    var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function(string) {
      var folder = F2(function(hexDigit, _int) {
        return _int * 16 + A2($elm$core$Basics$modBy, 39, $elm$core$Char$toCode(hexDigit)) - 9;
      });
      return A3($elm$core$String$foldl, folder, 0, $elm$core$String$toLower(string));
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function(match) {
      var _v0 = match.b9;
      if (_v0.b && !_v0.a.$) {
        var first = _v0.a.a;
        return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode($dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
      } else {
        return match.aQ;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
    var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function(str) {
      var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
      return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals($dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals($dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function(text) {
      return {
        n: 0,
        y: _List_Nil,
        iy: 0,
        iW: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
        L: 0,
        B: 0,
        ji: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
      };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(function(rawText, _v2, parsedMatches) {
      var matchModel = _v2;
      var updtMatch = {
        n: matchModel.n,
        y: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.iW, _List_Nil, matchModel.y),
        iy: matchModel.iy,
        iW: matchModel.iW,
        L: matchModel.L,
        B: matchModel.B,
        ji: matchModel.ji
      };
      if (!parsedMatches.b) {
        var finalStr = A2($elm$core$String$dropLeft, matchModel.n, rawText);
        return $elm$core$String$isEmpty(finalStr) ? _List_fromArray([updtMatch]) : _List_fromArray([
          updtMatch,
          $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
        ]);
      } else {
        var matchHead = parsedMatches.a;
        var _v4 = matchHead.ji;
        if (!_v4.$) {
          return A2($elm$core$List$cons, updtMatch, parsedMatches);
        } else {
          return _Utils_eq(matchModel.n, matchHead.iy) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : _Utils_cmp(matchModel.n, matchHead.iy) < 0 ? A2($elm$core$List$cons, updtMatch, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(A3($elm$core$String$slice, matchModel.n, matchHead.iy, rawText)), parsedMatches)) : parsedMatches;
        }
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(function(rawText, parsedMatches, matches) {
      parseTextMatches:
        while (true) {
          if (!matches.b) {
            if (!parsedMatches.b) {
              return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray([
                $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
              ]);
            } else {
              var matchModel = parsedMatches.a;
              return matchModel.iy > 0 ? A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(A2($elm$core$String$left, matchModel.iy, rawText)), parsedMatches) : parsedMatches;
            }
          } else {
            var match = matches.a;
            var matchesTail = matches.b;
            var $temp$rawText = rawText, $temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches), $temp$matches = matchesTail;
            rawText = $temp$rawText;
            parsedMatches = $temp$parsedMatches;
            matches = $temp$matches;
            continue parseTextMatches;
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens = F3(function(tokensL, tokensR, countL) {
      cleanAngleBracketTokens:
        while (true) {
          if (!tokensR.b) {
            return _List_Nil;
          } else {
            var hd1 = tokensR.a;
            var rest1 = tokensR.b;
            if (!tokensL.b) {
              if (countL > 1) {
                var $temp$tokensL = tokensL, $temp$tokensR = rest1, $temp$countL = countL - 1;
                tokensL = $temp$tokensL;
                tokensR = $temp$tokensR;
                countL = $temp$countL;
                continue cleanAngleBracketTokens;
              } else {
                if (countL === 1) {
                  return A2($elm$core$List$cons, hd1, A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
                } else {
                  var $temp$tokensL = tokensL, $temp$tokensR = rest1, $temp$countL = 0;
                  tokensL = $temp$tokensL;
                  tokensR = $temp$tokensR;
                  countL = $temp$countL;
                  continue cleanAngleBracketTokens;
                }
              }
            } else {
              var hd = tokensL.a;
              var rest = tokensL.b;
              if (_Utils_cmp(hd.ba, hd1.ba) < 0) {
                if (!countL) {
                  return A2($elm$core$List$cons, hd, A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, rest, tokensR, countL + 1));
                } else {
                  var $temp$tokensL = rest, $temp$tokensR = tokensR, $temp$countL = countL + 1;
                  tokensL = $temp$tokensL;
                  tokensR = $temp$tokensR;
                  countL = $temp$countL;
                  continue cleanAngleBracketTokens;
                }
              } else {
                if (countL > 1) {
                  var $temp$tokensL = tokensL, $temp$tokensR = rest1, $temp$countL = countL - 1;
                  tokensL = $temp$tokensL;
                  tokensR = $temp$tokensR;
                  countL = $temp$countL;
                  continue cleanAngleBracketTokens;
                } else {
                  if (countL === 1) {
                    return A2($elm$core$List$cons, hd1, A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
                  } else {
                    var $temp$tokensL = tokensL, $temp$tokensR = rest1, $temp$countL = 0;
                    tokensL = $temp$tokensL;
                    tokensR = $temp$tokensR;
                    countL = $temp$countL;
                    continue cleanAngleBracketTokens;
                  }
                }
              }
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\<)"));
    var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = { $: 4 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && !_v0.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength, fG: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen }) : $elm$core$Maybe$Nothing;
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\>)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = 0;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = 1;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && !_v0.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        return $elm$core$Maybe$Just({
          ba: regMatch.ba + backslashesLength,
          fG: 1,
          k: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose(1) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose(0)
        });
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)([^*])?(\\*+)([^*])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(function(a, b) {
      return { $: 7, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function(c) {
      switch (c) {
        case "!":
          return true;
        case '"':
          return true;
        case "#":
          return true;
        case "%":
          return true;
        case "&":
          return true;
        case "'":
          return true;
        case "(":
          return true;
        case ")":
          return true;
        case "*":
          return true;
        case ",":
          return true;
        case "-":
          return true;
        case ".":
          return true;
        case "/":
          return true;
        case ":":
          return true;
        case ";":
          return true;
        case "?":
          return true;
        case "@":
          return true;
        case "[":
          return true;
        case "]":
          return true;
        case "_":
          return true;
        case "{":
          return true;
        case "}":
          return true;
        case "~":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2($elm$core$String$foldl, F2(function(c, accum) {
      return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
    }), false);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function(c) {
      switch (c) {
        case " ":
          return true;
        case "\f":
          return true;
        case `
`:
          return true;
        case "\r":
          return true;
        case "\t":
          return true;
        case "\v":
          return true;
        case " ":
          return true;
        case "\u2028":
          return true;
        case "\u2029":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2($elm$core$String$foldl, F2(function(c, accum) {
      return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
    }), false);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function(mstring) {
      if (!mstring.$) {
        var string = mstring.a;
        return $elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string) ? 0 : $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2;
      } else {
        return 0;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(function(_char, rawText, regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && _v0.b.b.b && !_v0.b.b.a.$ && _v0.b.b.b.b) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var maybeLeftFringe = _v1.a;
        var _v2 = _v1.b;
        var delimiter = _v2.a.a;
        var _v3 = _v2.b;
        var maybeRightFringe = _v3.a;
        var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
        var leftFringeLength = function() {
          if (!maybeLeftFringe.$) {
            var left = maybeLeftFringe.a;
            return $elm$core$String$length(left);
          } else {
            return 0;
          }
        }();
        var mLeftFringe = !!regMatch.ba && !leftFringeLength ? $elm$core$Maybe$Just(A3($elm$core$String$slice, regMatch.ba - 1, regMatch.ba, rawText)) : maybeLeftFringe;
        var backslashesLength = function() {
          if (!maybeBackslashes.$) {
            var backslashes = maybeBackslashes.a;
            return $elm$core$String$length(backslashes);
          } else {
            return 0;
          }
        }();
        var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) && !leftFringeLength || function() {
          if (!mLeftFringe.$ && mLeftFringe.a === "\\") {
            return true;
          } else {
            return false;
          }
        }();
        var delimiterLength = isEscaped ? $elm$core$String$length(delimiter) - 1 : $elm$core$String$length(delimiter);
        var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
        if (delimiterLength <= 0 || _char === "_" && (lFringeRank === 2 && rFringeRank === 2)) {
          return $elm$core$Maybe$Nothing;
        } else {
          var index = regMatch.ba + backslashesLength + leftFringeLength + (isEscaped ? 1 : 0);
          return $elm$core$Maybe$Just({
            ba: index,
            fG: delimiterLength,
            k: A2($dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken, _char, { bc: lFringeRank, bm: rFringeRank })
          });
        }
      } else {
        return $elm$core$Maybe$Nothing;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function(str) {
      return A2($elm$core$List$filterMap, A2($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken, "*", str), A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\`+)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function(a) {
      return { $: 0, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && !_v0.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var backtick = _v1.a.a;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        return $elm$core$Maybe$Just({
          ba: regMatch.ba + backslashesLength,
          fG: $elm$core$String$length(backtick),
          k: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken(1) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken(0)
        });
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(?:(\\\\+)|( {2,}))\\n"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function(regMatch) {
      var _v0 = regMatch.b9;
      _v0$2:
        while (true) {
          if (_v0.b) {
            if (!_v0.a.$) {
              var backslashes = _v0.a.a;
              var backslashesLength = $elm$core$String$length(backslashes);
              return !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength - 1, fG: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken }) : $elm$core$Maybe$Nothing;
            } else {
              if (_v0.b.b && !_v0.b.a.$) {
                var _v1 = _v0.b;
                return $elm$core$Maybe$Just({
                  ba: regMatch.ba,
                  fG: $elm$core$String$length(regMatch.aQ),
                  k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
                });
              } else {
                break _v0$2;
              }
            }
          } else {
            break _v0$2;
          }
        }
      return $elm$core$Maybe$Nothing;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function(regMatch) {
      var _v0 = regMatch.b9;
      _v0$2:
        while (true) {
          if (_v0.b) {
            if (!_v0.a.$) {
              var backslashes = _v0.a.a;
              var backslashesLength = $elm$core$String$length(backslashes);
              return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength, fG: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken }) : $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength - 1, fG: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken });
            } else {
              if (_v0.b.b) {
                var _v1 = _v0.b;
                return $elm$core$Maybe$Just({
                  ba: regMatch.ba,
                  fG: $elm$core$String$length(regMatch.aQ),
                  k: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
                });
              } else {
                break _v0$2;
              }
            }
          } else {
            break _v0$2;
          }
        }
      return $elm$core$Maybe$Nothing;
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(?:(\\\\+)|( *))\\n"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function(str) {
      return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\])"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = { $: 3 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && !_v0.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength, fG: 1, k: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose }) : $elm$core$Maybe$Nothing;
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(\\!)?(\\[)"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = 0;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && _v0.b.b.b && !_v0.b.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var maybeImageOpen = _v1.a;
        var _v2 = _v1.b;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
        var index = isEscaped ? regMatch.ba + backslashesLength + 1 : regMatch.ba + backslashesLength;
        if (isEscaped) {
          if (!maybeImageOpen.$) {
            return $elm$core$Maybe$Just({
              ba: index,
              fG: 1,
              k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(0)
            });
          } else {
            return $elm$core$Maybe$Nothing;
          }
        } else {
          if (!maybeImageOpen.$) {
            return $elm$core$Maybe$Just({ ba: index, fG: 2, k: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken });
          } else {
            return $elm$core$Maybe$Just({
              ba: index,
              fG: 1,
              k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(0)
            });
          }
        }
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function(a) {
      return { $: 9, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function(regMatch) {
      var _v0 = regMatch.b9;
      if (_v0.b && _v0.b.b && !_v0.b.a.$) {
        var maybeBackslashes = _v0.a;
        var _v1 = _v0.b;
        var tilde = _v1.a.a;
        var backslashesLength = A2($elm$core$Maybe$withDefault, 0, A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
        var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2($elm$core$String$length(tilde), $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken(1)) : _Utils_Tuple2($elm$core$String$length(tilde), $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken(0));
        var length = _v2.a;
        var meaning = _v2.b;
        return $elm$core$Maybe$Just({ ba: regMatch.ba + backslashesLength, fG: length, k: meaning });
      } else {
        return $elm$core$Maybe$Nothing;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)(~{2,})([^~])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function(str) {
      return A2($elm$core$List$filterMap, $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken, A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("(\\\\*)([^_])?(\\_+)([^_])?"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function(str) {
      return A2($elm$core$List$filterMap, A2($dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken, "_", str), A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(function(left, right) {
      if (left.b) {
        var lfirst = left.a;
        var lrest = left.b;
        if (right.b) {
          var rfirst = right.a;
          var rrest = right.b;
          return _Utils_cmp(lfirst.ba, rfirst.ba) < 0 ? A2($elm$core$List$cons, lfirst, A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2($elm$core$List$cons, rfirst, A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
        } else {
          return left;
        }
      } else {
        return right;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function(rawText) {
      return A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, A2($elm$core$List$sortBy, function($2) {
        return $2.ba;
      }, $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText)), A2($elm$core$List$sortBy, function($2) {
        return $2.ba;
      }, $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText)), 0), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText), A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText), $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText))))))));
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function(a) {
      return { $: 7, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function(a) {
      return { $: 6, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function(a) {
      return { $: 5, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = 1;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function(a) {
      return { $: 4, a };
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = { $: 8 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function(a) {
      return { $: 3, a };
    };
    var $elm$regex$Regex$contains = _Regex_contains;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)"));
    var $elm$url$Url$percentDecode = _Url_percentDecode;
    var $elm$url$Url$percentEncode = _Url_percentEncode;
    var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2($elm$core$Basics$composeR, $elm$url$Url$percentEncode, A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex, function(match) {
      return A2($elm$core$Maybe$withDefault, match.aQ, $elm$url$Url$percentDecode(match.aQ));
    }));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function(_v0) {
      var match = _v0;
      return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.iW) ? $elm$core$Result$Ok(_Utils_update(match, {
        ji: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(_Utils_Tuple2(match.iW, $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.iW)))
      })) : $elm$core$Result$Err(match);
    };
    var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
    var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = "[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*";
    var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("^\\[\\s*(" + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ")\\s*\\]")));
    var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function(original) {
      return original;
    };
    var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
    var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(function(rawUrl, maybeTitle) {
      return _Utils_Tuple2($dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl($dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)), A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(function(matchModel, references, maybeRegexMatch) {
      var refLabel = function(str) {
        return $elm$core$String$isEmpty(str) ? matchModel.iW : str;
      }(A2($elm$core$Maybe$withDefault, matchModel.iW, A2($elm$core$Maybe$withDefault, $elm$core$Maybe$Nothing, A2($elm$core$Maybe$andThen, A2($elm$core$Basics$composeR, function($2) {
        return $2.b9;
      }, $elm$core$List$head), maybeRegexMatch))));
      var _v0 = A2($elm$core$Dict$get, $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel), references);
      if (_v0.$ === 1) {
        return $elm$core$Maybe$Nothing;
      } else {
        var _v1 = _v0.a;
        var rawUrl = _v1.a;
        var maybeTitle = _v1.b;
        var type_ = function() {
          var _v3 = matchModel.ji;
          if (_v3.$ === 5) {
            return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
          } else {
            return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
          }
        }();
        var regexMatchLength = function() {
          if (!maybeRegexMatch.$) {
            var match = maybeRegexMatch.a.aQ;
            return $elm$core$String$length(match);
          } else {
            return 0;
          }
        }();
        return $elm$core$Maybe$Just(_Utils_update(matchModel, { n: matchModel.n + regexMatchLength, ji: type_ }));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(function(remainText, _v0, references) {
      var tempMatch = _v0;
      var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
      return A3($dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch, tempMatch, references, $elm$core$List$head(matches));
    });
    var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = "\\f\\v\\r\\n";
    var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = " \\t\\f\\v\\r\\n";
    var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = "(?:<([^<>" + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + ("]*)>|([^" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ("\\(\\)\\\\]*(?:\\\\.[^" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + "\\(\\)\\\\]*)*))")))));
    var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = "(?:[" + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ("]+" + ("(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|" + ('"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|' + "\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?"))));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("^\\(\\s*" + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + "\\s*\\)"))));
    var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function(maybes) {
      var process2 = F2(function(a, maybeFound) {
        if (!maybeFound.$) {
          var found = maybeFound.a;
          return $elm$core$Maybe$Just(found);
        } else {
          return a;
        }
      });
      return A3($elm$core$List$foldl, process2, $elm$core$Maybe$Nothing, maybes);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(function(matchModel, regexMatch) {
      var _v0 = regexMatch.b9;
      if (_v0.b && _v0.b.b && _v0.b.b.b && _v0.b.b.b.b && _v0.b.b.b.b.b) {
        var maybeRawUrlAngleBrackets = _v0.a;
        var _v1 = _v0.b;
        var maybeRawUrlWithoutBrackets = _v1.a;
        var _v2 = _v1.b;
        var maybeTitleSingleQuotes = _v2.a;
        var _v3 = _v2.b;
        var maybeTitleDoubleQuotes = _v3.a;
        var _v4 = _v3.b;
        var maybeTitleParenthesis = _v4.a;
        var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(_List_fromArray([maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
        var toMatch = function(rawUrl) {
          return _Utils_update(matchModel, {
            n: matchModel.n + $elm$core$String$length(regexMatch.aQ),
            ji: function() {
              var _v5 = matchModel.ji;
              if (_v5.$ === 5) {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
              } else {
                return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
              }
            }()(A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
          });
        };
        var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(_List_fromArray([maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
        return $elm$core$Maybe$Just(toMatch(A2($elm$core$Maybe$withDefault, "", maybeRawUrl)));
      } else {
        return $elm$core$Maybe$Nothing;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(function(remainText, _v0, refs) {
      var tempMatch = _v0;
      var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
      if (_v1.b) {
        var first = _v1.a;
        var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
        if (!_v2.$) {
          var match = _v2.a;
          return $elm$core$Maybe$Just(match);
        } else {
          return A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences, remainText, tempMatch, refs);
        }
      } else {
        return A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences, remainText, tempMatch, refs);
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(function(_v0, remainMatches) {
      var match = _v0;
      var overlappingMatches = $elm$core$List$filter(function(_v1) {
        var testMatch = _v1;
        return _Utils_cmp(match.n, testMatch.iy) > 0 && _Utils_cmp(match.n, testMatch.n) < 0;
      });
      return $elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(overlappingMatches(remainMatches)) ? $elm$core$Maybe$Just(A2($elm$core$List$cons, match, remainMatches)) : $elm$core$Maybe$Nothing;
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2($elm$core$Maybe$withDefault, $elm$regex$Regex$never, $elm$regex$Regex$fromString("^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$"));
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function(_v0) {
      var match = _v0;
      return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.iW) ? $elm$core$Result$Ok(_Utils_update(match, {
        ji: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(_Utils_Tuple2(match.iW, "mailto:" + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.iW)))
      })) : $elm$core$Result$Err(match);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(function(innerTokens, isToken, tokens) {
      findTokenHelp:
        while (true) {
          if (!tokens.b) {
            return $elm$core$Maybe$Nothing;
          } else {
            var nextToken = tokens.a;
            var remainingTokens = tokens.b;
            if (isToken(nextToken)) {
              return $elm$core$Maybe$Just(_Utils_Tuple3(nextToken, $elm$core$List$reverse(innerTokens), remainingTokens));
            } else {
              var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens), $temp$isToken = isToken, $temp$tokens = remainingTokens;
              innerTokens = $temp$innerTokens;
              isToken = $temp$isToken;
              tokens = $temp$tokens;
              continue findTokenHelp;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(function(isToken, tokens) {
      return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(function(a, b) {
      return { $: 6, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = 0;
    var $elm$parser$Parser$Advanced$getOffset = function(s) {
      return A3($elm$parser$Parser$Advanced$Good, false, s.f, s);
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(function(rawText, _v0) {
      var match = _v0;
      var consumedCharacters = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(F3(function(startOffset, htmlTag2, endOffset) {
        return { e$: htmlTag2, fG: endOffset - startOffset };
      })), $elm$parser$Parser$Advanced$getOffset), $dillonkearns$elm_markdown$HtmlParser$html), $elm$parser$Parser$Advanced$getOffset);
      var parsed = A2($elm$parser$Parser$Advanced$run, consumedCharacters, A2($elm$core$String$dropLeft, match.iy, rawText));
      if (!parsed.$) {
        var htmlTag = parsed.a.e$;
        var length = parsed.a.fG;
        var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, 0, htmlTag);
        return $elm$core$Maybe$Just({ ba: match.iy, fG: length, k: htmlToken });
      } else {
        return $elm$core$Maybe$Nothing;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(function(_function, result) {
      if (!result.$) {
        return result;
      } else {
        var err = result.a;
        return _function(err);
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(function(closeToken, openToken) {
      var _v0 = openToken.k;
      if (!_v0.$) {
        if (!_v0.a) {
          var _v1 = _v0.a;
          return _Utils_eq(openToken.fG - 1, closeToken.fG);
        } else {
          var _v2 = _v0.a;
          return _Utils_eq(openToken.fG, closeToken.fG);
        }
      } else {
        return false;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function(token) {
      var _v0 = token.k;
      switch (_v0.$) {
        case 1:
          return true;
        case 2:
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(function(closeToken, openToken) {
      var _v0 = openToken.k;
      if (_v0.$ === 7) {
        var openChar = _v0.a;
        var open = _v0.b;
        var _v1 = closeToken.k;
        if (_v1.$ === 7) {
          var closeChar = _v1.a;
          var close = _v1.b;
          return _Utils_eq(openChar, closeChar) ? _Utils_eq(open.bc, open.bm) || _Utils_eq(close.bc, close.bm) ? !!A2($elm$core$Basics$modBy, 3, closeToken.fG + openToken.fG) || !A2($elm$core$Basics$modBy, 3, closeToken.fG) && !A2($elm$core$Basics$modBy, 3, openToken.fG) : true : false;
        } else {
          return false;
        }
      } else {
        return false;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(function(closeToken, openToken) {
      var _v0 = function() {
        var _v1 = openToken.k;
        if (_v1.$ === 9) {
          if (!_v1.a) {
            var _v2 = _v1.a;
            return _Utils_Tuple2(true, openToken.fG - 1);
          } else {
            var _v3 = _v1.a;
            return _Utils_Tuple2(true, openToken.fG);
          }
        } else {
          return _Utils_Tuple2(false, 0);
        }
      }();
      var openTokenIsStrikethrough = _v0.a;
      var openTokenLength = _v0.b;
      var _v4 = function() {
        var _v5 = closeToken.k;
        if (_v5.$ === 9) {
          if (!_v5.a) {
            var _v6 = _v5.a;
            return _Utils_Tuple2(true, closeToken.fG - 1);
          } else {
            var _v7 = _v5.a;
            return _Utils_Tuple2(true, closeToken.fG);
          }
        } else {
          return _Utils_Tuple2(false, 0);
        }
      }();
      var closeTokenIsStrikethrough = _v4.a;
      var closeTokenLength = _v4.b;
      return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = { $: 1 };
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(function(token, type_) {
      return { n: token.ba + token.fG, y: _List_Nil, iy: token.ba, iW: "", L: 0, B: 0, ji: type_ };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F2(function(remaining, matches) {
      lineBreakTTM:
        while (true) {
          if (!remaining.b) {
            return matches;
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v1 = token.k;
            if (_v1.$ === 8) {
              var $temp$remaining = tokensTail, $temp$matches = A2($elm$core$List$cons, A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType), matches);
              remaining = $temp$remaining;
              matches = $temp$matches;
              continue lineBreakTTM;
            } else {
              var $temp$remaining = tokensTail, $temp$matches = matches;
              remaining = $temp$remaining;
              matches = $temp$matches;
              continue lineBreakTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(function(_v0, tokensTail) {
      var match = _v0;
      return A2($elm$core$List$filter, function(token) {
        return _Utils_cmp(token.ba, match.n) > -1;
      }, tokensTail);
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(function(closeToken, escaped, matches, references, rawText, _v44) {
      var openToken = _v44.a;
      var remainTokens = _v44.c;
      var result = A2($dillonkearns$elm_markdown$Markdown$Helpers$ifError, $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch, $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, function(s) {
        return s;
      }, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, openToken, closeToken, _List_Nil)));
      if (result.$ === 1) {
        var tempMatch = result.a;
        if (escaped === 1) {
          var _v47 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
          if (!_v47.$) {
            var newToken = _v47.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(A2($elm$core$List$cons, newToken, remainTokens), matches));
          } else {
            return $elm$core$Maybe$Nothing;
          }
        } else {
          return $elm$core$Maybe$Nothing;
        }
      } else {
        var newMatch = result.a;
        return $elm$core$Maybe$Just(_Utils_Tuple2(remainTokens, A2($elm$core$List$cons, newMatch, matches)));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(function(remaining, tokens, matches, references, rawText) {
      codeAutolinkTypeHtmlTagTTM:
        while (true) {
          if (!remaining.b) {
            return A5($dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM, $elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v36 = token.k;
            switch (_v36.$) {
              case 0:
                var _v37 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token), tokens);
                if (!_v37.$) {
                  var code = _v37.a;
                  var _v38 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
                  var newTokens = _v38.a;
                  var newMatches = _v38.b;
                  var $temp$remaining = tokensTail, $temp$tokens = newTokens, $temp$matches = newMatches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue codeAutolinkTypeHtmlTagTTM;
                } else {
                  var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue codeAutolinkTypeHtmlTagTTM;
                }
              case 5:
                var isEscaped = _v36.a;
                var isAngleBracketOpen = function(_v43) {
                  var meaning = _v43.k;
                  if (meaning.$ === 4) {
                    return true;
                  } else {
                    return false;
                  }
                };
                var _v39 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
                if (!_v39.$) {
                  var found = _v39.a;
                  var _v40 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
                  if (!_v40.$) {
                    var _v41 = _v40.a;
                    var newTokens = _v41.a;
                    var newMatches = _v41.b;
                    var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$filter, A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), newTokens), $temp$matches = newMatches, $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue codeAutolinkTypeHtmlTagTTM;
                  } else {
                    var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$filter, A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue codeAutolinkTypeHtmlTagTTM;
                  }
                } else {
                  var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$filter, A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen), tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue codeAutolinkTypeHtmlTagTTM;
                }
              default:
                var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                remaining = $temp$remaining;
                tokens = $temp$tokens;
                matches = $temp$matches;
                references = $temp$references;
                rawText = $temp$rawText;
                continue codeAutolinkTypeHtmlTagTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(function(closeToken, matches, references, rawText, _v32) {
      var openToken = _v32.a;
      var remainTokens = _v32.c;
      var updatedOpenToken = function() {
        var _v33 = openToken.k;
        if (!_v33.$ && !_v33.a) {
          var _v34 = _v33.a;
          return _Utils_update(openToken, { ba: openToken.ba + 1, fG: openToken.fG - 1 });
        } else {
          return openToken;
        }
      }();
      var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
      return _Utils_Tuple2(remainTokens, A2($elm$core$List$cons, match, matches));
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(function(remaining, tokens, matches, references, rawText) {
      emphasisTTM:
        while (true) {
          if (!remaining.b) {
            return A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM, $elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v27 = token.k;
            if (_v27.$ === 7) {
              var _char = _v27.a;
              var leftFringeRank = _v27.b.bc;
              var rightFringeRank = _v27.b.bm;
              if (_Utils_eq(leftFringeRank, rightFringeRank)) {
                if (!!rightFringeRank && (_char !== "_" || rightFringeRank === 1)) {
                  var _v28 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token), tokens);
                  if (!_v28.$) {
                    var found = _v28.a;
                    var _v29 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
                    var newRemaining = _v29.a;
                    var match = _v29.b;
                    var newTokens = _v29.c;
                    var $temp$remaining = newRemaining, $temp$tokens = newTokens, $temp$matches = A2($elm$core$List$cons, match, matches), $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue emphasisTTM;
                  } else {
                    var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue emphasisTTM;
                  }
                } else {
                  var $temp$remaining = tokensTail, $temp$tokens = tokens, $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue emphasisTTM;
                }
              } else {
                if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
                  var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue emphasisTTM;
                } else {
                  var _v30 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token), tokens);
                  if (!_v30.$) {
                    var found = _v30.a;
                    var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
                    var newRemaining = _v31.a;
                    var match = _v31.b;
                    var newTokens = _v31.c;
                    var $temp$remaining = newRemaining, $temp$tokens = newTokens, $temp$matches = A2($elm$core$List$cons, match, matches), $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue emphasisTTM;
                  } else {
                    var $temp$remaining = tokensTail, $temp$tokens = tokens, $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                    remaining = $temp$remaining;
                    tokens = $temp$tokens;
                    matches = $temp$matches;
                    references = $temp$references;
                    rawText = $temp$rawText;
                    continue emphasisTTM;
                  }
                }
              }
            } else {
              var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
              remaining = $temp$remaining;
              tokens = $temp$tokens;
              matches = $temp$matches;
              references = $temp$references;
              rawText = $temp$rawText;
              continue emphasisTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(function(references, rawText, closeToken, tokensTail, _v25) {
      var openToken = _v25.a;
      var innerTokens = _v25.b;
      var remainTokens = _v25.c;
      var remainLength = openToken.fG - closeToken.fG;
      var updt = !remainLength ? { a0: closeToken, aU: openToken, bk: remainTokens, bv: tokensTail } : remainLength > 0 ? {
        a0: closeToken,
        aU: _Utils_update(openToken, { ba: openToken.ba + remainLength, fG: closeToken.fG }),
        bk: A2($elm$core$List$cons, _Utils_update(openToken, { fG: remainLength }), remainTokens),
        bv: tokensTail
      } : {
        a0: _Utils_update(closeToken, { fG: openToken.fG }),
        aU: openToken,
        bk: remainTokens,
        bv: A2($elm$core$List$cons, _Utils_update(closeToken, { ba: closeToken.ba + openToken.fG, fG: -remainLength }), tokensTail)
      };
      var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, function(s) {
        return s;
      }, $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.aU.fG), updt.aU, updt.a0, $elm$core$List$reverse(innerTokens));
      return _Utils_Tuple3(updt.bv, match, updt.bk);
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(function(remaining, tokens, matches, references, rawText) {
      htmlElementTTM:
        while (true) {
          if (!remaining.b) {
            return A5($dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM, $elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v23 = token.k;
            if (_v23.$ === 6) {
              var isOpen = _v23.a;
              var htmlModel = _v23.b;
              var $temp$remaining = tokensTail, $temp$tokens = tokens, $temp$matches = A2($elm$core$List$cons, A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)), matches), $temp$references = references, $temp$rawText = rawText;
              remaining = $temp$remaining;
              tokens = $temp$tokens;
              matches = $temp$matches;
              references = $temp$references;
              rawText = $temp$rawText;
              continue htmlElementTTM;
            } else {
              var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
              remaining = $temp$remaining;
              tokens = $temp$tokens;
              matches = $temp$matches;
              references = $temp$references;
              rawText = $temp$rawText;
              continue htmlElementTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(function(remaining, tokens, matches, references, rawText) {
      linkImageTypeTTM:
        while (true) {
          if (!remaining.b) {
            return A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM, $elm$core$List$reverse(tokens), _List_Nil, matches, references, rawText);
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v18 = token.k;
            if (_v18.$ === 3) {
              var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
              if (!_v19.$) {
                var found = _v19.a;
                var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
                if (!_v20.$) {
                  var _v21 = _v20.a;
                  var x2 = _v21.a;
                  var newMatches = _v21.b;
                  var newTokens = _v21.c;
                  var $temp$remaining = x2, $temp$tokens = newTokens, $temp$matches = newMatches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue linkImageTypeTTM;
                } else {
                  var $temp$remaining = tokensTail, $temp$tokens = tokens, $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                  remaining = $temp$remaining;
                  tokens = $temp$tokens;
                  matches = $temp$matches;
                  references = $temp$references;
                  rawText = $temp$rawText;
                  continue linkImageTypeTTM;
                }
              } else {
                var $temp$remaining = tokensTail, $temp$tokens = tokens, $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                remaining = $temp$remaining;
                tokens = $temp$tokens;
                matches = $temp$matches;
                references = $temp$references;
                rawText = $temp$rawText;
                continue linkImageTypeTTM;
              }
            } else {
              var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
              remaining = $temp$remaining;
              tokens = $temp$tokens;
              matches = $temp$matches;
              references = $temp$references;
              rawText = $temp$rawText;
              continue linkImageTypeTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(function(closeToken, tokensTail, oldMatches, references, rawText, _v8) {
      var openToken = _v8.a;
      var innerTokens = _v8.b;
      var remainTokens = _v8.c;
      var removeOpenToken = _Utils_Tuple3(tokensTail, oldMatches, _Utils_ap(innerTokens, remainTokens));
      var remainText = A2($elm$core$String$dropLeft, closeToken.ba + 1, rawText);
      var inactivateLinkOpenToken = function(token) {
        var _v16 = token.k;
        if (_v16.$ === 1) {
          return _Utils_update(token, {
            k: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken(1)
          });
        } else {
          return token;
        }
      };
      var findTempMatch = function(isLinkType) {
        return A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, function(s) {
          return s;
        }, isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(_Utils_Tuple2("", $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(_Utils_Tuple2("", $elm$core$Maybe$Nothing)), openToken, closeToken, $elm$core$List$reverse(innerTokens));
      };
      var _v9 = openToken.k;
      switch (_v9.$) {
        case 2:
          var tempMatch = findTempMatch(false);
          var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
          if (_v10.$ === 1) {
            return $elm$core$Maybe$Just(removeOpenToken);
          } else {
            var match = _v10.a;
            var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
            if (!_v11.$) {
              var matches = _v11.a;
              return $elm$core$Maybe$Just(_Utils_Tuple3(A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail), matches, remainTokens));
            } else {
              return $elm$core$Maybe$Just(removeOpenToken);
            }
          }
        case 1:
          if (!_v9.a) {
            var _v12 = _v9.a;
            var tempMatch = findTempMatch(true);
            var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
            if (_v13.$ === 1) {
              return $elm$core$Maybe$Just(removeOpenToken);
            } else {
              var match = _v13.a;
              var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
              if (!_v14.$) {
                var matches = _v14.a;
                return $elm$core$Maybe$Just(_Utils_Tuple3(A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail), matches, A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
              } else {
                return $elm$core$Maybe$Just(removeOpenToken);
              }
            }
          } else {
            var _v15 = _v9.a;
            return $elm$core$Maybe$Just(removeOpenToken);
          }
        default:
          return $elm$core$Maybe$Nothing;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(function(remaining, tokens, matches, references, rawText) {
      strikethroughTTM:
        while (true) {
          if (!remaining.b) {
            return A2($dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM, $elm$core$List$reverse(tokens), matches);
          } else {
            var token = remaining.a;
            var tokensTail = remaining.b;
            var _v5 = token.k;
            if (_v5.$ === 9) {
              var _v6 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token), tokens);
              if (!_v6.$) {
                var content = _v6.a;
                var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
                var newTokens = _v7.a;
                var newMatches = _v7.b;
                var $temp$remaining = tokensTail, $temp$tokens = newTokens, $temp$matches = newMatches, $temp$references = references, $temp$rawText = rawText;
                remaining = $temp$remaining;
                tokens = $temp$tokens;
                matches = $temp$matches;
                references = $temp$references;
                rawText = $temp$rawText;
                continue strikethroughTTM;
              } else {
                var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
                remaining = $temp$remaining;
                tokens = $temp$tokens;
                matches = $temp$matches;
                references = $temp$references;
                rawText = $temp$rawText;
                continue strikethroughTTM;
              }
            } else {
              var $temp$remaining = tokensTail, $temp$tokens = A2($elm$core$List$cons, token, tokens), $temp$matches = matches, $temp$references = references, $temp$rawText = rawText;
              remaining = $temp$remaining;
              tokens = $temp$tokens;
              matches = $temp$matches;
              references = $temp$references;
              rawText = $temp$rawText;
              continue strikethroughTTM;
            }
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(function(closeToken, matches, references, rawText, _v1) {
      var openToken = _v1.a;
      var remainTokens = _v1.c;
      var updatedOpenToken = function() {
        var _v2 = openToken.k;
        if (_v2.$ === 9 && !_v2.a) {
          var _v3 = _v2.a;
          return _Utils_update(openToken, { ba: openToken.ba + 1, fG: openToken.fG - 1 });
        } else {
          return openToken;
        }
      }();
      var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
      return _Utils_Tuple2(remainTokens, A2($elm$core$List$cons, match, matches));
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(function(references, rawText, processText, type_, openToken, closeToken, innerTokens) {
      var textStart = openToken.ba + openToken.fG;
      var textEnd = closeToken.ba;
      var text = processText(A3($elm$core$String$slice, textStart, textEnd, rawText));
      var start = openToken.ba;
      var end = closeToken.ba + closeToken.fG;
      var match = { n: end, y: _List_Nil, iy: start, iW: text, L: textEnd, B: textStart, ji: type_ };
      var matches = A2($elm$core$List$map, function(_v0) {
        var matchModel = _v0;
        return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
      }, A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
      return { n: end, y: matches, iy: start, iW: text, L: textEnd, B: textStart, ji: type_ };
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(function(tokens, matches, references, rawText) {
      return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
    });
    var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(function(refs, rawText_) {
      var rawText = $elm$core$String$trim(rawText_);
      var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
      return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, rawText, _List_Nil, $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, " ", $elm$parser$Parser$Expecting(" "))),
      $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, ">", $elm$parser$Parser$Expecting(">"))),
      A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isAlpha, $elm$parser$Parser$Expecting("Alpha")), $elm$parser$Parser$Advanced$chompWhile(function(c) {
        return $elm$core$Char$isAlphaNum(c) || c === "-";
      })), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, ":", $elm$parser$Parser$Expecting(":"))),
        $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, "@", $elm$parser$Parser$Expecting("@"))),
        $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, "\\", $elm$parser$Parser$Expecting("\\"))),
        $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, "+", $elm$parser$Parser$Expecting("+"))),
        $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, ".", $elm$parser$Parser$Expecting(".")))
      ])))
    ]));
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(rawLine, _v0) {
      return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
    }), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, "<", $elm$parser$Parser$Expecting("<"))), $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag), $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
    var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = $elm$core$Basics$identity;
    var $dillonkearns$elm_markdown$Parser$Token$parseString = function(str) {
      return $elm$parser$Parser$Advanced$token(A2($elm$parser$Parser$Advanced$Token, str, $elm$parser$Parser$Expecting(str)));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function(_v0) {
      var curr = _v0.a;
      var acc = _v0.b;
      var _return = A2($elm$core$Maybe$withDefault, $elm$parser$Parser$Advanced$Done(acc), A2($elm$core$Maybe$map, function(cell) {
        return $elm$parser$Parser$Advanced$Done(A2($elm$core$List$cons, cell, acc));
      }, curr));
      var finishCell = A2($elm$core$Maybe$withDefault, $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Nothing, acc)), A2($elm$core$Maybe$map, function(cell) {
        return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Nothing, A2($elm$core$List$cons, cell, acc)));
      }, curr));
      var addToCurrent = function(c) {
        return _Utils_ap(A2($elm$core$Maybe$withDefault, "", curr), c);
      };
      var continueCell = function(c) {
        return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2($elm$core$Maybe$Just(addToCurrent(c)), acc));
      };
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$map, function(_v1) {
          return _return;
        }, $dillonkearns$elm_markdown$Parser$Token$parseString(`|
`)),
        A2($elm$parser$Parser$Advanced$map, function(_v2) {
          return _return;
        }, $dillonkearns$elm_markdown$Parser$Token$parseString(`
`)),
        A2($elm$parser$Parser$Advanced$map, function(_v3) {
          return _return;
        }, $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end"))),
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("|"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\\\|")),
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("\\"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\\\")),
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(continueCell("|"))), $dillonkearns$elm_markdown$Parser$Token$parseString("\\|")),
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$backtrackable($elm$parser$Parser$Advanced$succeed(finishCell)), $dillonkearns$elm_markdown$Parser$Token$parseString("|")),
        A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(_char, _v4) {
          return continueCell(_char);
        }), A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Basics$always(true), $elm$parser$Parser$Problem("No character found")))
      ]));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2($elm$parser$Parser$Advanced$map, A2($elm$core$List$foldl, F2(function(cell, acc) {
      return A2($elm$core$List$cons, $elm$core$String$trim(cell), acc);
    }), _List_Nil), A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil), $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
    var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $dillonkearns$elm_markdown$Parser$Token$parseString("|"),
      $elm$parser$Parser$Advanced$succeed(0)
    ]))), $dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
    var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(function(_v0, headersRow) {
      var columnAlignments = _v0.b;
      var headersWithAlignment = function(headers2) {
        return A3($elm$core$List$map2, F2(function(headerCell, alignment) {
          return { aY: alignment, fz: headerCell };
        }), headers2, columnAlignments);
      };
      var combineHeaderAndDelimiter = function(headers2) {
        return _Utils_eq($elm$core$List$length(headers2), $elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(headersWithAlignment(headers2)) : $elm$core$Result$Err("Tables must have the same number of header columns (" + ($elm$core$String$fromInt($elm$core$List$length(headers2)) + (") as delimiter columns (" + ($elm$core$String$fromInt($elm$core$List$length(columnAlignments)) + ")"))));
      };
      var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
      if (!_v1.$) {
        var headers = _v1.a;
        return combineHeaderAndDelimiter(headers);
      } else {
        return $elm$core$Result$Err("Unable to parse previous line as a table header");
      }
    });
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(function(language, body) {
      return { j8: body, lw: language };
    });
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function(fenceCharacter) {
      var toInfoString = F2(function(str, _v2) {
        var _v1 = $elm$core$String$trim(str);
        if (_v1 === "") {
          return $elm$core$Maybe$Nothing;
        } else {
          var trimmed = _v1;
          return $elm$core$Maybe$Just(trimmed);
        }
      });
      var _v0 = fenceCharacter.fy;
      if (!_v0) {
        return A2($elm$parser$Parser$Advanced$mapChompedString, toInfoString, $elm$parser$Parser$Advanced$chompWhile(function(c) {
          return c !== "`" && !$dillonkearns$elm_markdown$Whitespace$isLineEnd(c);
        }));
      } else {
        return A2($elm$parser$Parser$Advanced$mapChompedString, toInfoString, $elm$parser$Parser$Advanced$chompWhile(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = 0;
    var $dillonkearns$elm_markdown$Parser$Token$backtick = A2($elm$parser$Parser$Advanced$Token, "`", $elm$parser$Parser$Expecting("a '`'"));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = { a_: "`", fy: 0, bu: $dillonkearns$elm_markdown$Parser$Token$backtick };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function(_int) {
      switch (_int) {
        case 1:
          return $elm$parser$Parser$Advanced$succeed(0);
        case 2:
          return $elm$parser$Parser$Advanced$succeed(1);
        case 3:
          return $elm$parser$Parser$Advanced$succeed(2);
        case 4:
          return $elm$parser$Parser$Advanced$succeed(3);
        default:
          return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("Fenced code blocks should be indented no more than 3 spaces"));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(function(minLength, fenceCharacter) {
      var builtTokens = A3($elm$core$List$foldl, F2(function(t, p) {
        return A2($elm$parser$Parser$Advanced$ignorer, p, t);
      }), $elm$parser$Parser$Advanced$succeed(0), A2($elm$core$List$repeat, minLength, $elm$parser$Parser$Advanced$token(fenceCharacter.bu)));
      return A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(str, _v0) {
        return _Utils_Tuple2(fenceCharacter, $elm$core$String$length(str));
      }), A2($elm$parser$Parser$Advanced$ignorer, builtTokens, $elm$parser$Parser$Advanced$chompWhile($elm$core$Basics$eq(fenceCharacter.a_))));
    });
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = 1;
    var $dillonkearns$elm_markdown$Parser$Token$tilde = A2($elm$parser$Parser$Advanced$Token, "~", $elm$parser$Parser$Expecting("a `~`"));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = { a_: "~", fy: 1, bu: $dillonkearns$elm_markdown$Parser$Token$tilde };
    var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Whitespace$space, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Whitespace$space,
        $elm$parser$Parser$Advanced$succeed(0)
      ]))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Whitespace$space,
        $elm$parser$Parser$Advanced$succeed(0)
      ]))),
      $elm$parser$Parser$Advanced$succeed(0)
    ]));
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(F2(function(indent, _v0) {
      var character = _v0.a;
      var length = _v0.b;
      return { a$: character, bQ: indent, fG: length };
    })), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
      A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
    ])));
    var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(" ");
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(function(minLength, fenceCharacter) {
      return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    });
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function(indented) {
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    };
    var $elm$parser$Parser$Advanced$getSource = function(s) {
      return A3($elm$parser$Parser$Advanced$Good, false, s.iv, s);
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function(_v0) {
      var fence = _v0.a;
      var body = _v0.b;
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(body)), $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
        A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(lineEnd, _v1) {
          return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2(fence, _Utils_ap(body, lineEnd)));
        }), $dillonkearns$elm_markdown$Whitespace$lineEnd),
        $elm$parser$Parser$Advanced$backtrackable(A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(body)), A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.fG, fence.a$))),
        A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(F3(function(start, end, source) {
          return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple2(fence, _Utils_ap(body, A3($elm$core$String$slice, start, end, source))));
        })), $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.bQ)), $elm$parser$Parser$Advanced$getOffset), $elm$parser$Parser$Advanced$getSource)
      ]));
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function(fence) {
      return A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple2(fence, ""), $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
    };
    var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2($elm$parser$Parser$Advanced$andThen, function(fence) {
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.a$), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)), $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
    }, $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
    var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function(headingString) {
      dropTrailingHashes:
        while (true) {
          if (A2($elm$core$String$endsWith, "#", headingString)) {
            var $temp$headingString = A2($elm$core$String$dropRight, 1, headingString);
            headingString = $temp$headingString;
            continue dropTrailingHashes;
          } else {
            return headingString;
          }
        }
    };
    var $elm$core$String$trimRight = _String_trimRight;
    var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function(headingString) {
      var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
      return A2($elm$core$String$endsWith, " ", droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
    };
    var $dillonkearns$elm_markdown$Parser$Token$hash = A2($elm$parser$Parser$Advanced$Token, "#", $elm$parser$Parser$Expecting("a `#`"));
    var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function(c) {
      if (c === "#") {
        return true;
      } else {
        return false;
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading), A2($elm$parser$Parser$Advanced$andThen, function(startingSpaces) {
      var startSpace = $elm$core$String$length(startingSpaces);
      return startSpace >= 4 ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("heading with < 4 spaces in front")) : $elm$parser$Parser$Advanced$succeed(startSpace);
    }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)), A2($elm$parser$Parser$Advanced$andThen, function(additionalHashes) {
      var level = $elm$core$String$length(additionalHashes) + 1;
      return level >= 7 ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("heading with < 7 #'s")) : $elm$parser$Parser$Advanced$succeed(level);
    }, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(""), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
      A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
        $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
      ]))), A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(headingText, _v0) {
        return $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence($elm$core$String$trim(headingText));
      }), $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
    ])));
    var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
    var $elm$parser$Parser$Advanced$chompUntil = function(_v0) {
      var str = _v0.a;
      var expecting = _v0.b;
      return function(s) {
        var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.f, s.mu, s.di, s.iv);
        var newOffset = _v1.a;
        var newRow = _v1.b;
        var newCol = _v1.c;
        return _Utils_eq(newOffset, -1) ? A2($elm$parser$Parser$Advanced$Bad, false, A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.m)) : A3($elm$parser$Parser$Advanced$Good, _Utils_cmp(s.f, newOffset) < 0, 0, { di: newCol, m: s.m, q: s.q, f: newOffset, mu: newRow, iv: s.iv });
      };
    };
    var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2($elm$parser$Parser$Advanced$Token, ">", $elm$parser$Parser$Expecting("a `>`"));
    var $elm$parser$Parser$Advanced$Located = F3(function(row, col, context) {
      return { di: col, m: context, mu: row };
    });
    var $elm$parser$Parser$Advanced$changeContext = F2(function(newContext, s) {
      return { di: s.di, m: newContext, q: s.q, f: s.f, mu: s.mu, iv: s.iv };
    });
    var $elm$parser$Parser$Advanced$inContext = F2(function(context, _v0) {
      var parse = _v0;
      return function(s0) {
        var _v1 = parse(A2($elm$parser$Parser$Advanced$changeContext, A2($elm$core$List$cons, A3($elm$parser$Parser$Advanced$Located, s0.mu, s0.di, context), s0.m), s0));
        if (!_v1.$) {
          var p = _v1.a;
          var a = _v1.b;
          var s1 = _v1.c;
          return A3($elm$parser$Parser$Advanced$Good, p, a, A2($elm$parser$Parser$Advanced$changeContext, s0.m, s1));
        } else {
          var step = _v1;
          return step;
        }
      };
    });
    var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function(_char) {
      switch (_char) {
        case " ":
          return true;
        case `
`:
          return true;
        case "\t":
          return true;
        case "\v":
          return true;
        case "\f":
          return true;
        case "\r":
          return true;
        default:
          return false;
      }
    };
    var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2($elm$parser$Parser$Advanced$Token, "<", $elm$parser$Parser$Expecting("a `<`"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2($elm$parser$Parser$Advanced$inContext, "link destination", $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
      $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
    ])));
    var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2($elm$parser$Parser$Advanced$Token, "]", $elm$parser$Parser$Expecting("a `]`"));
    var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2($elm$parser$Parser$Advanced$Token, "[", $elm$parser$Parser$Expecting("a `[`"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "]:", $elm$parser$Parser$Expecting("]:")))));
    var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2($elm$parser$Parser$Advanced$Token, '"', $elm$parser$Parser$Expecting("a double quote"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function(str) {
      return A2($elm$core$String$contains, `

`, str) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("no blank line")) : $elm$parser$Parser$Advanced$succeed(str);
    };
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$chompWhile(function(c) {
      return !$dillonkearns$elm_markdown$Whitespace$isLineEnd(c) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
    }), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$Whitespace$isWhitespace, $elm$parser$Parser$Expecting("Required whitespace")), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
    var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2($elm$parser$Parser$Advanced$Token, "'", $elm$parser$Parser$Expecting("a single quote"));
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function() {
      var inSingleQuotes = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
      var inDoubleQuotes = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine, $elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))), $elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
      return A2($elm$parser$Parser$Advanced$inContext, "title", $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$backtrackable(A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$requiredWhitespace), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
          inDoubleQuotes,
          inSingleQuotes,
          $elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
        ])))),
        A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
      ])));
    }();
    var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2($elm$parser$Parser$Advanced$inContext, "link reference definition", A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(F3(function(label, destination, title) {
      return _Utils_Tuple2(label, { kP: destination, mR: title });
    })), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser, $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $dillonkearns$elm_markdown$Whitespace$lineEnd,
      $elm$parser$Parser$Advanced$succeed(0)
    ]))), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser), $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
    var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = 0;
    var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
    var $dillonkearns$elm_markdown$ThematicBreak$withChar = function(tchar) {
      var token = $dillonkearns$elm_markdown$Parser$Token$parseString($elm$core$String$fromChar(tchar));
      return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), token), $dillonkearns$elm_markdown$ThematicBreak$whitespace), token), $dillonkearns$elm_markdown$ThematicBreak$whitespace), token), $elm$parser$Parser$Advanced$chompWhile(function(c) {
        return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
      })), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
    };
    var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      $dillonkearns$elm_markdown$ThematicBreak$withChar("-"),
      $dillonkearns$elm_markdown$ThematicBreak$withChar("*"),
      $dillonkearns$elm_markdown$ThematicBreak$withChar("_")
    ]));
    var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$space), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Whitespace$space,
        $elm$parser$Parser$Advanced$succeed(0)
      ]))), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Whitespace$space,
        $elm$parser$Parser$Advanced$succeed(0)
      ]))), $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
      $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
    ]));
    var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = 0;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = 1;
    var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(function(a, b) {
      return { $: 13, a, b };
    });
    var $dillonkearns$elm_markdown$Parser$Token$equals = A2($elm$parser$Parser$Advanced$Token, "=", $elm$parser$Parser$Expecting("a `=`"));
    var $dillonkearns$elm_markdown$Parser$Token$minus = A2($elm$parser$Parser$Advanced$Token, "-", $elm$parser$Parser$Expecting("a `-`"));
    var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function() {
      var setextLevel = F3(function(level, levelToken, levelChar) {
        return A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(level), $elm$parser$Parser$Advanced$token(levelToken)), $elm$parser$Parser$Advanced$chompWhile($elm$core$Basics$eq(levelChar)));
      });
      return A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(raw, level) {
        return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
      }), A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces), A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A3(setextLevel, 0, $dillonkearns$elm_markdown$Parser$Token$equals, "="),
        A3(setextLevel, 1, $dillonkearns$elm_markdown$Parser$Token$minus, "-")
      ])), $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
    }();
    var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function(a) {
      return { $: 9, a };
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
    var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function(condition) {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$chompIf, condition, $elm$parser$Parser$Problem("Character not found")),
        $elm$parser$Parser$Advanced$succeed(0)
      ]));
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function(columns) {
      return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Parser$Token$parseString("|"),
        $elm$parser$Parser$Advanced$succeed(0)
      ])) : $dillonkearns$elm_markdown$Parser$Token$parseString("|");
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function(revDelimiterColumns) {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$backtrackable(A2($elm$parser$Parser$Advanced$map, function(_v0) {
          return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
        }, $dillonkearns$elm_markdown$Parser$Token$parseString(`|
`))),
        A2($elm$parser$Parser$Advanced$map, function(_v1) {
          return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
        }, $dillonkearns$elm_markdown$Parser$Token$parseString(`
`)),
        A2($elm$parser$Parser$Advanced$map, function(_v2) {
          return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
        }, $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end"))),
        $elm$parser$Parser$Advanced$backtrackable(A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$parser$Parser$Advanced$Done(revDelimiterColumns)), $dillonkearns$elm_markdown$Parser$Token$parseString("|")), $elm$parser$Parser$Advanced$end($elm$parser$Parser$Expecting("end")))),
        A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(function(column) {
          return $elm$parser$Parser$Advanced$Loop(A2($elm$core$List$cons, column, revDelimiterColumns));
        }), $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)), $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString(A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), $dillonkearns$elm_markdown$Parser$Extra$maybeChomp(function(c) {
          return c === ":";
        })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(function(c) {
          return c === "-";
        })), $dillonkearns$elm_markdown$Parser$Extra$maybeChomp(function(c) {
          return c === ":";
        }))), $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
      ]));
    };
    var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = 2;
    var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = 1;
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function(cell) {
      var _v0 = _Utils_Tuple2(A2($elm$core$String$startsWith, ":", cell), A2($elm$core$String$endsWith, ":", cell));
      if (_v0.a) {
        if (_v0.b) {
          return $elm$core$Maybe$Just(2);
        } else {
          return $elm$core$Maybe$Just(0);
        }
      } else {
        if (_v0.b) {
          return $elm$core$Maybe$Just(1);
        } else {
          return $elm$core$Maybe$Nothing;
        }
      }
    };
    var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2($elm$parser$Parser$Advanced$andThen, function(delimiterRow) {
      var trimmed = delimiterRow.a.jg;
      var headers = delimiterRow.b;
      return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Expecting("Must have at least one column in delimiter row.")) : $elm$core$List$length(headers) === 1 && !(A2($elm$core$String$startsWith, "|", trimmed) && A2($elm$core$String$endsWith, "|", trimmed)) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.")) : $elm$parser$Parser$Advanced$succeed(delimiterRow);
    }, A2($elm$parser$Parser$Advanced$mapChompedString, F2(function(delimiterText, revDelimiterColumns) {
      return A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, {
        hy: delimiterText,
        jg: $elm$core$String$trim(delimiterText)
      }, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment, $elm$core$List$reverse(revDelimiterColumns)));
    }), A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
    var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
    var $elm$core$List$takeReverse = F3(function(n, list, kept) {
      takeReverse:
        while (true) {
          if (n <= 0) {
            return kept;
          } else {
            if (!list.b) {
              return kept;
            } else {
              var x2 = list.a;
              var xs = list.b;
              var $temp$n = n - 1, $temp$list = xs, $temp$kept = A2($elm$core$List$cons, x2, kept);
              n = $temp$n;
              list = $temp$list;
              kept = $temp$kept;
              continue takeReverse;
            }
          }
        }
    });
    var $elm$core$List$takeTailRec = F2(function(n, list) {
      return $elm$core$List$reverse(A3($elm$core$List$takeReverse, n, list, _List_Nil));
    });
    var $elm$core$List$takeFast = F3(function(ctr, n, list) {
      if (n <= 0) {
        return _List_Nil;
      } else {
        var _v0 = _Utils_Tuple2(n, list);
        _v0$1:
          while (true) {
            _v0$5:
              while (true) {
                if (!_v0.b.b) {
                  return list;
                } else {
                  if (_v0.b.b.b) {
                    switch (_v0.a) {
                      case 1:
                        break _v0$1;
                      case 2:
                        var _v2 = _v0.b;
                        var x2 = _v2.a;
                        var _v3 = _v2.b;
                        var y2 = _v3.a;
                        return _List_fromArray([x2, y2]);
                      case 3:
                        if (_v0.b.b.b.b) {
                          var _v4 = _v0.b;
                          var x2 = _v4.a;
                          var _v5 = _v4.b;
                          var y2 = _v5.a;
                          var _v6 = _v5.b;
                          var z = _v6.a;
                          return _List_fromArray([x2, y2, z]);
                        } else {
                          break _v0$5;
                        }
                      default:
                        if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
                          var _v7 = _v0.b;
                          var x2 = _v7.a;
                          var _v8 = _v7.b;
                          var y2 = _v8.a;
                          var _v9 = _v8.b;
                          var z = _v9.a;
                          var _v10 = _v9.b;
                          var w = _v10.a;
                          var tl = _v10.b;
                          return ctr > 1000 ? A2($elm$core$List$cons, x2, A2($elm$core$List$cons, y2, A2($elm$core$List$cons, z, A2($elm$core$List$cons, w, A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2($elm$core$List$cons, x2, A2($elm$core$List$cons, y2, A2($elm$core$List$cons, z, A2($elm$core$List$cons, w, A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
                        } else {
                          break _v0$5;
                        }
                    }
                  } else {
                    if (_v0.a === 1) {
                      break _v0$1;
                    } else {
                      break _v0$5;
                    }
                  }
                }
              }
            return list;
          }
        var _v1 = _v0.b;
        var x2 = _v1.a;
        return _List_fromArray([x2]);
      }
    });
    var $elm$core$List$take = F2(function(n, list) {
      return A3($elm$core$List$takeFast, 0, n, list);
    });
    var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(function(expectedLength, row) {
      var rowLength = $elm$core$List$length(row);
      var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
      switch (_v0) {
        case 0:
          return A2($elm$core$List$take, expectedLength, row);
        case 1:
          return row;
        default:
          return _Utils_ap(row, A2($elm$core$List$repeat, expectedLength - rowLength, ""));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function(expectedRowLength) {
      return A2($elm$parser$Parser$Advanced$andThen, function(row) {
        return $elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row) ? $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem("A line must have at least one column")) : $elm$parser$Parser$Advanced$succeed(A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
      }, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function(_v0) {
      var headers = _v0.a;
      var body = _v0.b;
      return A2($elm$parser$Parser$Advanced$map, function(row) {
        return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _Utils_ap(body, _List_fromArray([row]))));
      }, $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser($elm$core$List$length(headers)));
    };
    var $dillonkearns$elm_markdown$Markdown$Block$H1 = 0;
    var $dillonkearns$elm_markdown$Markdown$Block$H2 = 1;
    var $dillonkearns$elm_markdown$Markdown$Block$H3 = 2;
    var $dillonkearns$elm_markdown$Markdown$Block$H4 = 3;
    var $dillonkearns$elm_markdown$Markdown$Block$H5 = 4;
    var $dillonkearns$elm_markdown$Markdown$Block$H6 = 5;
    var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function(level) {
      switch (level) {
        case 1:
          return $elm$core$Result$Ok(0);
        case 2:
          return $elm$core$Result$Ok(1);
        case 3:
          return $elm$core$Result$Ok(2);
        case 4:
          return $elm$core$Result$Ok(3);
        case 5:
          return $elm$core$Result$Ok(4);
        case 6:
          return $elm$core$Result$Ok(5);
        default:
          return $elm$core$Result$Err($elm$parser$Parser$Expecting("A heading with 1 to 6 #'s, but found " + $elm$core$String$fromInt(level)));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = { $: 2 };
    var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function(a) {
      return { $: 1, a };
    };
    var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4(function(markerStartPos, listMarker, markerEndPos, _v0) {
      var bodyStartPos = _v0.a;
      var item = _v0.b;
      var spaceNum = bodyStartPos - markerEndPos;
      if (spaceNum <= 4) {
        return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
      } else {
        var intendedCodeItem = function() {
          switch (item.$) {
            case 0:
              var completion = item.a;
              var string = item.b;
              return A2($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem, completion, _Utils_ap(A2($elm$core$String$repeat, spaceNum - 1, " "), string));
            case 1:
              var string = item.a;
              return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(_Utils_ap(A2($elm$core$String$repeat, spaceNum - 1, " "), string));
            default:
              return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
          }
        }();
        return _Utils_Tuple3(listMarker, markerEndPos - markerStartPos + 1, intendedCodeItem);
      }
    });
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed(function(bodyStartPos) {
      return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
    }), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = 1;
    var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = 0;
    var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "[x] ", $elm$parser$Parser$ExpectingSymbol("[x] ")))),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "[X] ", $elm$parser$Parser$ExpectingSymbol("[X] ")))),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "[ ] ", $elm$parser$Parser$ExpectingSymbol("[ ] "))))
    ]));
    var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem), A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser, $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
      $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
    ])), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(F2(function(bodyStartPos, item) {
      return _Utils_Tuple2(bodyStartPos, item);
    })), $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)), $elm$parser$Parser$Advanced$getCol), $dillonkearns$elm_markdown$Markdown$ListItem$parser);
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = 2;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = 0;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = 1;
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
      A2($elm$parser$Parser$Advanced$ignorer, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(0), A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "-", $elm$parser$Parser$ExpectingSymbol("-")))),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(1), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "+", $elm$parser$Parser$ExpectingSymbol("+")))),
      A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed(2), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, "*", $elm$parser$Parser$ExpectingSymbol("*"))))
    ]));
    var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function(previousWasBody) {
      return A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$keeper, $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem), $elm$parser$Parser$Advanced$getCol), $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)), $elm$parser$Parser$Advanced$getCol), previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function(previousWasBody) {
      var parseListItem = F2(function(listmarker, unparsedListItem) {
        switch (unparsedListItem.$) {
          case 0:
            var completion = unparsedListItem.a;
            var body = unparsedListItem.b;
            return {
              j8: body,
              lE: listmarker,
              v: $elm$core$Maybe$Just(function() {
                if (completion === 1) {
                  return true;
                } else {
                  return false;
                }
              }())
            };
          case 1:
            var body = unparsedListItem.a;
            return { j8: body, lE: listmarker, v: $elm$core$Maybe$Nothing };
          default:
            return { j8: "", lE: listmarker, v: $elm$core$Maybe$Nothing };
        }
      });
      return A2($elm$parser$Parser$Advanced$map, function(_v0) {
        var listmarker = _v0.a;
        var intended = _v0.b;
        var unparsedListItem = _v0.c;
        return A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, true, intended, _List_Nil, A2(parseListItem, listmarker, unparsedListItem));
      }, $dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
    };
    var $elm$core$Result$withDefault = F2(function(def, result) {
      if (!result.$) {
        var a = result.a;
        return a;
      } else {
        return def;
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(function(node, blocks) {
      switch (node.$) {
        case 0:
          var tag = node.a;
          var attributes = node.b;
          var children = node.c;
          var _v106 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
          if (!_v106.$) {
            var childrenAsBlocks = _v106.a;
            var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
            return $elm$core$Result$Ok(A2($elm$core$List$cons, block, blocks));
          } else {
            var err = _v106.a;
            return $elm$core$Result$Err(err);
          }
        case 1:
          var innerText = node.a;
          var _v107 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
          if (!_v107.$) {
            var value = _v107.a;
            return $elm$core$Result$Ok(_Utils_ap($elm$core$List$reverse(value), blocks));
          } else {
            var error = _v107.a;
            return $elm$core$Result$Err($elm$parser$Parser$Expecting(A2($elm$core$String$join, `
`, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
          }
        case 2:
          var string = node.a;
          return $elm$core$Result$Ok(A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)), blocks));
        case 3:
          var string = node.a;
          return $elm$core$Result$Ok(A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$Cdata(string)), blocks));
        case 4:
          var string = node.a;
          return $elm$core$Result$Ok(A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)), blocks));
        default:
          var declarationType = node.a;
          var content = node.b;
          return $elm$core$Result$Ok(A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)), blocks));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function(state) {
      var _v91 = state.b;
      _v91$5:
        while (true) {
          if (_v91.b) {
            switch (_v91.a.$) {
              case 11:
                var body2 = _v91.a.a;
                var rest = _v91.b;
                var _v92 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                if (!_v92.$) {
                  var value = _v92.a;
                  return $elm$parser$Parser$Advanced$succeed({
                    a: _Utils_ap(state.a, value.a),
                    b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.b), rest)
                  });
                } else {
                  var error = _v92.a;
                  return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
                }
              case 3:
                var _v93 = _v91.a;
                var tight = _v93.a;
                var intended = _v93.b;
                var closeListItems = _v93.c;
                var openListItem = _v93.d;
                var rest = _v91.b;
                var _v94 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem.j8);
                if (!_v94.$) {
                  var value = _v94.a;
                  var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                  return $elm$parser$Parser$Advanced$succeed({
                    a: _Utils_ap(state.a, value.a),
                    b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight2, intended, A2($elm$core$List$cons, { j8: value.b, v: openListItem.v }, closeListItems), openListItem), rest)
                  });
                } else {
                  var e = _v94.a;
                  return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                }
              case 4:
                var _v99 = _v91.a;
                var tight = _v99.a;
                var intended = _v99.b;
                var marker = _v99.c;
                var order = _v99.d;
                var closeListItems = _v99.e;
                var openListItem = _v99.f;
                var rest = _v91.b;
                var _v100 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem);
                if (!_v100.$) {
                  var value = _v100.a;
                  var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                  return $elm$parser$Parser$Advanced$succeed({
                    a: _Utils_ap(state.a, value.a),
                    b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight2, intended, marker, order, A2($elm$core$List$cons, value.b, closeListItems), openListItem), rest)
                  });
                } else {
                  var e = _v100.a;
                  return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                }
              case 10:
                if (_v91.b.b) {
                  switch (_v91.b.a.$) {
                    case 3:
                      var _v95 = _v91.a;
                      var _v96 = _v91.b;
                      var _v97 = _v96.a;
                      var tight = _v97.a;
                      var intended = _v97.b;
                      var closeListItems = _v97.c;
                      var openListItem = _v97.d;
                      var rest = _v96.b;
                      var _v98 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem.j8);
                      if (!_v98.$) {
                        var value = _v98.a;
                        var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                        return $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight2, intended, A2($elm$core$List$cons, { j8: value.b, v: openListItem.v }, closeListItems), openListItem), rest)
                        });
                      } else {
                        var e = _v98.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    case 4:
                      var _v101 = _v91.a;
                      var _v102 = _v91.b;
                      var _v103 = _v102.a;
                      var tight = _v103.a;
                      var intended = _v103.b;
                      var marker = _v103.c;
                      var order = _v103.d;
                      var closeListItems = _v103.e;
                      var openListItem = _v103.f;
                      var rest = _v102.b;
                      var _v104 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem);
                      if (!_v104.$) {
                        var value = _v104.a;
                        var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                        return $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight2, intended, marker, order, A2($elm$core$List$cons, value.b, closeListItems), openListItem), rest)
                        });
                      } else {
                        var e = _v104.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    default:
                      break _v91$5;
                  }
                } else {
                  break _v91$5;
                }
              default:
                break _v91$5;
            }
          } else {
            break _v91$5;
          }
        }
      return $elm$parser$Parser$Advanced$succeed(state);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(function(state, newRawBlock) {
      var _v41 = _Utils_Tuple2(newRawBlock, state.b);
      _v41$13:
        while (true) {
          if (_v41.b.b) {
            switch (_v41.b.a.$) {
              case 5:
                if (_v41.a.$ === 5) {
                  var block1 = _v41.a.a;
                  var _v42 = _v41.b;
                  var block2 = _v42.a.a;
                  var rest = _v42.b;
                  return $elm$parser$Parser$Advanced$succeed({
                    a: state.a,
                    b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock({
                      j8: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.j8, block1.j8),
                      lw: $elm$core$Maybe$Nothing
                    }), rest)
                  });
                } else {
                  break _v41$13;
                }
              case 6:
                switch (_v41.a.$) {
                  case 6:
                    var block1 = _v41.a.a;
                    var _v43 = _v41.b;
                    var block2 = _v43.a.a;
                    var rest = _v43.b;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)), rest)
                    });
                  case 10:
                    var _v44 = _v41.a;
                    var _v45 = _v41.b;
                    var block = _v45.a.a;
                    var rest = _v45.b;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block, `
`)), rest)
                    });
                  default:
                    break _v41$13;
                }
              case 11:
                var _v46 = _v41.b;
                var body2 = _v46.a.a;
                var rest = _v46.b;
                switch (newRawBlock.$) {
                  case 11:
                    var body1 = newRawBlock.a;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)), rest)
                    });
                  case 1:
                    var body1 = newRawBlock.a;
                    var _v48 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                    if (!_v48.$) {
                      var value = _v48.a;
                      var _v49 = value.b;
                      if (_v49.b) {
                        var last = _v49.a;
                        if ($dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph(last) && !A2($elm$core$String$endsWith, `
`, body2)) {
                          return $elm$parser$Parser$Advanced$succeed({
                            a: state.a,
                            b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)), rest)
                          });
                        } else {
                          var _v50 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                          if (!_v50.$) {
                            var value1 = _v50.a;
                            return $elm$parser$Parser$Advanced$succeed({
                              a: _Utils_ap(state.a, value.a),
                              b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                            });
                          } else {
                            var e1 = _v50.a;
                            return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                          }
                        }
                      } else {
                        var _v51 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                        if (!_v51.$) {
                          var value1 = _v51.a;
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                          });
                        } else {
                          var e1 = _v51.a;
                          return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                        }
                      }
                    } else {
                      var e = _v48.a;
                      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                    }
                  case 6:
                    var body1 = newRawBlock.a;
                    var _v52 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                    if (!_v52.$) {
                      var value = _v52.a;
                      var _v53 = value.b;
                      if (_v53.b && _v53.a.$ === 1) {
                        return $elm$parser$Parser$Advanced$succeed({
                          a: state.a,
                          b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, " ", body2, body1)), rest)
                        });
                      } else {
                        var _v54 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                        if (!_v54.$) {
                          var value1 = _v54.a;
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.b), rest))
                          });
                        } else {
                          var e1 = _v54.a;
                          return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
                        }
                      }
                    } else {
                      var e = _v52.a;
                      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                    }
                  default:
                    var _v55 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), body2);
                    if (!_v55.$) {
                      var value = _v55.a;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: _Utils_ap(state.a, value.a),
                        b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.b), rest))
                      });
                    } else {
                      var e = _v55.a;
                      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                    }
                }
              case 3:
                var _v56 = _v41.b;
                var _v57 = _v56.a;
                var tight = _v57.a;
                var intended1 = _v57.b;
                var closeListItems2 = _v57.c;
                var openListItem2 = _v57.d;
                var rest = _v56.b;
                switch (newRawBlock.$) {
                  case 3:
                    var intended2 = newRawBlock.b;
                    var openListItem1 = newRawBlock.d;
                    if (_Utils_eq(openListItem2.lE, openListItem1.lE)) {
                      var _v59 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.j8);
                      if (!_v59.$) {
                        var value = _v59.a;
                        return A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, false, intended2, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem1), rest)
                        }) : $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended2, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem1), rest)
                        });
                      } else {
                        var e = _v59.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    } else {
                      var _v60 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.j8);
                      if (!_v60.$) {
                        var value = _v60.a;
                        var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                        return $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight2, intended1, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem1), rest))
                        });
                      } else {
                        var e = _v60.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    }
                  case 1:
                    var body1 = newRawBlock.a;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended1, closeListItems2, _Utils_update(openListItem2, {
                        j8: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, `
`, openListItem2.j8, body1)
                      })), rest)
                    });
                  default:
                    var _v61 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.j8);
                    if (!_v61.$) {
                      var value = _v61.a;
                      var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: _Utils_ap(state.a, value.a),
                        b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight2, intended1, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem2), rest))
                      });
                    } else {
                      var e = _v61.a;
                      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                    }
                }
              case 4:
                var _v62 = _v41.b;
                var _v63 = _v62.a;
                var tight = _v63.a;
                var intended1 = _v63.b;
                var marker = _v63.c;
                var order = _v63.d;
                var closeListItems2 = _v63.e;
                var openListItem2 = _v63.f;
                var rest = _v62.b;
                switch (newRawBlock.$) {
                  case 4:
                    var intended2 = newRawBlock.b;
                    var marker2 = newRawBlock.c;
                    var openListItem1 = newRawBlock.f;
                    if (_Utils_eq(marker, marker2)) {
                      var _v65 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                      if (!_v65.$) {
                        var value = _v65.a;
                        var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                        return $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight2, intended2, marker, order, A2($elm$core$List$cons, value.b, closeListItems2), openListItem1), rest)
                        });
                      } else {
                        var e = _v65.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    } else {
                      var _v66 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                      if (!_v66.$) {
                        var value = _v66.a;
                        var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                        return $elm$parser$Parser$Advanced$succeed({
                          a: _Utils_ap(state.a, value.a),
                          b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight2, intended1, marker, order, A2($elm$core$List$cons, value.b, closeListItems2), openListItem2), rest))
                        });
                      } else {
                        var e = _v66.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    }
                  case 1:
                    var body1 = newRawBlock.a;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + (`
` + body1)), rest)
                    });
                  default:
                    var _v67 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                    if (!_v67.$) {
                      var value = _v67.a;
                      var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.b) ? false : tight;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: _Utils_ap(state.a, value.a),
                        b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight2, intended1, marker, order, A2($elm$core$List$cons, value.b, closeListItems2), openListItem2), rest))
                      });
                    } else {
                      var e = _v67.a;
                      return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                    }
                }
              case 1:
                switch (_v41.a.$) {
                  case 1:
                    var body1 = _v41.a.a;
                    var _v68 = _v41.b;
                    var body2 = _v68.a.a;
                    var rest = _v68.b;
                    return $elm$parser$Parser$Advanced$succeed({
                      a: state.a,
                      b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, `
`, body2, body1)), rest)
                    });
                  case 13:
                    if (!_v41.a.a) {
                      var _v69 = _v41.a;
                      var _v70 = _v69.a;
                      var _v71 = _v41.b;
                      var unparsedInlines = _v71.a.a;
                      var rest = _v71.b;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: state.a,
                        b: A2($elm$core$List$cons, A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines), rest)
                      });
                    } else {
                      var _v72 = _v41.a;
                      var _v73 = _v72.a;
                      var _v74 = _v41.b;
                      var unparsedInlines = _v74.a.a;
                      var rest = _v74.b;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: state.a,
                        b: A2($elm$core$List$cons, A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines), rest)
                      });
                    }
                  case 9:
                    var _v75 = _v41.a.a;
                    var text = _v75.a;
                    var alignments = _v75.b;
                    var _v76 = _v41.b;
                    var rawHeaders = _v76.a.a;
                    var rest = _v76.b;
                    var _v77 = A2($dillonkearns$elm_markdown$Markdown$TableParser$parseHeader, A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments), rawHeaders);
                    if (!_v77.$) {
                      var headers = _v77.a;
                      return $elm$parser$Parser$Advanced$succeed({
                        a: state.a,
                        b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$Table(A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)), rest)
                      });
                    } else {
                      return $elm$parser$Parser$Advanced$succeed({
                        a: state.a,
                        b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, `
`, rawHeaders, text.hy)), rest)
                      });
                    }
                  default:
                    break _v41$13;
                }
              case 8:
                if (_v41.a.$ === 8) {
                  var updatedTable = _v41.a.a;
                  var _v78 = _v41.b;
                  var rest = _v78.b;
                  return $elm$parser$Parser$Advanced$succeed({
                    a: state.a,
                    b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable), rest)
                  });
                } else {
                  break _v41$13;
                }
              case 10:
                if (_v41.b.b.b) {
                  switch (_v41.b.b.a.$) {
                    case 4:
                      var _v79 = _v41.b;
                      var _v80 = _v79.a;
                      var _v81 = _v79.b;
                      var _v82 = _v81.a;
                      var tight = _v82.a;
                      var intended1 = _v82.b;
                      var marker = _v82.c;
                      var order = _v82.d;
                      var closeListItems2 = _v82.e;
                      var openListItem2 = _v82.f;
                      var rest = _v81.b;
                      var _v83 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2);
                      if (!_v83.$) {
                        var value = _v83.a;
                        if (newRawBlock.$ === 4) {
                          var intended2 = newRawBlock.b;
                          var openListItem = newRawBlock.f;
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, false, intended2, marker, order, A2($elm$core$List$cons, value.b, closeListItems2), openListItem), rest)
                          });
                        } else {
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, A2($elm$core$List$cons, value.b, closeListItems2), openListItem2), rest)))
                          });
                        }
                      } else {
                        var e = _v83.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    case 3:
                      var _v85 = _v41.b;
                      var _v86 = _v85.a;
                      var _v87 = _v85.b;
                      var _v88 = _v87.a;
                      var tight = _v88.a;
                      var intended1 = _v88.b;
                      var closeListItems2 = _v88.c;
                      var openListItem2 = _v88.d;
                      var rest = _v87.b;
                      var _v89 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), openListItem2.j8);
                      if (!_v89.$) {
                        var value = _v89.a;
                        if (newRawBlock.$ === 3) {
                          var openListItem = newRawBlock.d;
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, false, intended1, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem), rest)
                          });
                        } else {
                          return $elm$parser$Parser$Advanced$succeed({
                            a: _Utils_ap(state.a, value.a),
                            b: A2($elm$core$List$cons, newRawBlock, A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended1, A2($elm$core$List$cons, { j8: value.b, v: openListItem2.v }, closeListItems2), openListItem2), rest)))
                          });
                        }
                      } else {
                        var e = _v89.a;
                        return $elm$parser$Parser$Advanced$problem($elm$parser$Parser$Problem($dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
                      }
                    default:
                      break _v41$13;
                  }
                } else {
                  break _v41$13;
                }
              default:
                break _v41$13;
            }
          } else {
            break _v41$13;
          }
        }
      return $elm$parser$Parser$Advanced$succeed({
        a: state.a,
        b: A2($elm$core$List$cons, newRawBlock, state.b)
      });
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(function(referencesDict, _v36) {
      var unparsedInlines = _v36;
      var mappedReferencesDict = $elm$core$Dict$fromList(A2($elm$core$List$map, $elm$core$Tuple$mapSecond(function(_v37) {
        var destination = _v37.kP;
        var title = _v37.mR;
        return _Utils_Tuple2(destination, title);
      }), referencesDict));
      return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function(inline) {
      switch (inline.$) {
        case 0:
          var string = inline.a;
          return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
        case 1:
          return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
        case 2:
          var string = inline.a;
          return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
        case 3:
          var string = inline.a;
          var maybeString = inline.b;
          var inlines = inline.c;
          return A3($dillonkearns$elm_markdown$Markdown$Block$Link, string, maybeString, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
        case 4:
          var string = inline.a;
          var maybeString = inline.b;
          var inlines = inline.c;
          return A3($dillonkearns$elm_markdown$Markdown$Block$Image, string, maybeString, A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
        case 5:
          var node = inline.a;
          return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline($dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
        case 6:
          var level = inline.a;
          var inlines = inline.b;
          switch (level) {
            case 1:
              return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
            case 2:
              return $dillonkearns$elm_markdown$Markdown$Block$Strong(A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
            default:
              return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(_List_fromArray([
                $dillonkearns$elm_markdown$Markdown$Parser$mapInline(A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 2, inlines))
              ])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(_List_fromArray([
                $dillonkearns$elm_markdown$Markdown$Parser$mapInline(A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 1, inlines))
              ]));
          }
        default:
          var inlines = inline.a;
          return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function(node) {
      switch (node.$) {
        case 1:
          return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment("TODO this never happens, but use types to drop this case.");
        case 0:
          var tag = node.a;
          var attributes = node.b;
          var children = node.c;
          var parseChild = function(child) {
            if (child.$ === 1) {
              var text = child.a;
              return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
            } else {
              return _List_fromArray([
                $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock($dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
              ]);
            }
          };
          return A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, A2($elm$core$List$concatMap, parseChild, children));
        case 2:
          var string = node.a;
          return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
        case 3:
          var string = node.a;
          return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
        case 4:
          var string = node.a;
          return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
        default:
          var declarationType = node.a;
          var content = node.b;
          return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function(children) {
      return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(function(remaining, soFar) {
      nodesToBlocksHelp:
        while (true) {
          if (remaining.b) {
            var node = remaining.a;
            var rest = remaining.b;
            var _v31 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
            if (!_v31.$) {
              var newSoFar = _v31.a;
              var $temp$remaining = rest, $temp$soFar = newSoFar;
              remaining = $temp$remaining;
              soFar = $temp$soFar;
              continue nodesToBlocksHelp;
            } else {
              var e = _v31.a;
              return $elm$core$Result$Err(e);
            }
          } else {
            return $elm$core$Result$Ok($elm$core$List$reverse(soFar));
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$parse = function(input) {
      var _v27 = A2($elm$parser$Parser$Advanced$run, A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(), $dillonkearns$elm_markdown$Helpers$endOfFile), input);
      if (_v27.$ === 1) {
        var e = _v27.a;
        return $elm$core$Result$Err(e);
      } else {
        var v = _v27.a;
        var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
        if (_v28.$ === 1) {
          var e = _v28.a;
          return A2($elm$parser$Parser$Advanced$run, $elm$parser$Parser$Advanced$problem(e), "");
        } else {
          var blocks = _v28.a;
          var isNotEmptyParagraph = function(block) {
            if (block.$ === 5 && !block.a.b) {
              return false;
            } else {
              return true;
            }
          };
          return $elm$core$Result$Ok(A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
        }
      }
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function(state) {
      return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.b, _List_Nil);
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(function(state, rawBlocks, parsedBlocks) {
      parseAllInlinesHelp:
        while (true) {
          if (rawBlocks.b) {
            var rawBlock = rawBlocks.a;
            var rest = rawBlocks.b;
            var _v26 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.a, rawBlock);
            switch (_v26.$) {
              case 1:
                var newParsedBlock = _v26.a;
                var $temp$state = state, $temp$rawBlocks = rest, $temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
                state = $temp$state;
                rawBlocks = $temp$rawBlocks;
                parsedBlocks = $temp$parsedBlocks;
                continue parseAllInlinesHelp;
              case 0:
                var $temp$state = state, $temp$rawBlocks = rest, $temp$parsedBlocks = parsedBlocks;
                state = $temp$state;
                rawBlocks = $temp$rawBlocks;
                parsedBlocks = $temp$parsedBlocks;
                continue parseAllInlinesHelp;
              default:
                var e = _v26.a;
                return $elm$core$Result$Err(e);
            }
          } else {
            return $elm$core$Result$Ok(parsedBlocks);
          }
        }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(function(linkReferences, header) {
      return A2($elm$core$List$map, function(_v24) {
        var label = _v24.fz;
        var alignment = _v24.aY;
        return A3($dillonkearns$elm_markdown$Markdown$Parser$parseRawInline, linkReferences, function(parsedHeaderLabel) {
          return { aY: alignment, fz: parsedHeaderLabel };
        }, label);
      }, header);
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(function(linkReferences, rawBlock) {
      switch (rawBlock.$) {
        case 0:
          var level = rawBlock.a;
          var unparsedInlines = rawBlock.b;
          var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
          if (!_v17.$) {
            var parsedLevel = _v17.a;
            return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(A2($dillonkearns$elm_markdown$Markdown$Block$Heading, parsedLevel, A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
          } else {
            var e = _v17.a;
            return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
          }
        case 1:
          var unparsedInlines = rawBlock.a;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph(A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
        case 2:
          var html = rawBlock.a;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
        case 3:
          var tight = rawBlock.a;
          var unparsedItems = rawBlock.c;
          var parseItem = F2(function(rawBlockTask, rawBlocks2) {
            var blocksTask = function() {
              if (!rawBlockTask.$) {
                if (!rawBlockTask.a) {
                  return 1;
                } else {
                  return 2;
                }
              } else {
                return 0;
              }
            }();
            var blocks = function() {
              var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks2 });
              if (!_v18.$) {
                var parsedBlocks2 = _v18.a;
                return parsedBlocks2;
              } else {
                return _List_Nil;
              }
            }();
            return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, blocksTask, blocks);
          });
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(A2($dillonkearns$elm_markdown$Markdown$Block$UnorderedList, $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight), $elm$core$List$reverse(A2($elm$core$List$map, function(item) {
            return A2(parseItem, item.v, item.j8);
          }, unparsedItems))));
        case 4:
          var tight = rawBlock.a;
          var startingIndex = rawBlock.d;
          var unparsedItems = rawBlock.e;
          var parseItem = function(rawBlocks2) {
            var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks2 });
            if (!_v20.$) {
              var parsedBlocks2 = _v20.a;
              return parsedBlocks2;
            } else {
              return _List_Nil;
            }
          };
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(A3($dillonkearns$elm_markdown$Markdown$Block$OrderedList, $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight), startingIndex, $elm$core$List$reverse(A2($elm$core$List$map, parseItem, unparsedItems))));
        case 5:
          var codeBlock = rawBlock.a;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
        case 7:
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
        case 10:
          return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
        case 11:
          return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
        case 12:
          var rawBlocks = rawBlock.a;
          var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines({ a: linkReferences, b: rawBlocks });
          if (!_v21.$) {
            var parsedBlocks = _v21.a;
            return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
          } else {
            var e = _v21.a;
            return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
          }
        case 6:
          var codeBlockBody = rawBlock.a;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$CodeBlock({ j8: codeBlockBody, lw: $elm$core$Maybe$Nothing }));
        case 8:
          var _v22 = rawBlock.a;
          var header = _v22.a;
          var rows = _v22.b;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(A2($dillonkearns$elm_markdown$Markdown$Block$Table, A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header), A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
        case 9:
          var _v23 = rawBlock.a;
          var text = _v23.a;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph(A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, text.hy)));
        default:
          var raw = rawBlock.b;
          return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$Paragraph(A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, raw)));
      }
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(function(linkReferences, wrap, unparsedInlines) {
      return wrap(A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(function(linkReferences, rows) {
      return A2($elm$core$List$map, function(row) {
        return A2($elm$core$List$map, function(column) {
          return A3($dillonkearns$elm_markdown$Markdown$Parser$parseRawInline, linkReferences, $elm$core$Basics$identity, column);
        }, row);
      }, rows);
    });
    var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function(revStmts) {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        A2($elm$parser$Parser$Advanced$map, function(_v2) {
          return $elm$parser$Parser$Advanced$Done(revStmts);
        }, $dillonkearns$elm_markdown$Helpers$endOfFile),
        A2($elm$parser$Parser$Advanced$map, function(reference) {
          return $elm$parser$Parser$Advanced$Loop(A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
        }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
        function() {
          var _v3 = revStmts.b;
          _v3$6:
            while (true) {
              if (_v3.b) {
                switch (_v3.a.$) {
                  case 1:
                    return A2($elm$parser$Parser$Advanced$map, function(block) {
                      return $elm$parser$Parser$Advanced$Loop(block);
                    }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
                  case 8:
                    var table = _v3.a.a;
                    return A2($elm$parser$Parser$Advanced$map, function(block) {
                      return $elm$parser$Parser$Advanced$Loop(block);
                    }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                      $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
                      $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
                    ]))));
                  case 3:
                    var _v4 = _v3.a;
                    var tight = _v4.a;
                    var intended = _v4.b;
                    var closeListItems = _v4.c;
                    var openListItem = _v4.d;
                    var rest = _v3.b;
                    var completeOrMergeUnorderedListBlockBlankLine = F2(function(state, newString) {
                      return _Utils_update(state, {
                        b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended, closeListItems, _Utils_update(openListItem, {
                          j8: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, "", openListItem.j8, newString)
                        })), rest))
                      });
                    });
                    var completeOrMergeUnorderedListBlock = F2(function(state, newString) {
                      return _Utils_update(state, {
                        b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended, closeListItems, _Utils_update(openListItem, {
                          j8: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, `
`, openListItem.j8, newString)
                        })), rest)
                      });
                    });
                    return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$map, function(_v5) {
                        return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, `
`);
                      }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$map, completeOrMergeUnorderedListBlock(revStmts), A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, A2($elm$core$String$repeat, intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
                    ]));
                  case 4:
                    var _v10 = _v3.a;
                    var tight = _v10.a;
                    var intended = _v10.b;
                    var marker = _v10.c;
                    var order = _v10.d;
                    var closeListItems = _v10.e;
                    var openListItem = _v10.f;
                    var rest = _v3.b;
                    var completeOrMergeUnorderedListBlockBlankLine = F2(function(state, newString) {
                      return _Utils_update(state, {
                        b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + (`
` + newString)), rest))
                      });
                    });
                    var completeOrMergeUnorderedListBlock = F2(function(state, newString) {
                      return _Utils_update(state, {
                        b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + (`
` + newString)), rest)
                      });
                    });
                    return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$map, function(_v11) {
                        return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, `
`);
                      }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$map, completeOrMergeUnorderedListBlock(revStmts), A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, A2($elm$core$String$repeat, intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                      A2($elm$parser$Parser$Advanced$map, function(block) {
                        return $elm$parser$Parser$Advanced$Loop(block);
                      }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
                    ]));
                  case 10:
                    if (_v3.b.b) {
                      switch (_v3.b.a.$) {
                        case 3:
                          var _v6 = _v3.a;
                          var _v7 = _v3.b;
                          var _v8 = _v7.a;
                          var tight = _v8.a;
                          var intended = _v8.b;
                          var closeListItems = _v8.c;
                          var openListItem = _v8.d;
                          var rest = _v7.b;
                          var completeOrMergeUnorderedListBlockBlankLine = F2(function(state, newString) {
                            return _Utils_update(state, {
                              b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended, closeListItems, _Utils_update(openListItem, {
                                j8: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, "", openListItem.j8, newString)
                              })), rest))
                            });
                          });
                          var completeOrMergeUnorderedListBlock = F2(function(state, newString) {
                            return _Utils_update(state, {
                              b: A2($elm$core$List$cons, A4($dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock, tight, intended, closeListItems, _Utils_update(openListItem, {
                                j8: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, `
`, openListItem.j8, newString)
                              })), rest)
                            });
                          });
                          return $elm$core$String$trim(openListItem.j8) === "" ? A2($elm$parser$Parser$Advanced$map, function(block) {
                            return $elm$parser$Parser$Advanced$Loop(block);
                          }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$map, function(_v9) {
                              return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, `
`);
                            }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$map, completeOrMergeUnorderedListBlock(revStmts), A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, A2($elm$core$String$repeat, intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
                          ]));
                        case 4:
                          var _v12 = _v3.a;
                          var _v13 = _v3.b;
                          var _v14 = _v13.a;
                          var tight = _v14.a;
                          var intended = _v14.b;
                          var marker = _v14.c;
                          var order = _v14.d;
                          var closeListItems = _v14.e;
                          var openListItem = _v14.f;
                          var rest = _v13.b;
                          var completeOrMergeUnorderedListBlockBlankLine = F2(function(state, newString) {
                            return _Utils_update(state, {
                              b: A2($elm$core$List$cons, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + (`
` + newString)), rest))
                            });
                          });
                          var completeOrMergeUnorderedListBlock = F2(function(state, newString) {
                            return _Utils_update(state, {
                              b: A2($elm$core$List$cons, A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + (`
` + newString)), rest)
                            });
                          });
                          return $elm$core$String$trim(openListItem) === "" ? A2($elm$parser$Parser$Advanced$map, function(block) {
                            return $elm$parser$Parser$Advanced$Loop(block);
                          }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$map, function(_v15) {
                              return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, `
`);
                            }, $dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$map, completeOrMergeUnorderedListBlock(revStmts), A2($elm$parser$Parser$Advanced$keeper, A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity), $elm$parser$Parser$Advanced$symbol(A2($elm$parser$Parser$Advanced$Token, A2($elm$core$String$repeat, intended, " "), $elm$parser$Parser$ExpectingSymbol("Indentation")))), A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd), $dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
                            A2($elm$parser$Parser$Advanced$map, function(block) {
                              return $elm$parser$Parser$Advanced$Loop(block);
                            }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
                          ]));
                        default:
                          break _v3$6;
                      }
                    } else {
                      break _v3$6;
                    }
                  default:
                    break _v3$6;
                }
              } else {
                break _v3$6;
              }
            }
          return A2($elm$parser$Parser$Advanced$map, function(block) {
            return $elm$parser$Parser$Advanced$Loop(block);
          }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
        }(),
        A2($elm$parser$Parser$Advanced$map, function(block) {
          return $elm$parser$Parser$Advanced$Loop(block);
        }, A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts), $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
      ]));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function(textNodeValue) {
      return A2($elm$core$Result$withDefault, _List_Nil, $dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function(xmlNode) {
      switch (xmlNode.$) {
        case 1:
          var innerText = xmlNode.a;
          return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(innerText));
        case 0:
          var tag = xmlNode.a;
          var attributes = xmlNode.b;
          var children = xmlNode.c;
          var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
          if (!_v1.$) {
            var parsedChildren = _v1.a;
            return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html(A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
          } else {
            var err = _v1.a;
            return $elm$parser$Parser$Advanced$problem(err);
          }
        case 2:
          var string = xmlNode.a;
          return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
        case 3:
          var string = xmlNode.a;
          return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
        case 4:
          var string = xmlNode.a;
          return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html($dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
        default:
          var declarationType = xmlNode.a;
          var content = xmlNode.b;
          return $elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Html(A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
      }
    };
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
      return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks, A2($elm$parser$Parser$Advanced$loop, { a: _List_Nil, b: _List_Nil }, $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
        $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
        $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
        A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
        $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
        A2($elm$parser$Parser$Advanced$map, function(_v40) {
          return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
        }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
        $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
        $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
        $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
        $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
      ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
        $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
        $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
        A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
        $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
        A2($elm$parser$Parser$Advanced$map, function(_v39) {
          return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
        }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
        $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
        $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
        $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
        $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
        $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
      ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
      return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
        $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
        $dillonkearns$elm_markdown$Markdown$Parser$blankLine,
        $dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
        A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
        A2($elm$parser$Parser$Advanced$map, function(_v38) {
          return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
        }, $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
        $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
        $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
        $elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
        $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
      ]));
    }
    function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
      return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
    }
    var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function() {
      return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function() {
      return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function() {
      return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function() {
      return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
    };
    var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
    $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function() {
      return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
    };
    var $author$project$Generate$Assets$getHeaders = function(src) {
      var _v0 = $dillonkearns$elm_markdown$Markdown$Parser$parse(src);
      if (!_v0.$) {
        var blocks = _v0.a;
        return A2($elm$core$List$filterMap, function(block) {
          if (block.$ === 4) {
            var level = block.a;
            var contents = block.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2($dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt(level), $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(contents)));
          } else {
            return $elm$core$Maybe$Nothing;
          }
        }, blocks);
      } else {
        return _List_Nil;
      }
    };
    var $author$project$Generate$Assets$toFileInfo = F2(function(group, file) {
      return {
        aK: function() {
          var _v0 = file.aK;
          if (_v0.$ === 1) {
            return $author$project$Generate$Assets$Binary;
          } else {
            var source = _v0.a;
            var _v1 = $author$project$Path$extension(file.aB);
            var ext = _v1.b;
            if (A2($elm$core$List$member, ext, _List_fromArray(["markdown", "md"]))) {
              var headers = $author$project$Generate$Assets$getHeaders(source);
              return $author$project$Generate$Assets$Markdown({
                eS: headers,
                mR: A2($elm$core$Maybe$withDefault, file.j, A2($elm$core$Maybe$map, $elm$core$Tuple$second, $elm$core$List$head(headers)))
              });
            } else {
              return $author$project$Generate$Assets$Text;
            }
          }
        }(),
        ax: file.ax,
        j: file.j,
        aB: file.aB
      };
    });
    var $author$project$Generate$Assets$generateAssetGroupDirectory = function(group) {
      var entries = A2($elm$core$List$map, $author$project$Generate$Assets$toDirectoryEntry, group.ek);
      var directory = function() {
        var directoryItems = A2($elm$core$List$map, $author$project$Generate$Assets$toFileInfo(group), group.ek);
        if (!directoryItems.b) {
          return _List_Nil;
        } else {
          return _List_fromArray([
            $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "directory_", A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("crumbs", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)),
              _Utils_Tuple2("pathOnServer", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Src")),
              _Utils_Tuple2("content", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Asset"]), "Content"))
            ]))), $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Assets$encodeFileInfo, directoryItems)))))
          ]);
        }
      }();
      return $elm$core$List$isEmpty(entries) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Assets", group.j]), $elm$core$List$concat(_List_fromArray([entries, directory]))));
    };
    var $author$project$Generate$Assets$toSourceDeclaration = function(file) {
      var _v0 = file.aK;
      if (_v0.$ === 1) {
        return $elm$core$Maybe$Nothing;
      } else {
        var source = _v0.a;
        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, $author$project$Generate$Assets$declarationName(file), $mdgriffith$elm_codegen$Elm$string(source))));
      }
    };
    var $author$project$Generate$Assets$generateAssetGroupSource = function(group) {
      var assetSources = A2($elm$core$List$filterMap, $author$project$Generate$Assets$toSourceDeclaration, group.ek);
      return $elm$core$List$isEmpty(assetSources) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Assets", group.j, "Source"]), assetSources));
    };
    var $author$project$Generate$Assets$generateAssetGroup = function(group) {
      return A2($elm$core$List$cons, $author$project$Generate$Assets$assetRootFile, A2($elm$core$List$filterMap, $elm$core$Basics$identity, _List_fromArray([
        $author$project$Generate$Assets$generateAssetGroupDirectory(group),
        $author$project$Generate$Assets$generateAssetGroupSource(group)
      ])));
    };
    var $author$project$Generate$Assets$generate = function(assetGroups) {
      return A2($elm$core$List$concatMap, $author$project$Generate$Assets$generateAssetGroup, assetGroups);
    };
    var $author$project$Generate$Docs$generateGuides = function(docs) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Docs", "Guides"]), _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$declaration, "all_", A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("path", $mdgriffith$elm_codegen$Elm$Annotation$string),
          _Utils_Tuple2("content", $mdgriffith$elm_codegen$Elm$Annotation$string)
        ]))), $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$filterMap, function(guide) {
          var _v0 = guide.aK;
          if (_v0.$ === 1) {
            return $elm$core$Maybe$Nothing;
          } else {
            var content = _v0.a;
            return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$record(_List_fromArray([
              _Utils_Tuple2("path", $mdgriffith$elm_codegen$Elm$string(guide.j)),
              _Utils_Tuple2("content", $mdgriffith$elm_codegen$Elm$string(A3($elm$core$String$replace, "\\", "\\\\", content)))
            ])));
          }
        }, docs.lg))))
      ]));
    };
    var $author$project$Generate$Docs$Module$comment = function(str) {
      return $mdgriffith$elm_codegen$Elm$string(A3($elm$core$String$replace, '"', "\\\"", A3($elm$core$String$replace, "\\", "\\\\", str)));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getAnnotation = function(exp) {
      return exp.h;
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$maybe = function(maybeArg) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "Maybe", _List_fromArray([maybeArg]));
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$var = function(a) {
      return {
        jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
        h: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Format$formatValue(a)),
        d: _List_Nil
      };
    };
    var $mdgriffith$elm_codegen$Elm$maybe = function(maybeContent) {
      return function(index) {
        if (maybeContent.$ === 1) {
          return {
            h: $elm$core$Result$Ok(A2($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference, index, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
            c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, "Nothing"),
            d: _List_Nil
          };
        } else {
          var contentExp = maybeContent.a;
          var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, contentExp);
          var content = _v1.b;
          return {
            h: A2($elm$core$Result$map, function(ann) {
              return {
                jQ: ann.jQ,
                g: ann.g,
                ji: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(_List_Nil, "Maybe")), _List_fromArray([
                  $mdgriffith$elm_codegen$Internal$Compiler$nodify(ann.ji)
                ]))
              };
            }, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotation(content)),
            c: $stil4m$elm_syntax$Elm$Syntax$Expression$Application(_List_fromArray([
              $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, "Just")),
              $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(content.c)))
            ])),
            d: $mdgriffith$elm_codegen$Internal$Compiler$getImports(content)
          };
        }
      };
    };
    var $author$project$Generate$Docs$Module$toTipe = F2(function(val, args) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["Elm", "Type"]),
        j: val
      }), args);
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function(a) {
      return { $: 13, a };
    };
    var $mdgriffith$elm_codegen$Elm$tuple = F2(function(oneExp, twoExp) {
      return function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, oneExp);
        var oneIndex = _v0.a;
        var one = _v0.b;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, oneIndex, twoExp);
        var two = _v1.b;
        return {
          h: A3($elm$core$Result$map2, F2(function(oneA, twoA) {
            return {
              jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, twoA.jQ, oneA.jQ),
              g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, twoA.g, oneA.g),
              ji: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify(oneA.ji),
                $mdgriffith$elm_codegen$Internal$Compiler$nodify(twoA.ji)
              ]))
            };
          }), one.h, two.h),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(_List_fromArray([
            $mdgriffith$elm_codegen$Internal$Compiler$nodify(one.c),
            $mdgriffith$elm_codegen$Internal$Compiler$nodify(two.c)
          ])),
          d: _Utils_ap(one.d, two.d)
        };
      };
    });
    var $author$project$Generate$Docs$Module$generateField = function(_v1) {
      var name = _v1.a;
      var tipe = _v1.b;
      return A2($mdgriffith$elm_codegen$Elm$tuple, $mdgriffith$elm_codegen$Elm$string(name), $author$project$Generate$Docs$Module$generateType(tipe));
    };
    var $author$project$Generate$Docs$Module$generateType = function(tipe) {
      switch (tipe.$) {
        case 0:
          var name = tipe.a;
          return A2($author$project$Generate$Docs$Module$toTipe, "Var", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(name)
          ]));
        case 1:
          var arg = tipe.a;
          var ret = tipe.b;
          return A2($author$project$Generate$Docs$Module$toTipe, "Lambda", _List_fromArray([
            $author$project$Generate$Docs$Module$generateType(arg),
            $author$project$Generate$Docs$Module$generateType(ret)
          ]));
        case 2:
          var types = tipe.a;
          return A2($author$project$Generate$Docs$Module$toTipe, "Tuple", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateType, types))
          ]));
        case 3:
          var name = tipe.a;
          var args = tipe.b;
          return A2($author$project$Generate$Docs$Module$toTipe, "Type", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(name),
            $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateType, args))
          ]));
        default:
          var fields = tipe.a;
          var ext = tipe.b;
          return A2($author$project$Generate$Docs$Module$toTipe, "Record", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateField, fields)),
            $mdgriffith$elm_codegen$Elm$maybe(A2($elm$core$Maybe$map, $mdgriffith$elm_codegen$Elm$string, ext))
          ]));
      }
    };
    var $author$project$Generate$Docs$Module$generateAlias = function(alias_) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(alias_.j)),
        _Utils_Tuple2("comment", $author$project$Generate$Docs$Module$comment(alias_.aJ)),
        _Utils_Tuple2("args", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $mdgriffith$elm_codegen$Elm$string, alias_.cF))),
        _Utils_Tuple2("tipe", $author$project$Generate$Docs$Module$generateType(alias_.cg))
      ]));
    };
    var $author$project$Generate$Docs$Module$generateAssociativity = function(assoc) {
      switch (assoc) {
        case 0:
          return $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Nothing,
            i: _List_fromArray(["Elm", "Docs"]),
            j: "Left"
          });
        case 1:
          return $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Nothing,
            i: _List_fromArray(["Elm", "Docs"]),
            j: "None"
          });
        default:
          return $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Nothing,
            i: _List_fromArray(["Elm", "Docs"]),
            j: "Right"
          });
      }
    };
    var $author$project$Generate$Docs$Module$generateBinop = function(binop) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(binop.j)),
        _Utils_Tuple2("comment", $author$project$Generate$Docs$Module$comment(binop.aJ)),
        _Utils_Tuple2("associativity", $author$project$Generate$Docs$Module$generateAssociativity(binop.j$)),
        _Utils_Tuple2("precedence", $mdgriffith$elm_codegen$Elm$int(binop.ma)),
        _Utils_Tuple2("tipe", $author$project$Generate$Docs$Module$generateType(binop.cg))
      ]));
    };
    var $author$project$Generate$Docs$Module$generateTag = function(_v0) {
      var name = _v0.a;
      var args = _v0.b;
      return A2($mdgriffith$elm_codegen$Elm$tuple, $mdgriffith$elm_codegen$Elm$string(name), $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateType, args)));
    };
    var $author$project$Generate$Docs$Module$generateUnion = function(union) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(union.j)),
        _Utils_Tuple2("comment", $author$project$Generate$Docs$Module$comment(union.aJ)),
        _Utils_Tuple2("args", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $mdgriffith$elm_codegen$Elm$string, union.cF))),
        _Utils_Tuple2("tags", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateTag, union.mN)))
      ]));
    };
    var $author$project$Generate$Docs$Module$generateValue = function(value) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(value.j)),
        _Utils_Tuple2("comment", $author$project$Generate$Docs$Module$comment(value.aJ)),
        _Utils_Tuple2("tipe", $author$project$Generate$Docs$Module$generateType(value.cg))
      ]));
    };
    var $author$project$Generate$Docs$Module$generate = function(mod) {
      return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Elm", "Docs"]), "Module"), $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(mod.j)),
        _Utils_Tuple2("comment", $author$project$Generate$Docs$Module$comment(mod.aJ)),
        _Utils_Tuple2("unions", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateUnion, mod.mY))),
        _Utils_Tuple2("aliases", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateAlias, mod.jQ))),
        _Utils_Tuple2("values", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateValue, mod.ju))),
        _Utils_Tuple2("binops", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generateBinop, mod.j7)))
      ])));
    };
    var $author$project$Generate$Docs$generateModules = function(docs) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Docs", "Modules"]), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "modules", A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Elm", "Docs"]), "Module")), $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generate, docs.lL)))))
      ]));
    };
    var $author$project$Generate$Docs$capitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toUpper(top), remain);
    };
    var $author$project$Generate$Docs$sanitizePackageName = function(name) {
      return A2($elm$core$String$join, "", A2($elm$core$List$map, $author$project$Generate$Docs$capitalize, A2($elm$core$String$split, "_", A3($elm$core$String$replace, "/", "_", A3($elm$core$String$replace, "-", "_", A3($elm$core$String$replace, ".", "_", name))))));
    };
    var $author$project$Generate$Docs$generatePackages = function(docs) {
      var _v0 = $elm$core$Dict$toList(docs.kL);
      if (!_v0.b) {
        return _List_Nil;
      } else {
        var pkgs = _v0;
        var toPackage = function(_v2) {
          var packageName = _v2.a;
          var mods = _v2.b;
          return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
            _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string(packageName)),
            _Utils_Tuple2("modules", $mdgriffith$elm_codegen$Elm$value({
              h: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Elm", "Docs"]), "Module"))),
              i: _List_fromArray([
                "Docs",
                "Packages",
                $author$project$Generate$Docs$sanitizePackageName(packageName)
              ]),
              j: "info"
            }))
          ]));
        };
        var directory = A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Docs", "Packages"]), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$declaration, "directory", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, toPackage, pkgs)))
        ]));
        return A2($elm$core$List$cons, directory, A2($elm$core$List$map, function(_v1) {
          var name = _v1.a;
          var mods = _v1.b;
          return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray([
            "Docs",
            "Packages",
            $author$project$Generate$Docs$sanitizePackageName(name)
          ]), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$declaration, "info", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$Module$generate, mods)))
          ]));
        }, pkgs));
      }
    };
    var $elm$project_metadata_utils$Elm$Version$toTuple = function(_v0) {
      var major = _v0.a;
      var minor = _v0.b;
      var patch = _v0.c;
      return _Utils_Tuple3(major, minor, patch);
    };
    var $elm$core$Result$map3 = F4(function(func, ra, rb, rc) {
      if (ra.$ === 1) {
        var x2 = ra.a;
        return $elm$core$Result$Err(x2);
      } else {
        var a = ra.a;
        if (rb.$ === 1) {
          var x2 = rb.a;
          return $elm$core$Result$Err(x2);
        } else {
          var b = rb.a;
          if (rc.$ === 1) {
            var x2 = rc.a;
            return $elm$core$Result$Err(x2);
          } else {
            var c = rc.a;
            return $elm$core$Result$Ok(A3(func, a, b, c));
          }
        }
      }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$noImports = function(tipe) {
      return { jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, h: tipe, d: _List_Nil };
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$triple = F3(function(one, two, three) {
      return {
        jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(one), $mdgriffith$elm_codegen$Elm$Annotation$getAliases(two)), $mdgriffith$elm_codegen$Elm$Annotation$getAliases(three)),
        h: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(_List_fromArray([
          $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(one),
          $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(two),
          $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(three)
        ]))),
        d: _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(one), _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(two), $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(three)))
      };
    });
    var $mdgriffith$elm_codegen$Elm$triple = F3(function(oneExp, twoExp, threeExp) {
      return function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, oneExp);
        var oneIndex = _v0.a;
        var one = _v0.b;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, oneIndex, twoExp);
        var twoIndex = _v1.a;
        var two = _v1.b;
        var _v2 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, twoIndex, threeExp);
        var three = _v2.b;
        return {
          h: A4($elm$core$Result$map3, F3(function(oneA, twoA, threeA) {
            return {
              jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, threeA.jQ, A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, twoA.jQ, oneA.jQ)),
              g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, threeA.g, A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, twoA.g, oneA.g)),
              ji: $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(A3($mdgriffith$elm_codegen$Elm$Annotation$triple, $mdgriffith$elm_codegen$Internal$Compiler$noImports(oneA.ji), $mdgriffith$elm_codegen$Internal$Compiler$noImports(twoA.ji), $mdgriffith$elm_codegen$Internal$Compiler$noImports(threeA.ji)))
            };
          }), one.h, two.h, three.h),
          c: $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(_List_fromArray([one.c, two.c, three.c]))),
          d: _Utils_ap(one.d, _Utils_ap(two.d, three.d))
        };
      };
    });
    var $author$project$Generate$Docs$genVersion = function(version) {
      var _v0 = $elm$project_metadata_utils$Elm$Version$toTuple(version);
      var major = _v0.a;
      var minor = _v0.b;
      var patch = _v0.c;
      return A3($mdgriffith$elm_codegen$Elm$triple, $mdgriffith$elm_codegen$Elm$int(major), $mdgriffith$elm_codegen$Elm$int(minor), $mdgriffith$elm_codegen$Elm$int(patch));
    };
    var $elm$project_metadata_utils$Elm$Package$toString = function(_v0) {
      var user = _v0.a;
      var project = _v0.b;
      return user + ("/" + project);
    };
    var $author$project$Generate$Docs$fromDeps = function(_v0) {
      var name = _v0.a;
      var version = _v0.b;
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string($elm$project_metadata_utils$Elm$Package$toString(name))),
        _Utils_Tuple2("version", $author$project$Generate$Docs$genVersion(version))
      ]));
    };
    var $author$project$Generate$Docs$genApplication = function(app) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("dirs", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $mdgriffith$elm_codegen$Elm$string, app.kS))),
        _Utils_Tuple2("depsDirect", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$fromDeps, app.kM))),
        _Utils_Tuple2("depsIndirect", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$fromDeps, app.kN))),
        _Utils_Tuple2("testDepsDirect", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$fromDeps, app.mO))),
        _Utils_Tuple2("testDepsIndirect", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, $author$project$Generate$Docs$fromDeps, app.mP)))
      ]));
    };
    var $author$project$Generate$Docs$genPackage = function(pkg) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$string($elm$project_metadata_utils$Elm$Package$toString(pkg.j))),
        _Utils_Tuple2("summary", $mdgriffith$elm_codegen$Elm$string(pkg.iK)),
        _Utils_Tuple2("version", $author$project$Generate$Docs$genVersion(pkg.m2))
      ]));
    };
    var $mdgriffith$elm_codegen$Elm$val = function(name) {
      return $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: _List_Nil, j: name });
    };
    var $author$project$Generate$Docs$genProject = function(project) {
      if (!project.$) {
        var app = project.a;
        return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Project"), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("App"), _List_fromArray([
          $author$project$Generate$Docs$genApplication(app)
        ])));
      } else {
        var pkg = project.a;
        return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Project"), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Package"), _List_fromArray([
          $author$project$Generate$Docs$genPackage(pkg)
        ])));
      }
    };
    var $author$project$Generate$Docs$versionType = A3($mdgriffith$elm_codegen$Elm$Annotation$triple, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int);
    var $author$project$Generate$Docs$versionName = $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
      _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$Annotation$string),
      _Utils_Tuple2("version", $author$project$Generate$Docs$versionType)
    ]));
    var $author$project$Generate$Docs$generateProject = function(docs) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Docs", "Project"]), _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$declaration, "project", $author$project$Generate$Docs$genProject(docs.mb)),
        A2($mdgriffith$elm_codegen$Elm$customType, "Project", _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$variantWith, "App", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("dirs", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)),
              _Utils_Tuple2("depsDirect", $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Docs$versionName)),
              _Utils_Tuple2("depsIndirect", $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Docs$versionName)),
              _Utils_Tuple2("testDepsDirect", $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Docs$versionName)),
              _Utils_Tuple2("testDepsIndirect", $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Docs$versionName))
            ]))
          ])),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "Package", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("name", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("summary", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("version", $author$project$Generate$Docs$versionType)
            ]))
          ]))
        ]))
      ]));
    };
    var $author$project$Generate$Docs$generate = function(docs) {
      return $elm$core$List$concat(_List_fromArray([
        _List_fromArray([
          $author$project$Generate$Docs$generateProject(docs),
          $author$project$Generate$Docs$generateGuides(docs),
          $author$project$Generate$Docs$generateModules(docs)
        ]),
        $author$project$Generate$Docs$generatePackages(docs)
      ]));
    };
    var $mdgriffith$elm_codegen$Elm$aliasWith = F3(function(name, generics, innerAnnotation) {
      return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
        kU: $elm$core$Maybe$Nothing,
        eb: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
        d: $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(innerAnnotation),
        j: name,
        aE: function(_v0) {
          return {
            au: _List_Nil,
            kJ: $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration({
              bH: $elm$core$Maybe$Nothing,
              eC: $mdgriffith$elm_codegen$Elm$getGenerics({
                bS: false,
                bU: $mdgriffith$elm_codegen$Internal$Compiler$getGenerics(innerAnnotation),
                b5: generics
              }),
              j: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(name)),
              bw: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(innerAnnotation))
            }),
            m5: $elm$core$Maybe$Nothing
          };
        }
      });
    });
    var $mdgriffith$elm_codegen$Elm$alias = F2(function(name, innerAnnotation) {
      return A3($mdgriffith$elm_codegen$Elm$aliasWith, name, _List_Nil, innerAnnotation);
    });
    var $author$project$Generate$Route$ParserError = function(a) {
      return { $: 2, a };
    };
    var $author$project$Options$App$UrlPattern = $elm$core$Basics$identity;
    var $author$project$Generate$Route$FieldCollision = function(a) {
      return { $: 0, a };
    };
    var $elm$core$Set$isEmpty = function(_v0) {
      var dict = _v0;
      return $elm$core$Dict$isEmpty(dict);
    };
    var $author$project$Generate$Route$checkForFieldCollisions = function(route) {
      var _v0 = route.m_;
      var path = _v0.l7;
      var queryParams = _v0.aW;
      var _v1 = A3($elm$core$List$foldl, F2(function(piece, _v2) {
        var found = _v2.a;
        var collisions = _v2.b;
        if (!piece.$) {
          return _Utils_Tuple2(found, collisions);
        } else {
          var name = piece.a;
          return A2($elm$core$Set$member, name, found) ? _Utils_Tuple2(found, A2($elm$core$Set$insert, name, collisions)) : _Utils_Tuple2(A2($elm$core$Set$insert, name, found), collisions);
        }
      }), _Utils_Tuple2(queryParams.aD, $elm$core$Set$empty), path);
      var collisionsFound = _v1.b;
      return $elm$core$Set$isEmpty(collisionsFound) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($author$project$Generate$Route$FieldCollision({ M: collisionsFound, j: route.e4, g7: route.e4 }));
    };
    var $author$project$Generate$Route$OverlappingRoutes = function(a) {
      return { $: 1, a };
    };
    var $author$project$Generate$Route$isOverlapping = F3(function(route, otherRoute, _v0) {
      var alreadyOverlapping = _v0.a;
      var errors = _v0.b;
      if (_Utils_eq(route.e4, otherRoute.e4) || (A2($elm$core$Set$member, route.e4, alreadyOverlapping) || A2($elm$core$Set$member, otherRoute.e4, alreadyOverlapping))) {
        return _Utils_Tuple2(alreadyOverlapping, errors);
      } else {
        var _v1 = otherRoute.m_;
        var two = _v1;
        var _v2 = route.m_;
        var one = _v2;
        if (!_Utils_eq($elm$core$List$length(one.l7), $elm$core$List$length(two.l7))) {
          return _Utils_Tuple2(alreadyOverlapping, errors);
        } else {
          var _v3 = A3($elm$core$List$foldl, F2(function(piece, _v4) {
            var overlap = _v4.a;
            var second = _v4.b;
            if (!overlap) {
              return _Utils_Tuple2(overlap, _List_Nil);
            } else {
              if (!second.b) {
                return _Utils_Tuple2(overlap, _List_Nil);
              } else {
                if (!second.a.$) {
                  var secondToken = second.a.a;
                  var rest = second.b;
                  if (!piece.$) {
                    var token = piece.a;
                    return _Utils_Tuple2(_Utils_eq(token, secondToken), rest);
                  } else {
                    var name = piece.a;
                    return _Utils_Tuple2(false, rest);
                  }
                } else {
                  var rest = second.b;
                  if (piece.$ === 1) {
                    return _Utils_Tuple2(true, rest);
                  } else {
                    var token = piece.a;
                    return _Utils_Tuple2(false, rest);
                  }
                }
              }
            }
          }), _Utils_Tuple2(true, two.l7), one.l7);
          var foundOverlap = _v3.a;
          return foundOverlap ? _Utils_Tuple2(A2($elm$core$Set$insert, otherRoute.e4, A2($elm$core$Set$insert, route.e4, alreadyOverlapping)), A2($elm$core$List$cons, $author$project$Generate$Route$OverlappingRoutes({ gr: route.e4, gs: otherRoute.e4, g8: route.e4, g9: otherRoute.e4 }), errors)) : _Utils_Tuple2(alreadyOverlapping, errors);
        }
      }
    });
    var $author$project$Generate$Route$checkForOverlaps = F3(function(routes, route, alreadyOverlapping) {
      return A3($elm$core$List$foldl, $author$project$Generate$Route$isOverlapping(route), _Utils_Tuple2(alreadyOverlapping, _List_Nil), routes);
    });
    var $author$project$Generate$Route$maybeToList = function(maybe) {
      if (!maybe.$) {
        var value = maybe.a;
        return _List_fromArray([value]);
      } else {
        return _List_Nil;
      }
    };
    var $author$project$Generate$Route$check = F3(function(allRoutes, route, cursor) {
      var _v0 = A3($elm$core$List$foldl, F2(function(redirect, _v1) {
        var reds = _v1.a;
        var pErrors = _v1.b;
        if (!redirect.$) {
          var pattern2 = redirect.a;
          return _Utils_Tuple2(A2($elm$core$List$cons, pattern2, reds), pErrors);
        } else {
          var err2 = redirect.a;
          return _Utils_Tuple2(reds, A2($elm$core$List$cons, $author$project$Generate$Route$ParserError(err2), pErrors));
        }
      }), _Utils_Tuple2(_List_Nil, _List_Nil), route.b4);
      var redirectRoutes = _v0.a;
      var foundErrors = _v0.b;
      var _v3 = cursor.hN;
      if (_v3.$ === 1) {
        var errs = _v3.a;
        return {
          M: cursor.M,
          hN: $elm$core$Result$Err(_Utils_ap(errs, foundErrors))
        };
      } else {
        var pages = _v3.a;
        if (!foundErrors.b) {
          var _v5 = route.m_;
          if (!_v5.$) {
            var pattern = _v5.a;
            var newRoute = { e4: route.e4, b4: redirectRoutes, m_: pattern };
            var fieldCollisions = $author$project$Generate$Route$maybeToList($author$project$Generate$Route$checkForFieldCollisions(newRoute));
            var _v6 = A3($author$project$Generate$Route$checkForOverlaps, pages, newRoute, cursor.M);
            var newCollisions = _v6.a;
            var overlaps = _v6.b;
            var newErrors = _Utils_ap(fieldCollisions, overlaps);
            return $elm$core$List$isEmpty(newErrors) ? {
              M: newCollisions,
              hN: $elm$core$Result$Ok(A2($elm$core$List$cons, newRoute, pages))
            } : {
              M: newCollisions,
              hN: $elm$core$Result$Err(newErrors)
            };
          } else {
            var err = _v5.a;
            return {
              M: cursor.M,
              hN: $elm$core$Result$Err(A2($elm$core$List$cons, $author$project$Generate$Route$ParserError(err), foundErrors))
            };
          }
        } else {
          return {
            M: cursor.M,
            hN: $elm$core$Result$Err(foundErrors)
          };
        }
      }
    });
    var $author$project$Generate$Route$checkForErrors = function(routes) {
      return A3($elm$core$List$foldl, $author$project$Generate$Route$check(routes), {
        M: $elm$core$Set$empty,
        hN: $elm$core$Result$Ok(_List_Nil)
      }, routes).hN;
    };
    var $mdgriffith$elm_codegen$Internal$Index$startChecked = F2(function(modName, checked) {
      return A5($mdgriffith$elm_codegen$Internal$Index$Index, modName, 0, _List_Nil, $elm$core$Set$empty, checked);
    });
    var $mdgriffith$elm_codegen$Elm$fileWith = F3(function(mod, options, decs) {
      return A2($mdgriffith$elm_codegen$Internal$Render$render, options.kU, {
        jQ: options.jQ,
        aM: decs,
        ba: A2($mdgriffith$elm_codegen$Internal$Index$startChecked, $elm$core$Maybe$Just(mod), true),
        lK: mod
      });
    });
    var $mdgriffith$elm_codegen$Elm$group = function(decls) {
      return $mdgriffith$elm_codegen$Internal$Compiler$Group(decls);
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$dict = F2(function(keyArg, valArg) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_fromArray(["Dict"]), "Dict", _List_fromArray([keyArg, valArg]));
    });
    var $author$project$Generate$Route$hasNoParams = function(params) {
      return $elm$core$Set$isEmpty(params.aD) && !params.bP;
    };
    var $author$project$Generate$Route$hasVars = function(pieces) {
      return A2($elm$core$List$any, function(piece) {
        if (!piece.$) {
          return false;
        } else {
          return true;
        }
      }, pieces);
    };
    var $author$project$Generate$Route$paramType = function(route) {
      var _v0 = route.m_;
      var queryParams = _v0.aW;
      var includePathTail = _v0.a9;
      var path = _v0.l7;
      if ($author$project$Generate$Route$hasNoParams(queryParams) && (!includePathTail && !$author$project$Generate$Route$hasVars(path))) {
        return $mdgriffith$elm_codegen$Elm$Annotation$record(_List_Nil);
      } else {
        var addFullTail = function(fields) {
          return includePathTail ? A2($elm$core$List$cons, _Utils_Tuple2("path_", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)), fields) : fields;
        };
        var addCatchall = function(fields) {
          return queryParams.bP ? A2($elm$core$List$cons, _Utils_Tuple2("params_", A2($mdgriffith$elm_codegen$Elm$Annotation$dict, $mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string)), fields) : fields;
        };
        return $mdgriffith$elm_codegen$Elm$Annotation$record($elm$core$List$concat(_List_fromArray([
          addFullTail(A2($elm$core$List$filterMap, function(piece) {
            if (!piece.$) {
              return $elm$core$Maybe$Nothing;
            } else {
              var name = piece.a;
              return $elm$core$Maybe$Just(_Utils_Tuple2(name, $mdgriffith$elm_codegen$Elm$Annotation$string));
            }
          }, path)),
          addCatchall(A2($elm$core$List$map, function(field) {
            return _Utils_Tuple2(field, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string));
          }, $elm$core$Set$toList(queryParams.aD)))
        ])));
      }
    };
    var $author$project$Options$App$toParamTypeString = function(id) {
      return A2($elm$core$String$join, "_", A2($elm$core$String$split, ".", id)) + "_Params";
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$function = F2(function(anns, _return) {
      return {
        jQ: A3($elm$core$List$foldl, F2(function(ann, aliases) {
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, A2($elm$core$List$cons, _return, anns)),
        h: A3($elm$core$List$foldr, F2(function(ann, fn) {
          return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify(ann), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fn));
        }), $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(_return), A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, anns)),
        d: _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(_return), A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, anns))
      };
    });
    var $mdgriffith$elm_codegen$Elm$Op$BinOp = F3(function(a, b, c) {
      return { $: 0, a, b, c };
    });
    var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = 1;
    var $mdgriffith$elm_codegen$Internal$Types$formatValue = function(str) {
      var formatted = _Utils_eq($elm$core$String$toUpper(str), str) ? $elm$core$String$toLower(str) : _Utils_ap($elm$core$String$toLower(A2($elm$core$String$left, 1, str)), A2($elm$core$String$dropLeft, 1, str));
      return $mdgriffith$elm_codegen$Internal$Format$sanitize(formatted);
    };
    var $mdgriffith$elm_codegen$Internal$Types$var = function(name) {
      return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Types$formatValue(name));
    };
    var $mdgriffith$elm_codegen$Internal$Types$appendable = $mdgriffith$elm_codegen$Internal$Types$var("appendable");
    var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4(function(a, b, c, d) {
      return { $: 2, a, b, c, d };
    });
    var $mdgriffith$elm_codegen$Elm$Op$applyInfix = F5(function(extraImports, _v0, infixAnnotation, l, r) {
      var symbol = _v0.a;
      var dir = _v0.b;
      return function(index) {
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, l);
        var leftIndex = _v1.a;
        var left = _v1.b;
        var _v2 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, leftIndex, r);
        var right = _v2.b;
        return {
          h: A3($mdgriffith$elm_codegen$Internal$Compiler$applyType, index, $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: infixAnnotation }), _List_fromArray([left, right])),
          c: A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, symbol, dir, $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$parens(left.c)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$parens(right.c))),
          d: _Utils_ap(extraImports, _Utils_ap(left.d, right.d))
        };
      };
    });
    var $mdgriffith$elm_codegen$Internal$Types$function = F2(function(args, _return) {
      return A3($elm$core$List$foldr, F2(function(ann, fn) {
        return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Types$nodify(ann), $mdgriffith$elm_codegen$Internal$Types$nodify(fn));
      }), _return, args);
    });
    var $mdgriffith$elm_codegen$Elm$Op$append = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "++", 1, 5), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([$mdgriffith$elm_codegen$Internal$Types$appendable, $mdgriffith$elm_codegen$Internal$Types$appendable]), $mdgriffith$elm_codegen$Internal$Types$appendable));
    var $mdgriffith$elm_codegen$Elm$Annotation$namedWith = F3(function(mod, name, args) {
      return {
        jQ: A3($elm$core$List$foldl, F2(function(ann, aliases) {
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, args),
        h: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), $mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$map, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, args))),
        d: A2($elm$core$List$cons, mod, A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, args))
      };
    });
    var $author$project$Gen$Dict$empty = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
        $mdgriffith$elm_codegen$Elm$Annotation$var("v")
      ]))),
      i: _List_fromArray(["Dict"]),
      j: "empty"
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2(function(a, b) {
      return { $: 20, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$AttemptingGetOnTypeNameNotAnAlias = function(a) {
      return { $: 9, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType = function(a) {
      return { $: 8, a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList = F2(function(selector, fields) {
      getFieldFromList:
        while (true) {
          if (!fields.b) {
            return $elm$core$Maybe$Nothing;
          } else {
            var _v1 = fields.a;
            var _v2 = _v1.b;
            var _v3 = _v2.a;
            var fieldname = _v3.b;
            var _v4 = _v2.b;
            var contents = _v4.b;
            var remain = fields.b;
            if (_Utils_eq(fieldname, selector)) {
              return $elm$core$Maybe$Just(contents);
            } else {
              var $temp$selector = selector, $temp$fields = remain;
              selector = $temp$selector;
              fields = $temp$fields;
              continue getFieldFromList;
            }
          }
        }
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$inferRecordField = F2(function(index, _v0) {
      var nameOfRecord = _v0.gq;
      var fieldName = _v0.eg;
      var fieldType = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Format$formatValue(_Utils_ap(fieldName, $mdgriffith$elm_codegen$Internal$Index$indexToString(index))));
      return $elm$core$Result$Ok({
        jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
        g: A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, nameOfRecord, A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, $mdgriffith$elm_codegen$Internal$Compiler$nodify(nameOfRecord), $mdgriffith$elm_codegen$Internal$Compiler$nodify(_List_fromArray([
          $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldType)))
        ]))), $elm$core$Dict$empty),
        ji: fieldType
      });
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveField = F5(function(index, type_, aliases, inferences, fieldName) {
      resolveField:
        while (true) {
          if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
            switch (type_.$) {
              case 4:
                var fields = type_.a;
                var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList, fieldName, fields);
                if (!_v1.$) {
                  var ann = _v1.a;
                  return $elm$core$Result$Ok({ jQ: aliases, g: inferences, ji: ann });
                } else {
                  return $elm$core$Result$Err(_List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
                      kX: A2($elm$core$List$map, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), fields),
                      a6: fieldName
                    })
                  ]));
                }
              case 5:
                var _v2 = type_.b;
                var fields = _v2.b;
                var _v3 = A2($mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList, fieldName, fields);
                if (!_v3.$) {
                  var ann = _v3.a;
                  return $elm$core$Result$Ok({ jQ: aliases, g: inferences, ji: ann });
                } else {
                  return $elm$core$Result$Err(_List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
                      kX: A2($elm$core$List$map, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), fields),
                      a6: fieldName
                    })
                  ]));
                }
              case 0:
                var nameOfRecord = type_.a;
                return A2($mdgriffith$elm_codegen$Internal$Compiler$inferRecordField, index, { eg: fieldName, gq: nameOfRecord });
              case 1:
                var nodedModAndName = type_.a;
                var _v4 = A2($mdgriffith$elm_codegen$Internal$Compiler$getAlias, nodedModAndName, aliases);
                if (_v4.$ === 1) {
                  return $elm$core$Result$Err(_List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Compiler$AttemptingGetOnTypeNameNotAnAlias({ a6: fieldName, aA: type_ })
                  ]));
                } else {
                  var aliased = _v4.a;
                  var $temp$index = index, $temp$type_ = aliased.iS, $temp$aliases = aliases, $temp$inferences = inferences, $temp$fieldName = fieldName;
                  index = $temp$index;
                  type_ = $temp$type_;
                  aliases = $temp$aliases;
                  inferences = $temp$inferences;
                  fieldName = $temp$fieldName;
                  continue resolveField;
                }
              case 3:
                return $elm$core$Result$Err(_List_fromArray([
                  $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ a6: fieldName, aA: type_ })
                ]));
              case 2:
                return $elm$core$Result$Err(_List_fromArray([
                  $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ a6: fieldName, aA: type_ })
                ]));
              default:
                return $elm$core$Result$Err(_List_fromArray([
                  $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ a6: fieldName, aA: type_ })
                ]));
            }
          } else {
            return $elm$core$Result$Err(_List_Nil);
          }
        }
    });
    var $mdgriffith$elm_codegen$Elm$get = F2(function(unformattedFieldName, recordExpression) {
      return function(index) {
        var fieldName = $mdgriffith$elm_codegen$Internal$Format$formatValue(unformattedFieldName);
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, recordExpression);
        var expr = _v0.b;
        return {
          h: function() {
            var _v1 = expr.h;
            if (!_v1.$) {
              var recordAnn = _v1.a;
              return A5($mdgriffith$elm_codegen$Internal$Compiler$resolveField, index, recordAnn.ji, recordAnn.jQ, recordAnn.g, fieldName);
            } else {
              var otherwise = _v1;
              return otherwise;
            }
          }(),
          c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, $mdgriffith$elm_codegen$Internal$Compiler$nodify(expr.c), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName)),
          d: expr.d
        };
      };
    });
    var $mdgriffith$elm_codegen$Internal$Arg$val = F2(function(index, name) {
      var typename = A2($mdgriffith$elm_codegen$Internal$Index$protectTypeName, name, index);
      var type_ = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(typename);
      var annotation = $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: type_ });
      return _Utils_Tuple3(function(_v0) {
        return {
          h: annotation,
          c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, $mdgriffith$elm_codegen$Internal$Format$sanitize(name)),
          d: _List_Nil
        };
      }, annotation, type_);
    });
    var $mdgriffith$elm_codegen$Internal$Arg$var = function(rawName) {
      return function(index) {
        var imports = _List_Nil;
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Index$getName, rawName, index);
        var name = _v0.a;
        var nameIndex = _v0.b;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Arg$val, nameIndex, name);
        var value = _v1.a;
        var annotation = _v1.b;
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(name))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(nameIndex),
          jt: value
        };
      };
    };
    var $mdgriffith$elm_codegen$Elm$Arg$var = $mdgriffith$elm_codegen$Internal$Arg$var;
    var $mdgriffith$elm_codegen$Elm$Case$maybe = F2(function(mainExpression, branches) {
      return A3($mdgriffith$elm_codegen$Elm$Case$custom, mainExpression, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")), _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Nothing", 0), function(_v0) {
          return branches.gy;
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, $mdgriffith$elm_codegen$Elm$Arg$var(branches.ft.a), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Just", $elm$core$Basics$identity)), function(val) {
          return A2($elm$core$Tuple$second, branches.ft, val);
        })
      ]));
    });
    var $mdgriffith$elm_codegen$Elm$nothing = $mdgriffith$elm_codegen$Elm$maybe($elm$core$Maybe$Nothing);
    var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = 0;
    var $mdgriffith$elm_codegen$Elm$Op$applyPipe = F4(function(_v0, infixAnnotation, l, r) {
      var symbol = _v0.a;
      var dir = _v0.b;
      return function(index) {
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, l);
        var leftIndex = _v1.a;
        var left = _v1.b;
        var _v2 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, leftIndex, r);
        var right = _v2.b;
        return {
          h: A3($mdgriffith$elm_codegen$Internal$Compiler$applyType, index, $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: infixAnnotation }), _List_fromArray([left, right])),
          c: A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, symbol, dir, $mdgriffith$elm_codegen$Internal$Compiler$nodify(left.c), $mdgriffith$elm_codegen$Internal$Compiler$nodify(right.c)),
          d: _Utils_ap(left.d, right.d)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Op$pipe = F2(function(r, l) {
      return A4($mdgriffith$elm_codegen$Elm$Op$applyPipe, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "|>", 0, 0), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([
        $mdgriffith$elm_codegen$Internal$Types$var("a"),
        A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([
          $mdgriffith$elm_codegen$Internal$Types$var("a")
        ]), $mdgriffith$elm_codegen$Internal$Types$var("b"))
      ]), $mdgriffith$elm_codegen$Internal$Types$var("b")), l, r);
    });
    var $author$project$Gen$AppUrl$toString = function(toStringArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["AppUrl"]), "AppUrl", _List_Nil)
        ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
        i: _List_fromArray(["AppUrl"]),
        j: "toString"
      }), _List_fromArray([toStringArg_]));
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$bool = A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "Bool", _List_Nil);
    var $mdgriffith$elm_codegen$Elm$Annotation$tuple = F2(function(one, two) {
      return {
        jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(one), $mdgriffith$elm_codegen$Elm$Annotation$getAliases(two)),
        h: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(_List_fromArray([
          $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(one),
          $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(two)
        ]))),
        d: _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(one), $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(two))
      };
    });
    var $author$project$Gen$Dict$values_ = {
      dK: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "diff"
      }),
      kV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ]))),
        i: _List_fromArray(["Dict"]),
        j: "empty"
      }),
      el: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "filter"
      }),
      eo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["Dict"]),
        j: "foldl"
      }),
      ep: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["Dict"]),
        j: "foldr"
      }),
      ex: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"), $mdgriffith$elm_codegen$Elm$Annotation$var("v")))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "fromList"
      }),
      eD: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("v")))),
        i: _List_fromArray(["Dict"]),
        j: "get"
      }),
      fj: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "insert"
      }),
      fm: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "intersect"
      }),
      fo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["Dict"]),
        j: "isEmpty"
      }),
      fw: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("k")))),
        i: _List_fromArray(["Dict"]),
        j: "keys"
      }),
      fV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "map"
      }),
      gd: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["Dict"]),
        j: "member"
      }),
      gg: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("result")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("result")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("result")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ])),
          $mdgriffith$elm_codegen$Elm$Annotation$var("result")
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result"))),
        i: _List_fromArray(["Dict"]),
        j: "merge"
      }),
      g6: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ]))))),
        i: _List_fromArray(["Dict"]),
        j: "partition"
      }),
      hE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "remove"
      }),
      ig: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "singleton"
      }),
      ih: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
        i: _List_fromArray(["Dict"]),
        j: "size"
      }),
      i4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("k"), $mdgriffith$elm_codegen$Elm$Annotation$var("v"))))),
        i: _List_fromArray(["Dict"]),
        j: "toList"
      }),
      jo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "union"
      }),
      mZ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("v"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("v"))),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("v")
        ])))),
        i: _List_fromArray(["Dict"]),
        j: "update"
      }),
      ju: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("v")))),
        i: _List_fromArray(["Dict"]),
        j: "values"
      })
    };
    var $author$project$Generate$Route$renderPath = F4(function(path, includePathTail, queryParams, paramValues) {
      var base = $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, function(piece) {
        if (!piece.$) {
          var token = piece.a;
          return $mdgriffith$elm_codegen$Elm$string(token);
        } else {
          var _var = piece.a;
          return A2($mdgriffith$elm_codegen$Elm$get, _var, paramValues);
        }
      }, path));
      var fullPath = includePathTail ? A2($mdgriffith$elm_codegen$Elm$Op$append, base, A2($mdgriffith$elm_codegen$Elm$get, "path_", paramValues)) : base;
      var allParams = $author$project$Generate$Route$hasNoParams(queryParams) ? $author$project$Gen$Dict$empty : queryParams.bP ? A2($mdgriffith$elm_codegen$Elm$get, "params", paramValues) : A3($elm$core$Set$foldl, F2(function(field, dict) {
        return A2($mdgriffith$elm_codegen$Elm$Op$pipe, A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$Dict$values_.fj, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$string(field),
          A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($mdgriffith$elm_codegen$Elm$get, field, paramValues), {
            ft: _Utils_Tuple2("param", function(param) {
              return $mdgriffith$elm_codegen$Elm$list(_List_fromArray([param]));
            }),
            gy: $mdgriffith$elm_codegen$Elm$list(_List_Nil)
          })
        ])), dict);
      }), $author$project$Gen$Dict$empty, queryParams.aD);
      return $author$project$Gen$AppUrl$toString($mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("path", fullPath),
        _Utils_Tuple2("queryParameters", allParams),
        _Utils_Tuple2("fragment", $mdgriffith$elm_codegen$Elm$nothing)
      ])));
    });
    var $author$project$Generate$Route$urlEncoder = function(routes) {
      return _List_fromArray([
        $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "toString", A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")
        ]), $mdgriffith$elm_codegen$Elm$Annotation$string), A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "route", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), function(route) {
          return A3($mdgriffith$elm_codegen$Elm$Case$custom, route, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route"), A2($elm$core$List$map, function(individualRoute) {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params", $author$project$Generate$Route$paramType(individualRoute)), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", individualRoute.e4), $elm$core$Basics$identity)), function(params) {
              var _v0 = individualRoute.m_;
              var path = _v0.l7;
              var includePathTail = _v0.a9;
              var queryParams = _v0.aW;
              return A4($author$project$Generate$Route$renderPath, path, includePathTail, queryParams, params);
            });
          }, routes));
        }))))
      ]);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$addAlias = F4(function(mod, name, ann, aliasCache) {
      var annDetails = ann;
      return A3($elm$core$Dict$insert, A2($mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey, mod, name), {
        iS: annDetails.h,
        cj: $mdgriffith$elm_codegen$Internal$Compiler$getGenerics(ann)
      }, aliasCache);
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$getAliases = function(_v0) {
      var ann = _v0;
      return ann.jQ;
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$alias = F4(function(mod, name, vars, target) {
      return {
        jQ: A4($mdgriffith$elm_codegen$Internal$Compiler$addAlias, mod, name, target, A3($elm$core$List$foldl, F2(function(ann, aliases) {
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Internal$Compiler$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$getAliases(target), vars)),
        h: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), A2($elm$core$List$map, A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$nodify, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation), vars)),
        d: function() {
          if (!mod.b) {
            return A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, vars);
          } else {
            return A2($elm$core$List$cons, mod, A2($elm$core$List$concatMap, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, vars));
          }
        }()
      };
    });
    var $author$project$Gen$Url$moduleName_ = _List_fromArray(["Url"]);
    var $author$project$Gen$Url$annotation_ = {
      b2: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Url"]), "Protocol", _List_Nil),
      m_: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Url$moduleName_, "Url", _List_Nil, $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("protocol", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Url"]), "Protocol", _List_Nil)),
        _Utils_Tuple2("host", $mdgriffith$elm_codegen$Elm$Annotation$string),
        _Utils_Tuple2("port_", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$int)),
        _Utils_Tuple2("path", $mdgriffith$elm_codegen$Elm$Annotation$string),
        _Utils_Tuple2("query", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string)),
        _Utils_Tuple2("fragment", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string))
      ])))
    };
    var $author$project$Gen$AppUrl$fromUrl = function(fromUrlArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Url"]), "Url", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["AppUrl"]), "AppUrl", _List_Nil))),
        i: _List_fromArray(["AppUrl"]),
        j: "fromUrl"
      }), _List_fromArray([fromUrlArg_]));
    };
    var $author$project$Gen$AppUrl$moduleName_ = _List_fromArray(["AppUrl"]);
    var $author$project$Gen$AppUrl$annotation_ = {
      cB: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$AppUrl$moduleName_, "AppUrl", _List_Nil, $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("path", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)),
        _Utils_Tuple2("queryParameters", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["AppUrl"]), "QueryParameters", _List_Nil)),
        _Utils_Tuple2("fragment", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string))
      ]))),
      hv: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$AppUrl$moduleName_, "QueryParameters", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$string,
        $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)
      ])))
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = { $: 0 };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = { $: 0 };
    var $mdgriffith$elm_codegen$Internal$Compiler$inference = function(type_) {
      return { jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: type_ };
    };
    var $mdgriffith$elm_codegen$Internal$Arg$ignore = function(index) {
      var imports = _List_Nil;
      var annotation = $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$inference($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit));
      return {
        dI: {
          h: annotation,
          d: imports,
          g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern)
        },
        ba: $mdgriffith$elm_codegen$Internal$Index$next(index),
        jt: function(_v0) {
          return {
            h: $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$inference($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit)),
            c: $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr,
            d: imports
          };
        }
      };
    };
    var $mdgriffith$elm_codegen$Elm$Arg$ignore = $mdgriffith$elm_codegen$Internal$Arg$ignore;
    var $author$project$Generate$Route$routeOrder = function(_v0) {
      var pattern = _v0;
      return _Utils_Tuple2(pattern.a9 ? 1 : 0, A2($elm$core$List$map, function(piece) {
        if (!piece.$) {
          var token = piece.a;
          return _Utils_Tuple2(0, token);
        } else {
          var name = piece.a;
          return _Utils_Tuple2(1, name);
        }
      }, pattern.l7));
    };
    var $mdgriffith$elm_codegen$Internal$Types$bool = A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "Bool")), _List_Nil);
    var $mdgriffith$elm_codegen$Elm$bool = function(on) {
      return function(_v0) {
        return {
          h: $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: $mdgriffith$elm_codegen$Internal$Types$bool }),
          c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, on ? "True" : "False"),
          d: _List_Nil
        };
      };
    };
    var $author$project$Gen$Maybe$call_ = {
      cy: F2(function(andThenArg_, andThenArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["Maybe"]),
          j: "andThen"
        }), _List_fromArray([andThenArg_, andThenArg_0]));
      }),
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["Maybe"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      fW: F3(function(map2Arg_, map2Arg_0, map2Arg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("value")))),
          i: _List_fromArray(["Maybe"]),
          j: "map2"
        }), _List_fromArray([map2Arg_, map2Arg_0, map2Arg_1]));
      }),
      fX: F4(function(map3Arg_, map3Arg_0, map3Arg_1, map3Arg_2) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("c"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("value")))),
          i: _List_fromArray(["Maybe"]),
          j: "map3"
        }), _List_fromArray([map3Arg_, map3Arg_0, map3Arg_1, map3Arg_2]));
      }),
      fY: F5(function(map4Arg_, map4Arg_0, map4Arg_1, map4Arg_2, map4Arg_3) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("d")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("d"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("value")))),
          i: _List_fromArray(["Maybe"]),
          j: "map4"
        }), _List_fromArray([map4Arg_, map4Arg_0, map4Arg_1, map4Arg_2, map4Arg_3]));
      }),
      fZ: F6(function(map5Arg_, map5Arg_0, map5Arg_1, map5Arg_2, map5Arg_3, map5Arg_4) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("e")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("d")),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("e"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("value")))),
          i: _List_fromArray(["Maybe"]),
          j: "map5"
        }), _List_fromArray([map5Arg_, map5Arg_0, map5Arg_1, map5Arg_2, map5Arg_3, map5Arg_4]));
      }),
      jG: F2(function(withDefaultArg_, withDefaultArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("a"))),
          i: _List_fromArray(["Maybe"]),
          j: "withDefault"
        }), _List_fromArray([withDefaultArg_, withDefaultArg_0]));
      })
    };
    var $author$project$Gen$Dict$get = F2(function(getArg_, getArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Dict"]), "Dict", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("v")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("v")))),
        i: _List_fromArray(["Dict"]),
        j: "get"
      }), _List_fromArray([getArg_, getArg_0]));
    });
    var $mdgriffith$elm_codegen$Internal$Arg$items = F2(function(itemsArgs, _v0) {
      var arg = _v0;
      return function(index) {
        var toSequence = arg(index);
        var details = toSequence.dI;
        var imports = details.d;
        var newAnnotation = A2($elm$core$Result$map, function(ann) {
          return { jQ: ann.jQ, g: ann.g, ji: ann.ji };
        }, details.h);
        var _v1 = A3($elm$core$List$foldr, F2(function(_v2, _v3) {
          var itemArg = _v2;
          var dacc = _v3.a;
          var iacc = _v3.b;
          var itemDetails = itemArg(iacc);
          return _Utils_Tuple2(A2($elm$core$List$cons, itemDetails, dacc), itemDetails.ba);
        }), _Utils_Tuple2(_List_Nil, toSequence.ba), itemsArgs);
        var itemsDetails = _v1.a;
        var lastIndex = _v1.b;
        return {
          dI: {
            h: newAnnotation,
            d: imports,
            g7: function() {
              var _v4 = $mdgriffith$elm_codegen$Internal$Compiler$denode(details.g7);
              switch (_v4.$) {
                case 10:
                  var listItems = _v4.a;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_Utils_ap(listItems, A2($elm$core$List$map, function(itemDetails) {
                    return itemDetails.dI.g7;
                  }, itemsDetails))));
                case 12:
                  var base = _v4.a;
                  var variantItems = _v4.b;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern, base, _Utils_ap(variantItems, A2($elm$core$List$map, function(itemDetails) {
                    return itemDetails.dI.g7;
                  }, itemsDetails))));
                default:
                  return details.g7;
              }
            }()
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(lastIndex),
          jt: toSequence.jt(A2($elm$core$List$map, function($2) {
            return $2.jt;
          }, itemsDetails))
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$items = $mdgriffith$elm_codegen$Internal$Arg$items;
    var $mdgriffith$elm_codegen$Elm$just = function(content) {
      return $mdgriffith$elm_codegen$Elm$maybe($elm$core$Maybe$Just(content));
    };
    var $mdgriffith$elm_codegen$Internal$Types$list = function(inner) {
      return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed, $mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "List")), _List_fromArray([
        $mdgriffith$elm_codegen$Internal$Types$nodify(inner)
      ]));
    };
    var $mdgriffith$elm_codegen$Internal$Arg$list = function(toList) {
      return function(index) {
        var imports = _List_Nil;
        var annotation = $elm$core$Result$Ok({
          jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
          g: $elm$core$Dict$empty,
          ji: $mdgriffith$elm_codegen$Internal$Types$list($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType("list"))
        });
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_List_Nil))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(index),
          jt: toList
        };
      };
    };
    var $mdgriffith$elm_codegen$Elm$Arg$list = $mdgriffith$elm_codegen$Internal$Arg$list;
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2(function(a, b) {
      return { $: 9, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Arg$toUncons = F2(function(listItems, lastItem) {
      if (!listItems.b) {
        return $mdgriffith$elm_codegen$Internal$Compiler$nodify(lastItem);
      } else {
        var first = listItems.a;
        var rest = listItems.b;
        return $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, first, A2($mdgriffith$elm_codegen$Internal$Arg$toUncons, rest, lastItem)));
      }
    });
    var $mdgriffith$elm_codegen$Internal$Arg$listRemaining = F2(function(variableName, _v0) {
      var toRemaining = _v0;
      return function(index) {
        var toSequence = toRemaining(index);
        var imports = _List_Nil;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Arg$val, toSequence.ba, variableName);
        var variable = _v1.a;
        return {
          dI: {
            h: toSequence.dI.h,
            d: imports,
            g7: function() {
              var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$denode(toSequence.dI.g7);
              if (_v2.$ === 10) {
                var listItems = _v2.a;
                return A2($mdgriffith$elm_codegen$Internal$Arg$toUncons, listItems, $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(variableName));
              } else {
                return toSequence.dI.g7;
              }
            }()
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(toSequence.ba),
          jt: toSequence.jt(variable)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$listRemaining = $mdgriffith$elm_codegen$Internal$Arg$listRemaining;
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function(a) {
      return { $: 3, a };
    };
    var $mdgriffith$elm_codegen$Internal$Arg$string = function(str) {
      return function(index) {
        var imports = _List_Nil;
        var annotation = $elm$core$Result$Ok({ jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, g: $elm$core$Dict$empty, ji: $mdgriffith$elm_codegen$Internal$Types$string });
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern(str))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(index),
          jt: function(_v0) {
            return {
              h: annotation,
              c: $stil4m$elm_syntax$Elm$Syntax$Expression$Literal(str),
              d: imports
            };
          }
        };
      };
    };
    var $mdgriffith$elm_codegen$Elm$Arg$string = $mdgriffith$elm_codegen$Internal$Arg$string;
    var $author$project$Generate$Route$toTokenPattern = function(token) {
      if (!token.$) {
        var string = token.a;
        return $mdgriffith$elm_codegen$Elm$Arg$string(string);
      } else {
        var varname = token.a;
        return $mdgriffith$elm_codegen$Elm$Arg$var(varname);
      }
    };
    var $author$project$Gen$List$values_ = {
      cw: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["List"]),
        j: "all"
      }),
      cz: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["List"]),
        j: "any"
      }),
      cD: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "append"
      }),
      dn: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "concat"
      }),
      $7: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
        i: _List_fromArray(["List"]),
        j: "concatMap"
      }),
      dU: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$int,
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "drop"
      }),
      el: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "filter"
      }),
      em: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
        i: _List_fromArray(["List"]),
        j: "filterMap"
      }),
      eo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["List"]),
        j: "foldl"
      }),
      ep: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["List"]),
        j: "foldr"
      }),
      eQ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "head"
      }),
      fa: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$int,
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
        i: _List_fromArray(["List"]),
        j: "indexedMap"
      }),
      fn: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "intersperse"
      }),
      fo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["List"]),
        j: "isEmpty"
      }),
      fG: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
        i: _List_fromArray(["List"]),
        j: "length"
      }),
      fV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
        i: _List_fromArray(["List"]),
        j: "map"
      }),
      fW: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
        i: _List_fromArray(["List"]),
        j: "map2"
      }),
      fX: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("c")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
        i: _List_fromArray(["List"]),
        j: "map3"
      }),
      fY: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("d")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("d"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
        i: _List_fromArray(["List"]),
        j: "map4"
      }),
      fZ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("e")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("d")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("e"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
        i: _List_fromArray(["List"]),
        j: "map5"
      }),
      f9: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
        i: _List_fromArray(["List"]),
        j: "maximum"
      }),
      gd: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["List"]),
        j: "member"
      }),
      gk: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
        i: _List_fromArray(["List"]),
        j: "minimum"
      }),
      g6: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))))),
        i: _List_fromArray(["List"]),
        j: "partition"
      }),
      hn: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("number"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("number"))),
        i: _List_fromArray(["List"]),
        j: "product"
      }),
      hx: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
        i: _List_fromArray(["List"]),
        j: "range"
      }),
      hH: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$int,
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "repeat"
      }),
      hO: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "reverse"
      }),
      ig: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "singleton"
      }),
      il: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
        i: _List_fromArray(["List"]),
        j: "sort"
      }),
      im: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "sortBy"
      }),
      $9: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Basics"]), "Order", _List_Nil)),
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "sortWith"
      }),
      iJ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("number"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("number"))),
        i: _List_fromArray(["List"]),
        j: "sum"
      }),
      iQ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))))),
        i: _List_fromArray(["List"]),
        j: "tail"
      }),
      iR: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$int,
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["List"]),
        j: "take"
      }),
      jp: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("a"), $mdgriffith$elm_codegen$Elm$Annotation$var("b")))
        ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))))),
        i: _List_fromArray(["List"]),
        j: "unzip"
      })
    };
    var $author$project$Generate$Route$toBranchPattern = F2(function(appUrl, routeInfo) {
      var toResult = function(route) {
        return $mdgriffith$elm_codegen$Elm$just($mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("route", route),
          _Utils_Tuple2("isRedirect", $mdgriffith$elm_codegen$Elm$bool(routeInfo.b3))
        ])));
      };
      var page = routeInfo.b_;
      var _v0 = routeInfo.g7;
      var pattern = _v0;
      return pattern.a9 ? A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$listRemaining, "andPathTail", A2($mdgriffith$elm_codegen$Elm$Arg$items, A2($elm$core$List$map, $author$project$Generate$Route$toTokenPattern, pattern.l7), $mdgriffith$elm_codegen$Elm$Arg$list(F2(function(_v1, remaining) {
        var queryParamFields = A3($elm$core$Set$foldl, F2(function(queryField, gathered) {
          return A2($elm$core$List$cons, _Utils_Tuple2(queryField, A2($author$project$Gen$Maybe$call_.cy, $author$project$Gen$List$values_.eQ, A2($author$project$Gen$Dict$get, $mdgriffith$elm_codegen$Elm$string(queryField), A2($mdgriffith$elm_codegen$Elm$get, "queryParameters", appUrl)))), gathered);
        }), _List_Nil, pattern.aW.aD);
        var pathFields = A2($elm$core$List$filterMap, function(token) {
          if (!token.$) {
            return $elm$core$Maybe$Nothing;
          } else {
            var varname = token.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(varname, $mdgriffith$elm_codegen$Elm$val(varname)));
          }
        }, pattern.l7);
        return toResult(A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(page.e4), _List_fromArray([
          $mdgriffith$elm_codegen$Elm$record(_Utils_ap(pathFields, _Utils_ap(queryParamFields, _List_fromArray([
            _Utils_Tuple2("path_", remaining)
          ]))))
        ])));
      })))), $elm$core$Basics$identity) : A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$items, A2($elm$core$List$map, $author$project$Generate$Route$toTokenPattern, pattern.l7), $mdgriffith$elm_codegen$Elm$Arg$list(function(_v3) {
        var queryParamFields = A3($elm$core$Set$foldl, F2(function(queryField, gathered) {
          return A2($elm$core$List$cons, _Utils_Tuple2(queryField, A2($author$project$Gen$Maybe$call_.cy, $author$project$Gen$List$values_.eQ, A2($author$project$Gen$Dict$get, $mdgriffith$elm_codegen$Elm$string(queryField), A2($mdgriffith$elm_codegen$Elm$get, "queryParameters", appUrl)))), gathered);
        }), _List_Nil, pattern.aW.aD);
        var pathFields = A2($elm$core$List$filterMap, function(token) {
          if (!token.$) {
            return $elm$core$Maybe$Nothing;
          } else {
            var varname = token.a;
            return $elm$core$Maybe$Just(_Utils_Tuple2(varname, $mdgriffith$elm_codegen$Elm$val(varname)));
          }
        }, pattern.l7);
        return toResult(A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(page.e4), _List_fromArray([
          $mdgriffith$elm_codegen$Elm$record(_Utils_ap(pathFields, queryParamFields))
        ])));
      })), $elm$core$Basics$identity);
    });
    var $author$project$Generate$Route$toUrlPatterns = function(page) {
      return A2($elm$core$List$cons, { b_: page, g7: page.m_, b3: false }, A2($elm$core$List$map, function(from) {
        return { b_: page, g7: from, b3: true };
      }, page.b4));
    };
    var $author$project$Generate$Route$parseAppUrl = function(unsorted) {
      var paths = A2($elm$core$List$sortBy, A2($elm$core$Basics$composeR, function($2) {
        return $2.g7;
      }, $author$project$Generate$Route$routeOrder), A2($elm$core$List$concatMap, $author$project$Generate$Route$toUrlPatterns, unsorted));
      return A2($mdgriffith$elm_codegen$Elm$declaration, "parseAppUrl", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "appUrl", $author$project$Gen$AppUrl$annotation_.cB), function(appUrl) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("route", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")),
          _Utils_Tuple2("isRedirect", $mdgriffith$elm_codegen$Elm$Annotation$bool)
        ]))), A3($mdgriffith$elm_codegen$Elm$Case$custom, A2($mdgriffith$elm_codegen$Elm$get, "path", appUrl), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string), _Utils_ap(A2($elm$core$List$map, $author$project$Generate$Route$toBranchPattern(appUrl), paths), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Case$branch, $mdgriffith$elm_codegen$Elm$Arg$ignore, function(_v0) {
            return $mdgriffith$elm_codegen$Elm$nothing;
          })
        ]))));
      }));
    };
    var $mdgriffith$elm_codegen$Elm$fn2 = F3(function(arg1, arg2, toExpression) {
      return $mdgriffith$elm_codegen$Elm$fnDone(A2($mdgriffith$elm_codegen$Elm$fnArg, arg2, A2($mdgriffith$elm_codegen$Elm$fnArg, arg1, $mdgriffith$elm_codegen$Elm$fnBuilder(toExpression))));
    });
    var $author$project$Generate$Route$sameRoute = function(routes) {
      return $elm$core$List$length(routes) <= 1 ? $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "sameRouteBase", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "one", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "two", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), F2(function(one, two) {
        return $mdgriffith$elm_codegen$Elm$bool(true);
      })))) : $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "sameRouteBase", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "one", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "two", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), F2(function(one, two) {
        return A3($mdgriffith$elm_codegen$Elm$Case$custom, one, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route"), A2($elm$core$List$map, function(route) {
          return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params", $mdgriffith$elm_codegen$Elm$Annotation$var("params")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", route.e4), $elm$core$Basics$identity)), function(_v0) {
            return A3($mdgriffith$elm_codegen$Elm$Case$custom, two, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route"), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params2", $mdgriffith$elm_codegen$Elm$Annotation$var("params2")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", route.e4), $elm$core$Basics$identity)), function(_v1) {
                return $mdgriffith$elm_codegen$Elm$bool(true);
              }),
              A2($mdgriffith$elm_codegen$Elm$Case$branch, $mdgriffith$elm_codegen$Elm$Arg$ignore, function(_v2) {
                return $mdgriffith$elm_codegen$Elm$bool(false);
              })
            ]));
          });
        }, routes));
      }))));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Block = function(a) {
      return { $: 3, a };
    };
    var $mdgriffith$elm_codegen$Elm$unsafe = function(source) {
      return $mdgriffith$elm_codegen$Internal$Compiler$Block($elm$core$String$trim(source));
    };
    var $author$project$Generate$Route$urlParser = function(routes) {
      return _List_fromArray([
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "parse", A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Url$annotation_.m_]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("route", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")),
          _Utils_Tuple2("isRedirect", $mdgriffith$elm_codegen$Elm$Annotation$bool)
        ])))), A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), function(url) {
          var appUrl = $author$project$Gen$AppUrl$fromUrl(url);
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("parseAppUrl"), _List_fromArray([appUrl]));
        })))),
        $author$project$Generate$Route$sameRoute(routes),
        $author$project$Generate$Route$parseAppUrl(routes),
        $mdgriffith$elm_codegen$Elm$unsafe(`
getSingle : String -> AppUrl.QueryParameters -> Maybe String
getSingle field appUrlParams =
    case Dict.get field appUrlParams of
        Nothing ->
            Nothing

        Just [] ->
            Nothing

        Just (single :: _) ->
            Just single


getList : String -> AppUrl.QueryParameters -> List String
getList field appUrlParams =
    Dict.get field appUrlParams
        |> Maybe.withDefault []

`)
      ]);
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$char = A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_fromArray(["Char"]), "Char", _List_Nil);
    var $mdgriffith$elm_codegen$Elm$Annotation$float = A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "Float", _List_Nil);
    var $author$project$Gen$String$call_ = {
      cw: F2(function(allArg_, allArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "all"
        }), _List_fromArray([allArg_, allArg_0]));
      }),
      cz: F2(function(anyArg_, anyArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "any"
        }), _List_fromArray([anyArg_, anyArg_0]));
      }),
      cD: F2(function(appendArg_, appendArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "append"
        }), _List_fromArray([appendArg_, appendArg_0]));
      }),
      dn: function(concatArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "concat"
        }), _List_fromArray([concatArg_]));
      },
      dp: F2(function(consArg_, consArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "cons"
        }), _List_fromArray([consArg_, consArg_0]));
      }),
      dq: F2(function(containsArg_, containsArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "contains"
        }), _List_fromArray([containsArg_, containsArg_0]));
      }),
      dV: F2(function(dropLeftArg_, dropLeftArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "dropLeft"
        }), _List_fromArray([dropLeftArg_, dropLeftArg_0]));
      }),
      dW: F2(function(dropRightArg_, dropRightArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "dropRight"
        }), _List_fromArray([dropRightArg_, dropRightArg_0]));
      }),
      d4: F2(function(endsWithArg_, endsWithArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "endsWith"
        }), _List_fromArray([endsWithArg_, endsWithArg_0]));
      }),
      el: F2(function(filterArg_, filterArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "filter"
        }), _List_fromArray([filterArg_, filterArg_0]));
      }),
      eo: F3(function(foldlArg_, foldlArg_0, foldlArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$char,
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          i: _List_fromArray(["String"]),
          j: "foldl"
        }), _List_fromArray([foldlArg_, foldlArg_0, foldlArg_1]));
      }),
      ep: F3(function(foldrArg_, foldrArg_0, foldrArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$char,
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          i: _List_fromArray(["String"]),
          j: "foldr"
        }), _List_fromArray([foldrArg_, foldrArg_0, foldrArg_1]));
      }),
      eu: function(fromCharArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "fromChar"
        }), _List_fromArray([fromCharArg_]));
      },
      ev: function(fromFloatArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "fromFloat"
        }), _List_fromArray([fromFloatArg_]));
      },
      ew: function(fromIntArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "fromInt"
        }), _List_fromArray([fromIntArg_]));
      },
      ex: function(fromListArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$char)
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "fromList"
        }), _List_fromArray([fromListArg_]));
      },
      fb: F2(function(indexesArg_, indexesArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
          i: _List_fromArray(["String"]),
          j: "indexes"
        }), _List_fromArray([indexesArg_, indexesArg_0]));
      }),
      fc: F2(function(indicesArg_, indicesArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
          i: _List_fromArray(["String"]),
          j: "indices"
        }), _List_fromArray([indicesArg_, indicesArg_0]));
      }),
      fo: function(isEmptyArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "isEmpty"
        }), _List_fromArray([isEmptyArg_]));
      },
      fs: F2(function(joinArg_, joinArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "join"
        }), _List_fromArray([joinArg_, joinArg_0]));
      }),
      fE: F2(function(leftArg_, leftArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "left"
        }), _List_fromArray([leftArg_, leftArg_0]));
      }),
      fG: function(lengthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
          i: _List_fromArray(["String"]),
          j: "length"
        }), _List_fromArray([lengthArg_]));
      },
      fL: function(linesArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
          i: _List_fromArray(["String"]),
          j: "lines"
        }), _List_fromArray([linesArg_]));
      },
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$char),
            $mdgriffith$elm_codegen$Elm$Annotation$string
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      gU: F3(function(padArg_, padArg_0, padArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "pad"
        }), _List_fromArray([padArg_, padArg_0, padArg_1]));
      }),
      gV: F3(function(padLeftArg_, padLeftArg_0, padLeftArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "padLeft"
        }), _List_fromArray([padLeftArg_, padLeftArg_0, padLeftArg_1]));
      }),
      gW: F3(function(padRightArg_, padRightArg_0, padRightArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "padRight"
        }), _List_fromArray([padRightArg_, padRightArg_0, padRightArg_1]));
      }),
      hH: F2(function(repeatArg_, repeatArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "repeat"
        }), _List_fromArray([repeatArg_, repeatArg_0]));
      }),
      hI: F3(function(replaceArg_, replaceArg_0, replaceArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "replace"
        }), _List_fromArray([replaceArg_, replaceArg_0, replaceArg_1]));
      }),
      hO: function(reverseArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "reverse"
        }), _List_fromArray([reverseArg_]));
      },
      hS: F2(function(rightArg_, rightArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "right"
        }), _List_fromArray([rightArg_, rightArg_0]));
      }),
      ii: F3(function(sliceArg_, sliceArg_0, sliceArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "slice"
        }), _List_fromArray([sliceArg_, sliceArg_0, sliceArg_1]));
      }),
      iu: F2(function(splitArg_, splitArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
          i: _List_fromArray(["String"]),
          j: "split"
        }), _List_fromArray([splitArg_, splitArg_0]));
      }),
      iz: F2(function(startsWithArg_, startsWithArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["String"]),
          j: "startsWith"
        }), _List_fromArray([startsWithArg_, startsWithArg_0]));
      }),
      i1: function(toFloatArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float))),
          i: _List_fromArray(["String"]),
          j: "toFloat"
        }), _List_fromArray([toFloatArg_]));
      },
      i2: function(toIntArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$int))),
          i: _List_fromArray(["String"]),
          j: "toInt"
        }), _List_fromArray([toIntArg_]));
      },
      i4: function(toListArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$char))),
          i: _List_fromArray(["String"]),
          j: "toList"
        }), _List_fromArray([toListArg_]));
      },
      i5: function(toLowerArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "toLower"
        }), _List_fromArray([toLowerArg_]));
      },
      i9: function(toUpperArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "toUpper"
        }), _List_fromArray([toUpperArg_]));
      },
      jd: function(trimArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "trim"
        }), _List_fromArray([trimArg_]));
      },
      je: function(trimLeftArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "trimLeft"
        }), _List_fromArray([trimLeftArg_]));
      },
      jf: function(trimRightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
          i: _List_fromArray(["String"]),
          j: "trimRight"
        }), _List_fromArray([trimRightArg_]));
      },
      jn: function(unconsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string)))),
          i: _List_fromArray(["String"]),
          j: "uncons"
        }), _List_fromArray([unconsArg_]));
      },
      jL: function(wordsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
          i: _List_fromArray(["String"]),
          j: "words"
        }), _List_fromArray([wordsArg_]));
      }
    };
    var $author$project$Generate$Route$getParamVariableList = function(page) {
      var _v0 = page.m_;
      var path = _v0.l7;
      return A2($elm$core$List$filterMap, function(piece) {
        if (!piece.$) {
          return $elm$core$Maybe$Nothing;
        } else {
          var name = piece.a;
          return $elm$core$Maybe$Just(name);
        }
      }, path);
    };
    var $author$project$Generate$Route$urlToId = function(routes) {
      return _List_fromArray([
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "toId", A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")
        ]), $mdgriffith$elm_codegen$Elm$Annotation$string), A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "route", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route")), function(route) {
          return A3($mdgriffith$elm_codegen$Elm$Case$custom, route, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Route"), A2($elm$core$List$map, function(individualRoute) {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params", $author$project$Generate$Route$paramType(individualRoute)), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", individualRoute.e4), $elm$core$Basics$identity)), function(params) {
              var variables = A2($elm$core$List$map, function(name) {
                return A2($mdgriffith$elm_codegen$Elm$get, name, params);
              }, $author$project$Generate$Route$getParamVariableList(individualRoute));
              if (!variables.b) {
                return $mdgriffith$elm_codegen$Elm$string(individualRoute.e4);
              } else {
                return A2($author$project$Gen$String$call_.fs, $mdgriffith$elm_codegen$Elm$string("/"), $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$cons, $mdgriffith$elm_codegen$Elm$string(individualRoute.e4), variables)));
              }
            });
          }, routes));
        }))))
      ]);
    };
    var $author$project$Generate$Route$generate = function(parsedRoutes) {
      var _v0 = $author$project$Generate$Route$checkForErrors(parsedRoutes);
      if (_v0.$ === 1) {
        var errs = _v0.a;
        return $elm$core$Result$Err(errs);
      } else {
        var routes = _v0.a;
        return $elm$core$Result$Ok(A3($mdgriffith$elm_codegen$Elm$fileWith, _List_fromArray(["App", "Route"]), { jQ: _List_Nil, kU: "# Routes" }, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "Route", A2($elm$core$List$map, function(route) {
            return A2($mdgriffith$elm_codegen$Elm$variantWith, A3($elm$core$String$replace, ".", "", route.e4), _List_fromArray([
              $author$project$Generate$Route$paramType(route)
            ]));
          }, routes))),
          $mdgriffith$elm_codegen$Elm$group(A2($elm$core$List$map, function(route) {
            return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$alias, $author$project$Options$App$toParamTypeString(route.e4), $author$project$Generate$Route$paramType(route)));
          }, routes)),
          $mdgriffith$elm_codegen$Elm$group($author$project$Generate$Route$urlEncoder(routes)),
          $mdgriffith$elm_codegen$Elm$group($author$project$Generate$Route$urlParser(routes)),
          $mdgriffith$elm_codegen$Elm$group($author$project$Generate$Route$urlToId(routes))
        ])));
      }
    };
    var $author$project$Gen$App$Page$Error$annotation_ = {
      a4: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Error"]), "Error", _List_Nil)
    };
    var $author$project$Gen$Browser$Navigation$annotation_ = {
      lv: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser", "Navigation"]), "Key", _List_Nil)
    };
    var $author$project$Gen$Json$Encode$annotation_ = {
      jt: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
    };
    var $author$project$Gen$Browser$moduleName_ = _List_fromArray(["Browser"]);
    var $author$project$Gen$Browser$annotation_ = {
      a2: function(documentArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Browser$moduleName_, "Document", _List_fromArray([documentArg0]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("title", $mdgriffith$elm_codegen$Elm$Annotation$string),
          _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))))
        ])));
      },
      jr: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser"]), "UrlRequest", _List_Nil)
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$unit = { jQ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, h: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit, d: _List_Nil };
    var $author$project$Gen$Browser$call_ = {
      cE: function(applicationArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("flags"),
                A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Url"]), "Url", _List_Nil),
                A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser", "Navigation"]), "Key", _List_Nil)
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser"]), "Document", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))),
              _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Sub", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))),
              _Utils_Tuple2("onUrlRequest", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser"]), "UrlRequest", _List_Nil)
              ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))),
              _Utils_Tuple2("onUrlChange", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Url"]), "Url", _List_Nil)
              ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Platform"]), "Program", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("flags"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Browser"]),
          j: "application"
        }), _List_fromArray([applicationArg_]));
      },
      a2: function(documentArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("flags")
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Browser"]), "Document", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))),
              _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Sub", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Platform"]), "Program", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("flags"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Browser"]),
          j: "document"
        }), _List_fromArray([documentArg_]));
      },
      d$: function(elementArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("flags")
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))),
              _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))),
              _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Sub", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ]))))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Platform"]), "Program", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("flags"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Browser"]),
          j: "element"
        }), _List_fromArray([elementArg_]));
      },
      h1: function(sandboxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("init", $mdgriffith$elm_codegen$Elm$Annotation$var("model")),
              _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))),
              _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("model")
              ]), $mdgriffith$elm_codegen$Elm$Annotation$var("model")))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Platform"]), "Program", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$unit,
            $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Browser"]),
          j: "sandbox"
        }), _List_fromArray([sandboxArg_]));
      }
    };
    var $mdgriffith$elm_codegen$Elm$fn3 = F4(function(arg1, arg2, arg3, toExpression) {
      return $mdgriffith$elm_codegen$Elm$fnDone(A2($mdgriffith$elm_codegen$Elm$fnArg, arg3, A2($mdgriffith$elm_codegen$Elm$fnArg, arg2, A2($mdgriffith$elm_codegen$Elm$fnArg, arg1, $mdgriffith$elm_codegen$Elm$fnBuilder(toExpression)))));
    });
    var $author$project$Press$Model$effectBatch = function(batchArg) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Effect", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Effect", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Effect"]),
        j: "batch"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$list(batchArg)
      ]));
    };
    var $author$project$Press$Model$effectMap = F2(function(mapArg, mapArg0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Effect", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Effect", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("b")
        ])))),
        i: _List_fromArray(["Effect"]),
        j: "map"
      }), _List_fromArray([mapArg, mapArg0]));
    });
    var $author$project$Gen$App$State$init = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("state")
      ]))),
      i: _List_fromArray(["App", "State"]),
      j: "init"
    });
    var $author$project$Gen$App$State$initLimit = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil)),
      i: _List_fromArray(["App", "State"]),
      j: "initLimit"
    });
    var $author$project$Press$Model$storesType = A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Stores"]), "Stores");
    var $author$project$Press$Model$FullConfig = 3;
    var $author$project$Press$Model$SubscriptionConfig = 1;
    var $author$project$Press$Model$TestConfig = 4;
    var $author$project$Press$Model$UpdateConfig = 2;
    var $author$project$Press$Model$ViewConfig = 0;
    var $author$project$Gen$App$Page$moduleName_ = _List_fromArray(["App", "Page"]);
    var $author$project$Gen$App$Page$annotation_ = {
      bb: F2(function(initArg0, initArg1) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$App$Page$moduleName_, "Init", _List_fromArray([initArg0, initArg1]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "InitPlan", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])));
      }),
      fd: F2(function(initPlanArg0, initPlanArg1) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "InitPlan", _List_fromArray([initPlanArg0, initPlanArg1]));
      }),
      b_: F4(function(pageArg0, pageArg1, pageArg2, pageArg3) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([pageArg0, pageArg1, pageArg2, pageArg3]));
      })
    };
    var $author$project$Gen$App$State$annotation_ = {
      kj: function(cacheArg0) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([cacheArg0]));
      },
      lz: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil)
    };
    var $author$project$Press$Model$appMsg = A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Msg", _List_fromArray([
      $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
    ]));
    var $author$project$Press$Model$effectWith = function(inner) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([inner]));
    };
    var $author$project$Press$Model$pageIdType = A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Page", "Id"]), "Id");
    var $author$project$Press$Model$regionIdType = A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "View", "Region"]), "Id");
    var $author$project$Press$Model$regionOperation = A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Operation", _List_fromArray([$author$project$Press$Model$pageIdType]));
    var $author$project$Press$Model$regionType = A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "View", "Region"]), "Region");
    var $author$project$Press$Model$regionViewType = A2($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Regions");
    var $author$project$Press$Model$regionsRecord = A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Regions", _List_fromArray([$author$project$Press$Model$pageIdType]));
    var $author$project$Press$Model$routePath = _List_fromArray(["App", "Route"]);
    var $author$project$Press$Model$routeType = A2($mdgriffith$elm_codegen$Elm$Annotation$named, $author$project$Press$Model$routePath, "Route");
    var $author$project$Press$Model$stateCache = $author$project$Gen$App$State$annotation_.kj(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "State"));
    var $author$project$Gen$Listen$annotation_ = {
      fP: function(listenArg0) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([listenArg0]));
      }
    };
    var $author$project$Gen$Platform$Cmd$annotation_ = {
      ku: function(cmdArg0) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Cmd"]), "Cmd", _List_fromArray([cmdArg0]));
      }
    };
    var $author$project$Gen$Platform$Sub$annotation_ = {
      iG: function(subArg0) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Sub"]), "Sub", _List_fromArray([subArg0]));
      }
    };
    var $author$project$Press$Model$effectType = A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
      $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
    ]));
    var $mdgriffith$elm_codegen$Elm$Annotation$extensible = F2(function(base, fields) {
      return {
        jQ: A3($elm$core$List$foldl, F2(function(_v0, aliases) {
          var ann = _v0.b;
          return A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, $mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
        }), $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, fields),
        h: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatValue(base)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll(A2($elm$core$List$map, function(_v1) {
          var name = _v1.a;
          var ann = _v1.b;
          return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatValue(name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(ann)));
        }, fields)))),
        d: A2($elm$core$List$concatMap, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports), fields)
      };
    });
    var $author$project$Press$Model$toConfig = function(configType) {
      return (configType === 3 ? $mdgriffith$elm_codegen$Elm$Annotation$record : $mdgriffith$elm_codegen$Elm$Annotation$extensible("config"))(A2($elm$core$List$filterMap, function(_v0) {
        var allowed = _v0.a;
        var name = _v0.b;
        var val = _v0.c;
        return A2($elm$core$List$member, configType, allowed) || configType === 3 ? $elm$core$Maybe$Just(_Utils_Tuple2(name, val)) : $elm$core$Maybe$Nothing;
      }, _List_fromArray([
        _Utils_Tuple3(_List_fromArray([4]), "init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$storesType, $author$project$Gen$Json$Encode$annotation_.jt, $author$project$Gen$Url$annotation_.m_]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), $author$project$Press$Model$effectType))),
        _Utils_Tuple3(_List_fromArray([2, 4]), "update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $author$project$Press$Model$storesType,
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), $author$project$Press$Model$effectType))),
        _Utils_Tuple3(_List_fromArray([1, 2, 4]), "subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $author$project$Press$Model$storesType,
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ]), $author$project$Gen$Listen$annotation_.fP($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))),
        _Utils_Tuple3(_List_fromArray([0, 4]), "view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $author$project$Press$Model$storesType,
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]), $author$project$Press$Model$appMsg),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Regions", _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "View", _List_fromArray([$author$project$Press$Model$appMsg]))
          ]))
        ]), $author$project$Gen$Browser$annotation_.a2($author$project$Press$Model$appMsg))),
        _Utils_Tuple3(_List_Nil, "toCmd", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $author$project$Press$Model$storesType,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "CmdOptions", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          $author$project$Press$Model$effectWith($author$project$Press$Model$appMsg)
        ]), $author$project$Gen$Platform$Cmd$annotation_.ku($author$project$Press$Model$appMsg))),
        _Utils_Tuple3(_List_fromArray([1, 2, 4]), "toSub", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $author$project$Press$Model$storesType,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "SubOptions", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          $author$project$Gen$Listen$annotation_.fP($author$project$Press$Model$appMsg)
        ]), $author$project$Gen$Platform$Sub$annotation_.iG($author$project$Press$Model$appMsg))),
        _Utils_Tuple3(_List_fromArray([4]), "onUrlChange", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Url$annotation_.m_]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))),
        _Utils_Tuple3(_List_fromArray([4]), "onUrlRequest", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Browser$annotation_.jr]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
      ])));
    };
    var $author$project$Press$Model$types = {
      kh: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Broadcast"]), "Msg"),
      kj: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Cache"),
      kv: $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("navKey", $author$project$Gen$Browser$Navigation$annotation_.lv),
        _Utils_Tuple2("dropPageCache", $author$project$Press$Model$appMsg),
        _Utils_Tuple2("preload", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$pageIdType]), $author$project$Press$Model$appMsg)),
        _Utils_Tuple2("viewRequested", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$regionOperation]), $author$project$Press$Model$appMsg)),
        _Utils_Tuple2("broadcast", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Broadcast"]), "Msg")
        ]), $author$project$Press$Model$appMsg))
      ])),
      bI: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ])),
      a3: $author$project$Press$Model$effectWith,
      k9: $author$project$Press$Model$toConfig(3),
      a8: $author$project$Press$Model$toConfig(1),
      la: $author$project$Press$Model$toConfig(4),
      lb: $author$project$Press$Model$toConfig(2),
      lc: $author$project$Press$Model$toConfig(0),
      _: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Model", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("key"),
        $mdgriffith$elm_codegen$Elm$Annotation$var("model")
      ])),
      lI: $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("key", $mdgriffith$elm_codegen$Elm$Annotation$var("key")),
        _Utils_Tuple2("limits", $author$project$Gen$App$State$annotation_.lz),
        _Utils_Tuple2("states", $author$project$Press$Model$stateCache),
        _Utils_Tuple2("stores", $author$project$Press$Model$storesType),
        _Utils_Tuple2("app", $mdgriffith$elm_codegen$Elm$Annotation$var("app"))
      ])),
      lM: $author$project$Press$Model$appMsg,
      A: $author$project$Press$Model$pageIdType,
      g2: A2($author$project$Gen$App$Page$annotation_.bb, $author$project$Press$Model$appMsg, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "State")),
      g3: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "PageModel"),
      l5: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "PageMsg"),
      mg: $author$project$Press$Model$regionIdType,
      hB: $author$project$Press$Model$regionOperation,
      mh: $author$project$Press$Model$regionType,
      mi: $author$project$Press$Model$regionViewType,
      mj: $author$project$Press$Model$regionsRecord,
      mn: $author$project$Press$Model$regionViewType(_List_fromArray([
        A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "View", _List_fromArray([$author$project$Press$Model$appMsg]))
      ])),
      ms: $author$project$Press$Model$routePath,
      mt: $author$project$Press$Model$routeType,
      mF: $author$project$Press$Model$stateCache,
      mI: $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("ignore", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $author$project$Press$Model$appMsg))
      ])),
      mJ: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Subscription", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ])),
      bt: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Model", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$unit,
        $mdgriffith$elm_codegen$Elm$Annotation$var("model")
      ])),
      ch: function(string) {
        return "To" + string;
      }
    };
    var $author$project$Press$Generate$Engine$initStores = F3(function(flags, viewing, url) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$storesType, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([$author$project$Press$Model$types.lM])))),
        i: _List_Nil,
        j: "initStores"
      }), _List_fromArray([flags, viewing, url]));
    });
    var $mdgriffith$elm_codegen$Elm$Let$Let = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Elm$Let$letIn = function(_return) {
      return function(index) {
        return { d: _List_Nil, ba: index, G: _List_Nil, S: _return };
      };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function(a) {
      return { $: 15, a };
    };
    var $mdgriffith$elm_codegen$Elm$Let$toExpression = function(_v0) {
      var toScope = _v0;
      return function(index) {
        var scope2 = toScope(index);
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, scope2.ba, scope2.S);
        var _return = _v1.b;
        return {
          h: _return.h,
          c: function() {
            var _v2 = _return.c;
            if (_v2.$ === 15) {
              var innerReturn = _v2.a;
              return $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression({
                aM: _Utils_ap($elm$core$List$reverse(scope2.G), innerReturn.aM),
                c: innerReturn.c
              });
            } else {
              return $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression({
                aM: $elm$core$List$reverse(scope2.G),
                c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return.c)
              });
            }
          }(),
          d: _Utils_ap(_return.d, scope2.d)
        };
      };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function(a) {
      return { $: 7, a };
    };
    var $mdgriffith$elm_codegen$Internal$Arg$tuple = F2(function(_v0, _v1) {
      var arg1 = _v0;
      var arg2 = _v1;
      return function(index) {
        var one = arg1(index);
        var two = arg2(one.ba);
        var details2 = two.dI;
        var details1 = one.dI;
        var imports = _Utils_ap(details1.d, details2.d);
        var annotation = A3($elm$core$Result$map2, F2(function(oneA, twoA) {
          return {
            jQ: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeAliases, twoA.jQ, oneA.jQ),
            g: A2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences, twoA.g, oneA.g),
            ji: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(_List_fromArray([
              $mdgriffith$elm_codegen$Internal$Compiler$nodify(oneA.ji),
              $mdgriffith$elm_codegen$Internal$Compiler$nodify(twoA.ji)
            ]))
          };
        }), details1.h, details2.h);
        return {
          dI: {
            h: annotation,
            d: imports,
            g7: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(_List_fromArray([details1.g7, details2.g7])))
          },
          ba: $mdgriffith$elm_codegen$Internal$Index$next(two.ba),
          jt: _Utils_Tuple2(one.jt, two.jt)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Arg$tuple = $mdgriffith$elm_codegen$Internal$Arg$tuple;
    var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $mdgriffith$elm_codegen$Elm$Let$unpack = F3(function(argument, bodyExpression, _v0) {
      var toLetScope = _v0;
      return function(index) {
        var argDetails = A2($mdgriffith$elm_codegen$Internal$Arg$toDetails, index, argument);
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, argDetails.ba, bodyExpression);
        var threeIndex = _v1.a;
        var bodyDetails = _v1.b;
        var decl = $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring, argDetails.dI.g7, $mdgriffith$elm_codegen$Internal$Compiler$nodify(bodyDetails.c)));
        var previousLet = toLetScope(threeIndex);
        return {
          d: _Utils_ap(bodyDetails.d, _Utils_ap(previousLet.d, _Utils_ap(argDetails.dI.d, previousLet.d))),
          ba: previousLet.ba,
          G: A2($elm$core$List$cons, decl, previousLet.G),
          S: previousLet.S(argDetails.jt)
        };
      };
    });
    var $author$project$Press$Generate$Regions$values = {
      kV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["App", "View", "Region"]),
        j: "empty"
      }),
      lC: F2(function(fn, region) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Nothing,
          i: _List_fromArray(["App", "View", "Region"]),
          j: "mapOperation"
        }), _List_fromArray([fn, region]));
      }),
      my: F3(function(region, value, regions) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Nothing,
          i: _List_fromArray(["App", "View", "Region"]),
          j: "setRegion"
        }), _List_fromArray([region, value, regions]));
      }),
      i4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["App", "View", "Region"]),
        j: "toList"
      }),
      mZ: F2(function(msg, model) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Nothing,
          i: _List_fromArray(["App", "View", "Region"]),
          j: "update"
        }), _List_fromArray([msg, model]));
      })
    };
    var $author$project$Press$Generate$Engine$init = F6(function(getPageInit, loadPage, config, flags, url, key) {
      var viewing = $author$project$Press$Generate$Regions$values.kV;
      return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("stores"), $mdgriffith$elm_codegen$Elm$Arg$var("storeEffects")), A3($author$project$Press$Generate$Engine$initStores, flags, viewing, url), $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v0) {
        var stores = _v0.a;
        var storeEffects = _v0.b;
        var frameInitialized = A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "init", config), _List_fromArray([stores, flags, url]));
        return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("appModel"), $mdgriffith$elm_codegen$Elm$Arg$var("appEffect")), frameInitialized, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v1) {
          var frameModel = _v1.a;
          var frameEffect = _v1.b;
          var model = A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Model$types._, $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
            _Utils_Tuple2("key", key),
            _Utils_Tuple2("app", frameModel),
            _Utils_Tuple2("stores", stores),
            _Utils_Tuple2("limits", $author$project$Gen$App$State$initLimit),
            _Utils_Tuple2("states", $author$project$Gen$App$State$init)
          ])));
          var globalFrameEffect = A2($author$project$Press$Model$effectMap, $mdgriffith$elm_codegen$Elm$val("Global"), frameEffect);
          return A2($mdgriffith$elm_codegen$Elm$tuple, model, $author$project$Press$Model$effectBatch(_List_fromArray([
            globalFrameEffect,
            storeEffects,
            A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("syncStoresToLocalStorage"), _List_fromArray([stores]))
          ])));
        })));
      })));
    });
    var $author$project$Press$Model$toCmd = F5(function(config, stores, navKey, frameModel, effect) {
      return A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "toCmd", config), _List_fromArray([
        stores,
        $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("navKey", navKey),
          _Utils_Tuple2("dropPageCache", $mdgriffith$elm_codegen$Elm$val("PageCacheCleared")),
          _Utils_Tuple2("viewRequested", $mdgriffith$elm_codegen$Elm$val("ViewUpdated")),
          _Utils_Tuple2("broadcast", $mdgriffith$elm_codegen$Elm$val("Broadcast")),
          _Utils_Tuple2("preload", $mdgriffith$elm_codegen$Elm$val("Preload"))
        ])),
        frameModel,
        effect
      ]));
    });
    var $author$project$Press$Generate$Engine$app = F3(function(routes, getPageInit, loadPage) {
      return $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "app", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.k9), function(config) {
        return A2($mdgriffith$elm_codegen$Elm$withType, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "App", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])), $author$project$Gen$Browser$call_.cE($mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("init", A4($mdgriffith$elm_codegen$Elm$fn3, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "flags", $author$project$Gen$Json$Encode$annotation_.jt), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "key", $author$project$Gen$Browser$Navigation$annotation_.lv), F3(function(flags, url, key) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newModel"), $mdgriffith$elm_codegen$Elm$Arg$var("effect")), A6($author$project$Press$Generate$Engine$init, getPageInit, loadPage, config, flags, url, key), $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v0) {
              var newModel = _v0.a;
              var effect = _v0.b;
              return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, A5($author$project$Press$Model$toCmd, config, A2($mdgriffith$elm_codegen$Elm$get, "stores", newModel), A2($mdgriffith$elm_codegen$Elm$get, "key", newModel), A2($mdgriffith$elm_codegen$Elm$get, "app", newModel), effect));
            })));
          }))),
          _Utils_Tuple2("update", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "msg", $author$project$Press$Model$types.lM), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), F2(function(msg, model) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newModel"), $mdgriffith$elm_codegen$Elm$Arg$var("effect")), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("update"), _List_fromArray([config, msg, model])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v1) {
              var newModel = _v1.a;
              var effect = _v1.b;
              return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, A5($author$project$Press$Model$toCmd, config, A2($mdgriffith$elm_codegen$Elm$get, "stores", newModel), A2($mdgriffith$elm_codegen$Elm$get, "key", newModel), A2($mdgriffith$elm_codegen$Elm$get, "app", newModel), effect));
            })));
          }))),
          _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("view"), _List_fromArray([config]))),
          _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("subscriptions"), _List_fromArray([config]))),
          _Utils_Tuple2("onUrlChange", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), function(url) {
            return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Global"), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "onUrlChange", config), _List_fromArray([url]))
            ]));
          })),
          _Utils_Tuple2("onUrlRequest", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "urlRequest", $author$project$Gen$Browser$annotation_.jr), function(urlRequest) {
            return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Global"), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "onUrlRequest", config), _List_fromArray([urlRequest]))
            ]));
          }))
        ]))));
      })));
    });
    var $mdgriffith$elm_codegen$Elm$Declare$fnArg = F2(function(arg, builder) {
      return {
        aI: A2($mdgriffith$elm_codegen$Elm$fnArg, arg, builder.aI),
        bD: F3(function(expr, args, p) {
          return A2(builder.bD, expr, A2($elm$core$List$cons, p, args));
        }),
        j: builder.j
      };
    });
    var $mdgriffith$elm_codegen$Elm$Declare$fnBuilder = F2(function(name, fun) {
      return {
        aI: $mdgriffith$elm_codegen$Elm$fnBuilder(fun),
        bD: F2(function(expr, args) {
          return A2($mdgriffith$elm_codegen$Elm$apply, expr, $elm$core$List$reverse(args));
        }),
        j: name
      };
    });
    var $mdgriffith$elm_codegen$Elm$Declare$Internal = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Elm$Declare$valWithType = F3(function(importFrom, name, fnExp) {
      return function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, fnExp);
        var oneIndex = _v0.a;
        var one = _v0.b;
        var qualifiedImport = A2($mdgriffith$elm_codegen$Internal$Index$getImport, oneIndex, importFrom);
        return {
          h: one.h,
          c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, qualifiedImport, $mdgriffith$elm_codegen$Internal$Format$sanitize(name)),
          d: function() {
            if (!qualifiedImport.b) {
              return one.d;
            } else {
              var qual = qualifiedImport;
              return _Utils_ap(one.d, _List_fromArray([qual]));
            }
          }()
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Declare$innerFunction = F3(function(name, funcExp, call) {
      var functionVal = A3($mdgriffith$elm_codegen$Elm$Declare$valWithType, _List_Nil, name, funcExp);
      return {
        bD: call(functionVal),
        kJ: A2($mdgriffith$elm_codegen$Elm$declaration, name, funcExp),
        fl: function(modName) {
          return call(A3($mdgriffith$elm_codegen$Elm$Declare$valWithType, modName, name, funcExp));
        },
        jt: functionVal
      };
    });
    var $mdgriffith$elm_codegen$Elm$Declare$fnDone = function(builder) {
      return A3($mdgriffith$elm_codegen$Elm$Declare$innerFunction, builder.j, $mdgriffith$elm_codegen$Elm$fnDone(builder.aI), function(expr) {
        return A2(builder.bD, expr, _List_Nil);
      });
    };
    var $mdgriffith$elm_codegen$Elm$Declare$fn3 = F5(function(name, one, two, three, toExp) {
      return $mdgriffith$elm_codegen$Elm$Declare$fnDone(A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, three, A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, two, A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, one, A2($mdgriffith$elm_codegen$Elm$Declare$fnBuilder, name, toExp)))));
    });
    var $author$project$Gen$App$State$call_ = {
      cs: F2(function(addToLimitArg_, addToLimitArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("groupId", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("instanceId", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("max", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("keep", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil)
          ]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("limit", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil)),
            _Utils_Tuple2("removedIds", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))
          ])))),
          i: _List_fromArray(["App", "State"]),
          j: "addToLimit"
        }), _List_fromArray([addToLimitArg_, addToLimitArg_0]));
      }),
      eD: F2(function(getArg_, getArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("state")
            ]))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("state")))),
          i: _List_fromArray(["App", "State"]),
          j: "get"
        }), _List_fromArray([getArg_, getArg_0]));
      }),
      fj: F3(function(insertArg_, insertArg_0, insertArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            $mdgriffith$elm_codegen$Elm$Annotation$var("state"),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("state")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("state")
          ])))),
          i: _List_fromArray(["App", "State"]),
          j: "insert"
        }), _List_fromArray([insertArg_, insertArg_0, insertArg_1]));
      }),
      hr: F2(function(purgeArg_, purgeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("state")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("state")
          ])))),
          i: _List_fromArray(["App", "State"]),
          j: "purge"
        }), _List_fromArray([purgeArg_, purgeArg_0]));
      }),
      hE: F2(function(removeArg_, removeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("state")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("state")
          ])))),
          i: _List_fromArray(["App", "State"]),
          j: "remove"
        }), _List_fromArray([removeArg_, removeArg_0]));
      }),
      hF: F2(function(removeFromLimitArg_, removeFromLimitArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("groupId", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("instanceId", $mdgriffith$elm_codegen$Elm$Annotation$string)
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Limit", _List_Nil))),
          i: _List_fromArray(["App", "State"]),
          j: "removeFromLimit"
        }), _List_fromArray([removeFromLimitArg_, removeFromLimitArg_0]));
      }),
      ju: function(valuesArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "State"]), "Cache", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("state")
            ]))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("state")))),
          i: _List_fromArray(["App", "State"]),
          j: "values"
        }), _List_fromArray([valuesArg_]));
      }
    };
    var $author$project$Press$Model$getPage = F4(function(pageId, pageConstructor, states, onFound) {
      return A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Gen$App$State$call_.eD, pageId, states), {
        ft: A2($elm$core$Tuple$pair, "foundPage", function(foundPage) {
          return A3($mdgriffith$elm_codegen$Elm$Case$custom, foundPage, $author$project$Press$Model$types.g3, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "page", $author$project$Press$Model$types.g3), A2($mdgriffith$elm_codegen$Elm$Arg$customType, pageConstructor, $elm$core$Basics$identity)), onFound.ft),
            A2($mdgriffith$elm_codegen$Elm$Case$branch, $mdgriffith$elm_codegen$Elm$Arg$ignore, function(_v0) {
              return onFound.gy;
            })
          ]));
        }),
        gy: onFound.gy
      });
    });
    var $author$project$Press$Model$toPageBranch = F2(function(pageInfo, toBranchBody) {
      var paramType = A2($elm$core$String$join, "_", A2($elm$core$String$split, ".", pageInfo.e4)) + "_Params";
      return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params", $mdgriffith$elm_codegen$Elm$Annotation$unit), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", pageInfo.e4), $elm$core$Basics$identity)), toBranchBody);
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function(a) {
      return { $: 0, a };
    };
    var $mdgriffith$elm_codegen$Elm$Let$with = F2(function(_v0, _v1) {
      var toScopeA = _v0;
      var toScopeAB = _v1;
      return function(index) {
        var resultA = toScopeA(index);
        var resultB = toScopeAB(resultA.ba);
        return {
          d: _Utils_ap(resultA.d, resultB.d),
          ba: resultB.ba,
          G: _Utils_ap(resultA.G, resultB.G),
          S: resultB.S(resultA.S)
        };
      };
    });
    var $mdgriffith$elm_codegen$Elm$Let$value = F3(function(desiredName, valueExpr, sourceLet) {
      return A2($mdgriffith$elm_codegen$Elm$Let$with, function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Index$getName, desiredName, index);
        var name = _v0.a;
        var secondIndex = _v0.b;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, secondIndex, valueExpr);
        var finalIndex = _v1.a;
        var details = _v1.b;
        return {
          d: details.d,
          ba: finalIndex,
          G: _List_fromArray([
            function() {
              var _v2 = details.c;
              if (_v2.$ === 17) {
                var lamb = _v2.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction({
                  kJ: $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                    bA: lamb.cF,
                    c: lamb.c,
                    j: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                  }),
                  bH: $elm$core$Maybe$Nothing,
                  mC: $elm$core$Maybe$Nothing
                }));
              } else {
                return $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring, $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify(details.c)));
              }
            }()
          ]),
          S: function(_v3) {
            return _Utils_update(details, {
              c: A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, name)
            });
          }
        };
      }, sourceLet);
    });
    var $author$project$Gen$App$Page$values_ = {
      a4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Error"]), "Error", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "error"
      }),
      bb: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "init"
      }),
      fe: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "initWith"
      }),
      bd: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ]))
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "loadFrom"
      }),
      f5: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("onModel", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("model2"))),
            _Utils_Tuple2("onMsg", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg2")))
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "InitPlan", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "InitPlan", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg2"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model2")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "mapInitPlan"
      }),
      bX: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ]))),
        i: _List_fromArray(["App", "Page"]),
        j: "notFound"
      }),
      b_: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Id"]), "Id", _List_Nil),
              $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Stores"]), "Stores", _List_Nil),
              $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("model"))
            ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ])))),
            _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Stores"]), "Stores", _List_Nil),
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))))),
            _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Stores"]), "Stores", _List_Nil),
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))),
            _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Id", _List_Nil),
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Stores"]), "Stores", _List_Nil),
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View"]), "View", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))))
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Stores"]), "Stores", _List_Nil),
          $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "page"
      }),
      i3: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("toKey", $mdgriffith$elm_codegen$Elm$Annotation$maybe(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("params")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string))),
          _Utils_Tuple2("pageCacheLimit", $mdgriffith$elm_codegen$Elm$Annotation$int),
          _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Id"]), "Id", _List_Nil),
            $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("model"))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Init", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ])))),
          _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("model"), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))))),
          _Utils_Tuple2("subscriptions", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Id", _List_Nil),
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Result"]), "Result", _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Error"]), "Error", _List_Nil),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View"]), "View", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]))))
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "toInternalDetails"
      }),
      jH: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("stores")
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Result"]), "Result", _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page", "Error"]), "Error", _List_Nil),
            $mdgriffith$elm_codegen$Elm$Annotation$var("newStores")
          ]))),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("newStores"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("stores"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "withGuard"
      }),
      jI: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("params")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$string),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "withKey"
      }),
      jK: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$int,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "Page", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("shared"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("params"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("model")
        ])))),
        i: _List_fromArray(["App", "Page"]),
        j: "withPageCacheLimit"
      })
    };
    var $author$project$Press$Model$getPageInit = function(pages) {
      return A5($mdgriffith$elm_codegen$Elm$Declare$fn3, "getPageInit", A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "stores", $author$project$Press$Model$storesType), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "cache", $author$project$Gen$App$State$annotation_.kj(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "State"))), F3(function(pageId, stores, cache) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Model$types.g2, A3($mdgriffith$elm_codegen$Elm$Case$custom, pageId, $author$project$Press$Model$types.A, A2($elm$core$List$map, function(pageInfo) {
          var pageMsgTypeName = $author$project$Press$Model$types.ch(pageInfo.e4);
          var pageModule = pageInfo.lK;
          var pageConfig = $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageModule, j: "page" });
          return A2($author$project$Press$Model$toPageBranch, pageInfo, function(params) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "pageKey", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageKey"), _List_fromArray([pageId])), A3($mdgriffith$elm_codegen$Elm$Let$value, "pageDetails", A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$App$Page$values_.i3, _List_fromArray([pageConfig])), $mdgriffith$elm_codegen$Elm$Let$letIn(F2(function(pageDetails, pageKey) {
              return A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$App$Page$values_.f5, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
                  _Utils_Tuple2("onModel", $mdgriffith$elm_codegen$Elm$val(pageInfo.e4)),
                  _Utils_Tuple2("onMsg", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(pageMsgTypeName), _List_fromArray([pageId])))
                ]))
              ])), _List_fromArray([
                A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "init", pageDetails), _List_fromArray([
                  pageId,
                  params,
                  stores,
                  A4($author$project$Press$Model$getPage, pageKey, pageInfo.e4, cache, { ft: $mdgriffith$elm_codegen$Elm$just, gy: $mdgriffith$elm_codegen$Elm$nothing })
                ]))
              ]));
            })))));
          });
        }, pages)));
      }));
    };
    var $author$project$Gen$Listen$batch = function(batchArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Listen"]),
        j: "batch"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$list(batchArg_)
      ]));
    };
    var $author$project$Gen$List$call_ = {
      cw: F2(function(allArg_, allArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["List"]),
          j: "all"
        }), _List_fromArray([allArg_, allArg_0]));
      }),
      cz: F2(function(anyArg_, anyArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["List"]),
          j: "any"
        }), _List_fromArray([anyArg_, anyArg_0]));
      }),
      cD: F2(function(appendArg_, appendArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "append"
        }), _List_fromArray([appendArg_, appendArg_0]));
      }),
      dn: function(concatArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "concat"
        }), _List_fromArray([concatArg_]));
      },
      $7: F2(function(concatMapArg_, concatMapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["List"]),
          j: "concatMap"
        }), _List_fromArray([concatMapArg_, concatMapArg_0]));
      }),
      dU: F2(function(dropArg_, dropArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$int,
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "drop"
        }), _List_fromArray([dropArg_, dropArg_0]));
      }),
      el: F2(function(filterArg_, filterArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "filter"
        }), _List_fromArray([filterArg_, filterArg_0]));
      }),
      em: F2(function(filterMapArg_, filterMapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["List"]),
          j: "filterMap"
        }), _List_fromArray([filterMapArg_, filterMapArg_0]));
      }),
      eo: F3(function(foldlArg_, foldlArg_0, foldlArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          i: _List_fromArray(["List"]),
          j: "foldl"
        }), _List_fromArray([foldlArg_, foldlArg_0, foldlArg_1]));
      }),
      ep: F3(function(foldrArg_, foldrArg_0, foldrArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
          i: _List_fromArray(["List"]),
          j: "foldr"
        }), _List_fromArray([foldrArg_, foldrArg_0, foldrArg_1]));
      }),
      eQ: function(headArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "head"
        }), _List_fromArray([headArg_]));
      },
      fa: F2(function(indexedMapArg_, indexedMapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$int,
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["List"]),
          j: "indexedMap"
        }), _List_fromArray([indexedMapArg_, indexedMapArg_0]));
      }),
      fn: F2(function(intersperseArg_, intersperseArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "intersperse"
        }), _List_fromArray([intersperseArg_, intersperseArg_0]));
      }),
      fo: function(isEmptyArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["List"]),
          j: "isEmpty"
        }), _List_fromArray([isEmptyArg_]));
      },
      fG: function(lengthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
          i: _List_fromArray(["List"]),
          j: "length"
        }), _List_fromArray([lengthArg_]));
      },
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
          i: _List_fromArray(["List"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      fW: F3(function(map2Arg_, map2Arg_0, map2Arg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
          i: _List_fromArray(["List"]),
          j: "map2"
        }), _List_fromArray([map2Arg_, map2Arg_0, map2Arg_1]));
      }),
      fX: F4(function(map3Arg_, map3Arg_0, map3Arg_1, map3Arg_2) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
          i: _List_fromArray(["List"]),
          j: "map3"
        }), _List_fromArray([map3Arg_, map3Arg_0, map3Arg_1, map3Arg_2]));
      }),
      fY: F5(function(map4Arg_, map4Arg_0, map4Arg_1, map4Arg_2, map4Arg_3) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("d")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("d"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
          i: _List_fromArray(["List"]),
          j: "map4"
        }), _List_fromArray([map4Arg_, map4Arg_0, map4Arg_1, map4Arg_2, map4Arg_3]));
      }),
      fZ: F6(function(map5Arg_, map5Arg_0, map5Arg_1, map5Arg_2, map5Arg_3, map5Arg_4) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("e")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("result")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("c")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("d")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("e"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("result")))),
          i: _List_fromArray(["List"]),
          j: "map5"
        }), _List_fromArray([map5Arg_, map5Arg_0, map5Arg_1, map5Arg_2, map5Arg_3, map5Arg_4]));
      }),
      f9: function(maximumArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
          i: _List_fromArray(["List"]),
          j: "maximum"
        }), _List_fromArray([maximumArg_]));
      },
      gd: F2(function(memberArg_, memberArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
          i: _List_fromArray(["List"]),
          j: "member"
        }), _List_fromArray([memberArg_, memberArg_0]));
      }),
      gk: function(minimumArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
          i: _List_fromArray(["List"]),
          j: "minimum"
        }), _List_fromArray([minimumArg_]));
      },
      g6: F2(function(partitionArg_, partitionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))))),
          i: _List_fromArray(["List"]),
          j: "partition"
        }), _List_fromArray([partitionArg_, partitionArg_0]));
      }),
      hn: function(productArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("number"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("number"))),
          i: _List_fromArray(["List"]),
          j: "product"
        }), _List_fromArray([productArg_]));
      },
      hx: F2(function(rangeArg_, rangeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
          i: _List_fromArray(["List"]),
          j: "range"
        }), _List_fromArray([rangeArg_, rangeArg_0]));
      }),
      hH: F2(function(repeatArg_, repeatArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$int,
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "repeat"
        }), _List_fromArray([repeatArg_, repeatArg_0]));
      }),
      hO: function(reverseArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "reverse"
        }), _List_fromArray([reverseArg_]));
      },
      ig: function(singletonArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "singleton"
        }), _List_fromArray([singletonArg_]));
      },
      il: function(sortArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable")))),
          i: _List_fromArray(["List"]),
          j: "sort"
        }), _List_fromArray([sortArg_]));
      },
      im: F2(function(sortByArg_, sortByArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "sortBy"
        }), _List_fromArray([sortByArg_, sortByArg_0]));
      }),
      $9: F2(function(sortWithArg_, sortWithArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Basics"]), "Order", _List_Nil)),
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "sortWith"
        }), _List_fromArray([sortWithArg_, sortWithArg_0]));
      }),
      iJ: function(sumArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("number"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("number"))),
          i: _List_fromArray(["List"]),
          j: "sum"
        }), _List_fromArray([sumArg_]));
      },
      iQ: function(tailArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))))),
          i: _List_fromArray(["List"]),
          j: "tail"
        }), _List_fromArray([tailArg_]));
      },
      iR: F2(function(takeArg_, takeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$int,
            $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
          i: _List_fromArray(["List"]),
          j: "take"
        }), _List_fromArray([takeArg_, takeArg_0]));
      }),
      jp: function(unzipArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("a"), $mdgriffith$elm_codegen$Elm$Annotation$var("b")))
          ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("b"))))),
          i: _List_fromArray(["List"]),
          j: "unzip"
        }), _List_fromArray([unzipArg_]));
      }
    };
    var $author$project$Gen$Listen$call_ = {
      aZ: function(batchArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "batch"
        }), _List_fromArray([batchArg_]));
      },
      c5: F2(function(broadcastListenersArg_, broadcastListenersArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Broadcast"]), "Msg", _List_Nil),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))),
          i: _List_fromArray(["Listen"]),
          j: "broadcastListeners"
        }), _List_fromArray([broadcastListenersArg_, broadcastListenersArg_0]));
      }),
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      bg: function(onBroadcastArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Broadcast"]), "Msg", _List_Nil)
            ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "onBroadcast"
        }), _List_fromArray([onBroadcastArg_]));
      },
      gG: F2(function(onEveryArg_, onEveryArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$float,
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Time"]), "Posix", _List_Nil)
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "onEvery"
        }), _List_fromArray([onEveryArg_, onEveryArg_0]));
      }),
      bh: F2(function(onKeyPressArg_, onKeyPressArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("ctrl", $mdgriffith$elm_codegen$Elm$Annotation$bool),
              _Utils_Tuple2("shift", $mdgriffith$elm_codegen$Elm$Annotation$bool),
              _Utils_Tuple2("key", $mdgriffith$elm_codegen$Elm$Annotation$string)
            ])),
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "onKeyPress"
        }), _List_fromArray([onKeyPressArg_, onKeyPressArg_0]));
      }),
      gJ: function(onResizeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "onResize"
        }), _List_fromArray([onResizeArg_]));
      },
      i8: F2(function(toSubscriptionArg_, toSubscriptionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("ignore", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Sub", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Listen"]),
          j: "toSubscription"
        }), _List_fromArray([toSubscriptionArg_, toSubscriptionArg_0]));
      })
    };
    var $author$project$Gen$Listen$none = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Listen"]),
      j: "none"
    });
    var $author$project$Press$Model$withPageHelper = F3(function(pageConfig, fieldName, fn) {
      return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "pageDetails", A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$App$Page$values_.i3, _List_fromArray([pageConfig])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(pageDetails) {
        return fn(A2($mdgriffith$elm_codegen$Elm$get, fieldName, pageDetails));
      })));
    });
    var $author$project$Press$Generate$Engine$pageInfoToSubscriptioon = F4(function(config, model, pageId, pageInfo) {
      var stateKey = pageInfo.e4;
      var pageMsgTypeName = $author$project$Press$Model$types.ch(pageInfo.e4);
      var pageModule = pageInfo.lK;
      return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageModel", A2($mdgriffith$elm_codegen$Elm$Annotation$named, pageModule, "Model")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, stateKey, $elm$core$Basics$identity)), function(pageState) {
        return A3($author$project$Press$Model$withPageHelper, $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageModule, j: "page" }), "subscriptions", function(pageSubs) {
          return A2($author$project$Gen$Listen$call_.fV, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(pageMsgTypeName), _List_fromArray([pageId])), A2($mdgriffith$elm_codegen$Elm$apply, pageSubs, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$get, "stores", model),
            pageState
          ])));
        });
      });
    });
    var $author$project$Press$Generate$Engine$pageModelToSubscription = F5(function(config, model, pages, current, pageId) {
      return A3($mdgriffith$elm_codegen$Elm$Case$custom, current, $author$project$Press$Model$types.g3, A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageError", $author$project$Gen$App$Page$Error$annotation_.a4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PageError_", $elm$core$Basics$identity)), function(err) {
        return $author$project$Gen$Listen$none;
      }), A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId_", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PageLoading_", $elm$core$Basics$identity)), function(_v0) {
        return $author$project$Gen$Listen$none;
      }), A2($elm$core$List$map, A3($author$project$Press$Generate$Engine$pageInfoToSubscriptioon, config, model, pageId), pages))));
    });
    var $author$project$Press$Generate$Engine$storeValue = F2(function(storeId, name) {
      return A2($mdgriffith$elm_codegen$Elm$get, name, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["Store", storeId]),
        j: "store"
      }));
    });
    var $author$project$Press$Generate$Engine$getSubscriptions = F2(function(stores, pages) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "getSubscriptions", A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$types.a8, $author$project$Press$Model$types._]), $author$project$Gen$Listen$annotation_.fP($author$project$Press$Model$types.lM)), A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.a8), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), F2(function(config, model) {
        return $author$project$Gen$Listen$batch(A2($elm$core$List$filterMap, $elm$core$Basics$identity, _List_fromArray([
          $elm$core$Maybe$Just(A2($author$project$Gen$Listen$call_.fV, $mdgriffith$elm_codegen$Elm$val("Global"), A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "subscriptions", config), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$get, "stores", model),
            A2($mdgriffith$elm_codegen$Elm$get, "app", model)
          ])))),
          function() {
            if (!stores.b) {
              return $elm$core$Maybe$Nothing;
            } else {
              return $elm$core$Maybe$Just($author$project$Gen$Listen$batch(A2($elm$core$List$map, function(store) {
                return A2($author$project$Gen$Listen$call_.fV, $mdgriffith$elm_codegen$Elm$val("Store" + store.e4), A2($mdgriffith$elm_codegen$Elm$apply, A2($author$project$Press$Generate$Engine$storeValue, store.e4, "subscriptions"), _List_fromArray([
                  A2($mdgriffith$elm_codegen$Elm$get, store.e4, A2($mdgriffith$elm_codegen$Elm$get, "stores", model))
                ])));
              }, stores)));
            }
          }(),
          $elm$core$Maybe$Just($author$project$Gen$Listen$call_.aZ(A2($author$project$Gen$List$call_.em, A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $mdgriffith$elm_codegen$Elm$Annotation$string), function(pageId) {
            var pageKey = A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageKey"), _List_fromArray([pageId]));
            return A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Gen$App$State$call_.eD, pageKey, A2($mdgriffith$elm_codegen$Elm$get, "states", model)), {
              ft: _Utils_Tuple2("pageState", function(pageState) {
                return $mdgriffith$elm_codegen$Elm$just(A5($author$project$Press$Generate$Engine$pageModelToSubscription, config, model, pages, pageState, pageId));
              }),
              gy: $mdgriffith$elm_codegen$Elm$nothing
            });
          }), A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Press$Generate$Regions$values.i4, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$get, "viewing", A2($mdgriffith$elm_codegen$Elm$get, "stores", model))
          ])))))
        ])));
      }))));
    });
    var $author$project$Press$Model$effectNone = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just($author$project$Press$Model$types.bI),
      i: _List_fromArray(["Effect"]),
      j: "none"
    });
    var $mdgriffith$elm_codegen$Elm$Declare$fn4 = F6(function(name, one, two, three, four, toExp) {
      return $mdgriffith$elm_codegen$Elm$Declare$fnDone(A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, four, A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, three, A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, two, A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, one, A2($mdgriffith$elm_codegen$Elm$Declare$fnBuilder, name, toExp))))));
    });
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2(function(a, b) {
      return { $: 22, a, b };
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$RecordUpdateIncorrectFields = function(a) {
      return { $: 11, a };
    };
    var $mdgriffith$elm_codegen$Elm$presentAndMatching = F3(function(fieldName, _v0, existingFields) {
      return A2($elm$core$List$any, function(_v1) {
        var _v2 = _v1.b;
        var _v3 = _v2.a;
        var existingFieldName = _v3.b;
        return _Utils_eq(fieldName, existingFieldName);
      }, existingFields);
    });
    var $mdgriffith$elm_codegen$Elm$verifyFieldsHelper = F2(function(existingFields, updatedFields) {
      if (!updatedFields.b) {
        return true;
      } else {
        var _v1 = updatedFields.a;
        var fieldName = _v1.a;
        var fieldInference = _v1.b;
        var remain = updatedFields.b;
        return A3($mdgriffith$elm_codegen$Elm$presentAndMatching, fieldName, fieldInference, existingFields) && A2($mdgriffith$elm_codegen$Elm$verifyFieldsHelper, existingFields, remain);
      }
    });
    var $mdgriffith$elm_codegen$Elm$verifyFields = F2(function(updatedFields, existingFields) {
      return A2($mdgriffith$elm_codegen$Elm$verifyFieldsHelper, existingFields, updatedFields) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$RecordUpdateIncorrectFields({
        j0: A2($elm$core$List$map, function(_v0) {
          var fieldName = _v0.a;
          var fieldInference = _v0.b;
          return _Utils_Tuple2(fieldName, fieldInference.ji);
        }, updatedFields),
        kX: A2($elm$core$List$map, function(_v1) {
          var _v2 = _v1.b;
          var _v3 = _v2.a;
          var fieldName = _v3.b;
          var _v4 = _v2.b;
          var fieldInference = _v4.b;
          return _Utils_Tuple2(fieldName, fieldInference);
        }, existingFields)
      }));
    });
    var $mdgriffith$elm_codegen$Elm$updateRecord = F2(function(fields, recordExpression) {
      return $mdgriffith$elm_codegen$Internal$Compiler$expression(function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, recordExpression);
        var recordIndex = _v0.a;
        var recordExp = _v0.b;
        var _v1 = A3($elm$core$List$foldl, F2(function(_v2, _v3) {
          var fieldNameUnformatted = _v2.a;
          var fieldExp = _v2.b;
          var currentIndex = _v3.a;
          var fieldAnnotationResult = _v3.b;
          var items = _v3.c;
          var fieldName = $mdgriffith$elm_codegen$Internal$Format$formatValue(fieldNameUnformatted);
          var _v4 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, currentIndex, fieldExp);
          var newIndex = _v4.a;
          var exp = _v4.b;
          var currentFieldAnnotations = function() {
            if (!fieldAnnotationResult.$) {
              var fieldAnns = fieldAnnotationResult.a;
              var _v6 = exp.h;
              if (!_v6.$) {
                var fs = _v6.a;
                return $elm$core$Result$Ok(A2($elm$core$List$cons, _Utils_Tuple2(fieldName, fs), fieldAnns));
              } else {
                var newErr = _v6.a;
                return $elm$core$Result$Err(newErr);
              }
            } else {
              var err = fieldAnnotationResult.a;
              var _v7 = exp.h;
              if (!_v7.$) {
                return fieldAnnotationResult;
              } else {
                var newErr = _v7.a;
                return $elm$core$Result$Err(_Utils_ap(err, newErr));
              }
            }
          }();
          return _Utils_Tuple3(newIndex, currentFieldAnnotations, A2($elm$core$List$cons, _Utils_Tuple2(fieldName, exp), items));
        }), _Utils_Tuple3(recordIndex, $elm$core$Result$Ok(_List_Nil), _List_Nil), fields);
        var fieldIndex = _v1.a;
        var fieldAnnotationsGathered = _v1.b;
        var fieldDetails = _v1.c;
        return {
          h: function() {
            if (fieldAnnotationsGathered.$ === 1) {
              var fieldErrors = fieldAnnotationsGathered.a;
              return $elm$core$Result$Err(fieldErrors);
            } else {
              var verifiedFieldAnnotations = fieldAnnotationsGathered.a;
              var _v9 = recordExp.h;
              if (!_v9.$) {
                var recordAnn = _v9.a;
                var _v10 = recordAnn.ji;
                switch (_v10.$) {
                  case 4:
                    var existingFields = _v10.a;
                    var _v11 = A2($mdgriffith$elm_codegen$Elm$verifyFields, verifiedFieldAnnotations, existingFields);
                    if (_v11.$ === 1) {
                      return recordExp.h;
                    } else {
                      var err = _v11.a;
                      return $elm$core$Result$Err(_List_fromArray([err]));
                    }
                  case 0:
                    var nameOfRecord = _v10.a;
                    return $elm$core$Result$Ok({
                      jQ: recordAnn.jQ,
                      g: A3($mdgriffith$elm_codegen$Internal$Compiler$addInference, nameOfRecord, A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, $mdgriffith$elm_codegen$Internal$Compiler$nodify(nameOfRecord), $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($elm$core$List$map, function(_v12) {
                        var fieldName = _v12.a;
                        var inference = _v12.b;
                        return $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(inference.ji)));
                      }, verifiedFieldAnnotations))), recordAnn.g),
                      ji: recordAnn.ji
                    });
                  default:
                    return recordExp.h;
                }
              } else {
                var otherwise = _v9;
                return otherwise;
              }
            }
          }(),
          c: function() {
            var _v13 = recordExp.c;
            if (_v13.$ === 3) {
              var name = _v13.b;
              return A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression, $mdgriffith$elm_codegen$Internal$Compiler$nodify(name), A2($elm$core$List$map, function(_v14) {
                var fieldName = _v14.a;
                var expDetails = _v14.b;
                return $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(expDetails.c)));
              }, $elm$core$List$reverse(fieldDetails)));
            } else {
              var name = "record" + $mdgriffith$elm_codegen$Internal$Index$indexToString(fieldIndex);
              return $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression({
                aM: _List_fromArray([
                  $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring, $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify(recordExp.c)))
                ]),
                c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression, $mdgriffith$elm_codegen$Internal$Compiler$nodify(name), A2($elm$core$List$map, function(_v15) {
                  var fieldName = _v15.a;
                  var expDetails = _v15.b;
                  return $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(expDetails.c)));
                }, fieldDetails)))
              });
            }
          }(),
          d: A2($elm$core$List$concatMap, A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $mdgriffith$elm_codegen$Internal$Compiler$getImports), fieldDetails)
        };
      });
    });
    var $author$project$Gen$Set$values_ = {
      dK: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "diff"
      }),
      kV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ]))),
        i: _List_fromArray(["Set"]),
        j: "empty"
      }),
      el: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "filter"
      }),
      eo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["Set"]),
        j: "foldl"
      }),
      ep: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["Set"]),
        j: "foldr"
      }),
      ex: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("comparable"))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "fromList"
      }),
      fj: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "insert"
      }),
      fm: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "intersect"
      }),
      fo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["Set"]),
        j: "isEmpty"
      }),
      fV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("comparable2")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable2")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "map"
      }),
      gd: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
        i: _List_fromArray(["Set"]),
        j: "member"
      }),
      g6: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ]))))),
        i: _List_fromArray(["Set"]),
        j: "partition"
      }),
      hE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable"),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "remove"
      }),
      ig: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "singleton"
      }),
      ih: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
        i: _List_fromArray(["Set"]),
        j: "size"
      }),
      i4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["Set"]),
        j: "toList"
      }),
      jo: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Set"]), "Set", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("comparable")
        ])))),
        i: _List_fromArray(["Set"]),
        j: "union"
      })
    };
    var $author$project$Press$Model$loadPage = function(routes) {
      return A6($mdgriffith$elm_codegen$Elm$Declare$fn4, "loadPage", A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.lb), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "initialization", $author$project$Press$Model$types.g2), F4(function(config, model, pageId, initialization) {
        return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$types._, $author$project$Press$Model$effectWith($author$project$Press$Model$types.lM)), $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "keep", A2($mdgriffith$elm_codegen$Elm$Op$pipe, $author$project$Gen$Set$values_.ex, A2($mdgriffith$elm_codegen$Elm$Op$pipe, A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$List$values_.fV, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$val("toPageKey")
        ])), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Nothing,
          i: _List_fromArray(["App", "View", "Region"]),
          j: "toList"
        }), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$get, "viewing", A2($mdgriffith$elm_codegen$Elm$get, "stores", model))
        ])))), A3($mdgriffith$elm_codegen$Elm$Let$value, "pageGroupKey", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageGroupKey"), _List_fromArray([pageId])), A3($mdgriffith$elm_codegen$Elm$Let$value, "pageKey", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageKey"), _List_fromArray([pageId])), $mdgriffith$elm_codegen$Elm$Let$letIn(F3(function(pageKey, pageGroupKey, keep) {
          return A3($mdgriffith$elm_codegen$Elm$Case$custom, initialization, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "Page"]), "InitPlan", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("model")
          ])), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "NotFound", 0), function(_v0) {
              var updatedModel = A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2("states", A2($author$project$Gen$App$State$call_.hE, pageKey, A2($mdgriffith$elm_codegen$Elm$get, "states", model)))
              ]), model);
              return A2($mdgriffith$elm_codegen$Elm$tuple, updatedModel, $author$project$Press$Model$effectNone);
            }),
            A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "err", $author$project$Gen$App$Page$Error$annotation_.a4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Error", $elm$core$Basics$identity)), function(err) {
              var updatedModel = A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2("states", A3($author$project$Gen$App$State$call_.fj, pageKey, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: _List_Nil, j: "PageError_" }), _List_fromArray([err])), A2($mdgriffith$elm_codegen$Elm$get, "states", model)))
              ]), model);
              return A2($mdgriffith$elm_codegen$Elm$tuple, updatedModel, $author$project$Press$Model$effectNone);
            }),
            A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageEffect", $author$project$Press$Model$effectWith($author$project$Press$Model$types.lM)), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "newPage", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "State")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Loaded", $elm$core$Tuple$pair))), function(_v1) {
              var newPage = _v1.a;
              var pageEffect = _v1.b;
              return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "limitUpdated", A2($author$project$Gen$App$State$call_.cs, $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
                _Utils_Tuple2("groupId", pageGroupKey),
                _Utils_Tuple2("instanceId", pageKey),
                _Utils_Tuple2("max", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageLimit"), _List_fromArray([pageId]))),
                _Utils_Tuple2("keep", keep)
              ])), A2($mdgriffith$elm_codegen$Elm$get, "limits", model)), $mdgriffith$elm_codegen$Elm$Let$letIn(function(limitUpdated) {
                var updatedModel = A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                  _Utils_Tuple2("states", A2($author$project$Gen$App$State$call_.hr, A2($mdgriffith$elm_codegen$Elm$get, "removedIds", limitUpdated), A3($author$project$Gen$App$State$call_.fj, pageKey, newPage, A2($mdgriffith$elm_codegen$Elm$get, "states", model)))),
                  _Utils_Tuple2("limits", A2($mdgriffith$elm_codegen$Elm$get, "limit", limitUpdated))
                ]), model);
                return A2($mdgriffith$elm_codegen$Elm$tuple, updatedModel, pageEffect);
              })));
            }),
            A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageEffect", $author$project$Press$Model$types.g2), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "LoadFrom", $elm$core$Basics$identity)), function(pageEffect) {
              var updatedModel = A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2("states", A3($author$project$Gen$App$State$call_.fj, pageKey, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: _List_Nil, j: "PageLoading_" }), _List_fromArray([pageId])), A2($mdgriffith$elm_codegen$Elm$get, "states", model)))
              ]), model);
              return A2($mdgriffith$elm_codegen$Elm$tuple, updatedModel, A2($author$project$Press$Model$effectMap, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Loaded"), _List_fromArray([pageId])), pageEffect));
            })
          ]));
        })))))));
      }));
    };
    var $mdgriffith$elm_codegen$Elm$variant = function(name) {
      return A2($mdgriffith$elm_codegen$Elm$Variant, name, _List_Nil);
    };
    var $author$project$Press$Generate$Engine$msgType = F2(function(stores, pageUsages) {
      var storeVariants = A2($elm$core$List$map, function(store) {
        return A2($mdgriffith$elm_codegen$Elm$variantWith, "Store" + store.e4, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Store", store.e4]), "Msg")
        ]));
      }, stores);
      var pageVariants = A2($elm$core$List$map, function(pageInfo) {
        return A2($mdgriffith$elm_codegen$Elm$variantWith, $author$project$Press$Model$types.ch(pageInfo.e4), _List_fromArray([
          $author$project$Press$Model$types.A,
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, pageInfo.lK, "Msg")
        ]));
      }, pageUsages);
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$customType, "Msg", _Utils_ap(_List_fromArray([
        $mdgriffith$elm_codegen$Elm$variant("PageCacheCleared"),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Preload", _List_fromArray([$author$project$Press$Model$types.A])),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "ViewUpdated", _List_fromArray([$author$project$Press$Model$types.hB])),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Broadcast", _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Broadcast"]), "Msg")
        ])),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "SubscriptionEventIgnored", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Global", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])),
        A2($mdgriffith$elm_codegen$Elm$variantWith, "Loaded", _List_fromArray([$author$project$Press$Model$types.A, $author$project$Press$Model$types.g2]))
      ]), _Utils_ap(storeVariants, pageVariants))));
    });
    var $author$project$Press$Model$toSub = F4(function(config, stores, frameModel, sub) {
      return A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "toSub", config), _List_fromArray([
        stores,
        $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("ignore", $mdgriffith$elm_codegen$Elm$val("SubscriptionEventIgnored"))
        ])),
        frameModel,
        sub
      ]));
    });
    var $author$project$Press$Generate$Engine$subscriptions = function(pages) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "subscriptions", A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$types.a8, $author$project$Press$Model$types._]), $author$project$Gen$Platform$Sub$annotation_.iG($author$project$Press$Model$types.lM)), A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.a8), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), F2(function(config, model) {
        return A4($author$project$Press$Model$toSub, config, A2($mdgriffith$elm_codegen$Elm$get, "stores", model), A2($mdgriffith$elm_codegen$Elm$get, "app", model), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("getSubscriptions"), _List_fromArray([config, model])));
      }))));
    };
    var $author$project$Press$Model$noneEffect = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just($author$project$Press$Model$types.bI),
      i: _List_fromArray(["Effect"]),
      j: "none"
    });
    var $author$project$Gen$Effect$LocalStorage$save = F2(function(saveArg_, saveArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$string,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Effect"]), "Effect", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Effect", "LocalStorage"]),
        j: "save"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$string(saveArg_),
        saveArg_0
      ]));
    });
    var $author$project$Press$Generate$Engine$syncStoresToLocalStorage = function(stores) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "syncStoresToLocalStorage", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "stores", $author$project$Press$Model$storesType), function(storesState) {
        return $elm$core$List$isEmpty(stores) ? $author$project$Press$Model$noneEffect : A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Model$types.a3($author$project$Press$Model$types.lM), $author$project$Press$Model$effectBatch(A2($elm$core$List$map, function(store) {
          return A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Press$Generate$Engine$storeValue, store.e4, "codec"), {
            ft: _Utils_Tuple2("codec", function(codec) {
              return A2($author$project$Gen$Effect$LocalStorage$save, store.e4, A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "encode", codec), _List_fromArray([
                A2($mdgriffith$elm_codegen$Elm$get, store.e4, storesState)
              ])));
            }),
            gy: $author$project$Press$Model$noneEffect
          });
        }, stores)));
      }));
    };
    var $author$project$Press$Generate$Engine$test = F2(function(getPageInit, loadPage) {
      return $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "test", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.la), function(config) {
        return A2($mdgriffith$elm_codegen$Elm$withType, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Test", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("model"),
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])), $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("init", A4($mdgriffith$elm_codegen$Elm$fn3, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "flags", $author$project$Gen$Json$Encode$annotation_.jt), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "key", $mdgriffith$elm_codegen$Elm$Annotation$unit), F3(function(flags, url, key) {
            return A6($author$project$Press$Generate$Engine$init, getPageInit, loadPage, config, flags, url, key);
          }))),
          _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("view"), _List_fromArray([config]))),
          _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("update"), _List_fromArray([config]))),
          _Utils_Tuple2("onUrlChange", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), function(url) {
            return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Global"), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "onUrlChange", config), _List_fromArray([url]))
            ]));
          })),
          _Utils_Tuple2("onUrlRequest", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "urlRequest", $author$project$Gen$Browser$annotation_.jr), function(urlRequest) {
            return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Global"), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "onUrlRequest", config), _List_fromArray([urlRequest]))
            ]));
          }))
        ])));
      })));
    });
    var $author$project$Press$Generate$Engine$testAlias = $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$alias, "Test", $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
      _Utils_Tuple2("init", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Json$Encode$annotation_.jt, $author$project$Gen$Url$annotation_.m_, $mdgriffith$elm_codegen$Elm$Annotation$unit]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$types.bt, $author$project$Press$Model$types.a3($author$project$Press$Model$types.lM)))),
      _Utils_Tuple2("view", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$types.bt]), $author$project$Gen$Browser$annotation_.a2($author$project$Press$Model$types.lM))),
      _Utils_Tuple2("update", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Press$Model$types.lM, $author$project$Press$Model$types.bt]), A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$types.bt, $author$project$Press$Model$types.a3($author$project$Press$Model$types.lM)))),
      _Utils_Tuple2("onUrlRequest", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Browser$annotation_.jr]), $author$project$Press$Model$types.lM)),
      _Utils_Tuple2("onUrlChange", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$author$project$Gen$Url$annotation_.m_]), $author$project$Press$Model$types.lM))
    ]))));
    var $author$project$Gen$Json$Decode$decodeValue = F2(function(decodeValueArg_, decodeValueArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Decode"]), "Value", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Result"]), "Result", _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Decode"]), "Error", _List_Nil),
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ])))),
        i: _List_fromArray(["Json", "Decode"]),
        j: "decodeValue"
      }), _List_fromArray([decodeValueArg_, decodeValueArg_0]));
    });
    var $author$project$Gen$Json$Decode$field = F2(function(fieldArg_, fieldArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$string,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a")
        ])))),
        i: _List_fromArray(["Json", "Decode"]),
        j: "field"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$string(fieldArg_),
        fieldArg_0
      ]));
    });
    var $author$project$Gen$Tuple$first = function(firstArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("a"), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("a"))),
        i: _List_fromArray(["Tuple"]),
        j: "first"
      }), _List_fromArray([firstArg_]));
    };
    var $author$project$Gen$Tuple$second = function(secondArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$var("a"), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
        i: _List_fromArray(["Tuple"]),
        j: "second"
      }), _List_fromArray([secondArg_]));
    };
    var $author$project$Gen$Result$toMaybe = function(toMaybeArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Result"]), "Result", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("x"),
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
        i: _List_fromArray(["Result"]),
        j: "toMaybe"
      }), _List_fromArray([toMaybeArg_]));
    };
    var $author$project$Press$Generate$Engine$toEmptyStores = function(stores) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "initStores", A4($mdgriffith$elm_codegen$Elm$fn3, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "flags", $author$project$Gen$Json$Encode$annotation_.jt), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewing", $author$project$Press$Model$regionsRecord), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "url", $author$project$Gen$Url$annotation_.m_), F3(function(flags, viewing, url) {
        if (!stores.b) {
          return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$storesType, $author$project$Press$Model$effectWith($author$project$Press$Model$types.lM)), A2($mdgriffith$elm_codegen$Elm$tuple, $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
            _Utils_Tuple2("viewing", viewing)
          ])), $author$project$Press$Model$effectNone));
        } else {
          return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "updatedStores", $mdgriffith$elm_codegen$Elm$record(A2($elm$core$List$map, function(store) {
            var cachedModel = A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Press$Generate$Engine$storeValue, store.e4, "codec"), {
              ft: _Utils_Tuple2("codec", function(codec) {
                var decoder = A2($author$project$Gen$Json$Decode$field, "localStorage", A2($author$project$Gen$Json$Decode$field, store.e4, A2($mdgriffith$elm_codegen$Elm$get, "decoder", codec)));
                return $author$project$Gen$Result$toMaybe(A2($author$project$Gen$Json$Decode$decodeValue, decoder, flags));
              }),
              gy: $mdgriffith$elm_codegen$Elm$nothing
            });
            var updatedStorePair = A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "init", $mdgriffith$elm_codegen$Elm$value({
              h: $elm$core$Maybe$Nothing,
              i: _List_fromArray(["Store", store.e4]),
              j: "store"
            })), _List_fromArray([flags, url, cachedModel]));
            return _Utils_Tuple2(store.e4, updatedStorePair);
          }, stores)), $mdgriffith$elm_codegen$Elm$Let$letIn(function(stateAndEffectRecord) {
            var stateRecordFields = A2($elm$core$List$map, function(store) {
              return _Utils_Tuple2(store.e4, $author$project$Gen$Tuple$first(A2($mdgriffith$elm_codegen$Elm$get, store.e4, stateAndEffectRecord)));
            }, stores);
            var stateRecord = $mdgriffith$elm_codegen$Elm$record(A2($elm$core$List$cons, _Utils_Tuple2("viewing", viewing), stateRecordFields));
            var finalEffects = $author$project$Press$Model$effectBatch(A2($elm$core$List$map, function(store) {
              return A2($author$project$Press$Model$effectMap, $mdgriffith$elm_codegen$Elm$val("Store" + store.e4), $author$project$Gen$Tuple$second(A2($mdgriffith$elm_codegen$Elm$get, store.e4, stateAndEffectRecord)));
            }, stores));
            return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$storesType, $author$project$Press$Model$effectWith($author$project$Press$Model$types.lM)), A2($mdgriffith$elm_codegen$Elm$tuple, stateRecord, finalEffects));
          })));
        }
      })));
    };
    var $mdgriffith$elm_codegen$Elm$Declare$fn = F3(function(name, one, toExp) {
      return $mdgriffith$elm_codegen$Elm$Declare$fnDone(A2($mdgriffith$elm_codegen$Elm$Declare$fnArg, one, A2($mdgriffith$elm_codegen$Elm$Declare$fnBuilder, name, toExp)));
    });
    var $author$project$Press$Generate$Engine$toPageGroupKey = function(pages) {
      return A3($mdgriffith$elm_codegen$Elm$Declare$fn, "toPageGroupKey", A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), function(pageId) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$string, A3($mdgriffith$elm_codegen$Elm$Case$custom, pageId, $author$project$Press$Model$types.A, A2($elm$core$List$map, function(pageInfo) {
          return A2($author$project$Press$Model$toPageBranch, pageInfo, function(params) {
            return $mdgriffith$elm_codegen$Elm$string(pageInfo.e4);
          });
        }, pages)));
      }).kJ;
    };
    var $author$project$Options$App$toUrlVariables = function(route) {
      var _v0 = route.m_;
      if (!_v0.$) {
        var urlPattern = _v0.a;
        return A2($elm$core$List$filterMap, function(piece) {
          if (!piece.$) {
            return $elm$core$Maybe$Nothing;
          } else {
            var variable = piece.a;
            return $elm$core$Maybe$Just(variable);
          }
        }, urlPattern.l7);
      } else {
        return _List_Nil;
      }
    };
    var $author$project$Press$Generate$Engine$toPageKey = function(pages) {
      return A3($mdgriffith$elm_codegen$Elm$Declare$fn, "toPageKey", A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), function(pageId) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$string, A3($mdgriffith$elm_codegen$Elm$Case$custom, pageId, $author$project$Press$Model$types.A, A2($elm$core$List$map, function(pageInfo) {
          var pageModule = pageInfo.lK;
          var pageConfig = $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageModule, j: "page" });
          return A2($author$project$Press$Model$toPageBranch, pageInfo, function(params) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "pageDetails", A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$App$Page$values_.i3, _List_fromArray([pageConfig])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(pageDetails) {
              return A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($mdgriffith$elm_codegen$Elm$get, "toKey", pageDetails), {
                ft: _Utils_Tuple2("toKey", function(toKey) {
                  return A2($mdgriffith$elm_codegen$Elm$Op$append, $mdgriffith$elm_codegen$Elm$string(pageInfo.e4), A2($mdgriffith$elm_codegen$Elm$apply, toKey, _List_fromArray([params])));
                }),
                gy: function() {
                  var _v0 = pageInfo.mr;
                  if (_v0.$ === 1) {
                    return $mdgriffith$elm_codegen$Elm$string(pageInfo.e4);
                  } else {
                    var pageRoute = _v0.a;
                    var vars = $author$project$Options$App$toUrlVariables(pageRoute);
                    if (!vars.b) {
                      return $mdgriffith$elm_codegen$Elm$string(pageInfo.e4);
                    } else {
                      var first = vars.a;
                      var remaining = vars.b;
                      return A2($mdgriffith$elm_codegen$Elm$Op$append, $mdgriffith$elm_codegen$Elm$string(pageInfo.e4 + "/"), A3($elm$core$List$foldl, F2(function(field, acc) {
                        return A2($mdgriffith$elm_codegen$Elm$Op$append, acc, A2($mdgriffith$elm_codegen$Elm$Op$append, $mdgriffith$elm_codegen$Elm$string("/"), A2($mdgriffith$elm_codegen$Elm$get, field, params)));
                      }), A2($mdgriffith$elm_codegen$Elm$get, first, params), remaining));
                    }
                  }
                }()
              });
            })));
          });
        }, pages)));
      }).kJ;
    };
    var $author$project$Press$Generate$Engine$toPageLimit = function(pages) {
      return A3($mdgriffith$elm_codegen$Elm$Declare$fn, "toPageLimit", A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), function(pageId) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$int, A3($mdgriffith$elm_codegen$Elm$Case$custom, pageId, $author$project$Press$Model$types.A, A2($elm$core$List$map, function(pageInfo) {
          var pageConfig = $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageInfo.lK, j: "page" });
          return A2($author$project$Press$Model$toPageBranch, pageInfo, function(_v0) {
            return A2($mdgriffith$elm_codegen$Elm$get, ".pageCacheLimit", A2($mdgriffith$elm_codegen$Elm$apply, $author$project$Gen$App$Page$values_.i3, _List_fromArray([pageConfig])));
          });
        }, pages)));
      }).kJ;
    };
    var $author$project$Gen$Listen$broadcastListeners = F2(function(broadcastListenersArg_, broadcastListenersArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Broadcast"]), "Msg", _List_Nil),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Listen"]), "Listen", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))),
        i: _List_fromArray(["Listen"]),
        j: "broadcastListeners"
      }), _List_fromArray([broadcastListenersArg_, broadcastListenersArg_0]));
    });
    var $author$project$Press$Model$setState = F3(function(key, val, model) {
      return A3($author$project$Gen$App$State$call_.fj, key, val, A2($mdgriffith$elm_codegen$Elm$get, "states", model));
    });
    var $author$project$Press$Model$updatePageBranches = F4(function(pages, config, shared, model) {
      return A2($elm$core$List$filterMap, function(pageInfo) {
        var stateKey = pageInfo.e4;
        var pageMsgTypeName = $author$project$Press$Model$types.ch(pageInfo.e4);
        var pageModule = pageInfo.lK;
        return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageMsg", A2($mdgriffith$elm_codegen$Elm$Annotation$named, pageModule, "Msg")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, pageMsgTypeName, $elm$core$Tuple$pair))), function(_v0) {
          var pageId = _v0.a;
          var pageMsg = _v0.b;
          var pageKey = A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageKey"), _List_fromArray([pageId]));
          return A4($author$project$Press$Model$getPage, pageKey, stateKey, A2($mdgriffith$elm_codegen$Elm$get, "states", model), {
            ft: function(pageState) {
              var updated = A3($author$project$Press$Model$withPageHelper, $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageModule, j: "page" }), "update", function(pageUpdate) {
                return A2($mdgriffith$elm_codegen$Elm$apply, pageUpdate, _List_fromArray([shared, pageMsg, pageState]));
              });
              return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("updatedPage"), $mdgriffith$elm_codegen$Elm$Arg$var("pageEffect")), updated, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v1) {
                var innerPageModel = _v1.a;
                var pageEffect = _v1.b;
                var pageModel = A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(stateKey), _List_fromArray([innerPageModel]));
                return A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                  _Utils_Tuple2("states", A3($author$project$Press$Model$setState, pageKey, pageModel, model))
                ]), model), A2($author$project$Press$Model$effectMap, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(pageMsgTypeName), _List_fromArray([pageId])), pageEffect));
              })));
            },
            gy: A2($mdgriffith$elm_codegen$Elm$tuple, model, $author$project$Press$Model$effectNone)
          });
        }));
      }, pages);
    });
    var $author$project$Press$Model$storeValue = F2(function(storeId, name) {
      return A2($mdgriffith$elm_codegen$Elm$get, name, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Nothing,
        i: _List_fromArray(["Store", storeId]),
        j: "store"
      }));
    });
    var $author$project$Press$Model$updateStoreBranches = F4(function(stores, config, storesState, model) {
      return A2($elm$core$List$map, function(store) {
        return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "storeMsg", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Store", store.e4]), "Msg")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Store" + store.e4, $elm$core$Basics$identity)), function(storeMsg) {
          var storeUpdate = A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "update", $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Nothing,
            i: _List_fromArray(["Store", store.e4]),
            j: "store"
          })), _List_fromArray([
            storeMsg,
            A2($mdgriffith$elm_codegen$Elm$get, store.e4, A2($mdgriffith$elm_codegen$Elm$get, "stores", model))
          ]));
          return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newStoreModel"), $mdgriffith$elm_codegen$Elm$Arg$var("newStoreEffect")), storeUpdate, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v0) {
            var newStoreModel = _v0.a;
            var newStoreEffect = _v0.b;
            var localStorageSync = A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Press$Model$storeValue, store.e4, "codec"), {
              ft: _Utils_Tuple2("codec", function(codec) {
                return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
                  h: $elm$core$Maybe$Just($author$project$Press$Model$effectWith($author$project$Press$Model$types.lM)),
                  i: _List_fromArray(["Effect", "LocalStorage"]),
                  j: "save"
                }), _List_fromArray([
                  $mdgriffith$elm_codegen$Elm$string(store.e4),
                  A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "encode", codec), _List_fromArray([newStoreModel]))
                ]));
              }),
              gy: $author$project$Press$Model$noneEffect
            });
            return A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
              _Utils_Tuple2("stores", A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(store.e4, newStoreModel)
              ]), A2($mdgriffith$elm_codegen$Elm$get, "stores", model)))
            ]), model), $author$project$Press$Model$effectBatch(_List_fromArray([
              A2($author$project$Press$Model$effectMap, $mdgriffith$elm_codegen$Elm$val("Store" + store.e4), newStoreEffect),
              localStorageSync
            ])));
          })));
        });
      }, stores);
    });
    var $author$project$Press$Generate$Engine$update = F4(function(stores, routes, getPageInit, loadPage) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "update", A4($mdgriffith$elm_codegen$Elm$fn3, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.lb), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "msg", $author$project$Press$Model$types.lM), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), F3(function(config, msg, model) {
        return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Model$types._, $author$project$Press$Model$types.a3($author$project$Press$Model$types.lM)), A3($mdgriffith$elm_codegen$Elm$Case$custom, msg, $author$project$Press$Model$types.lM, _Utils_ap(_List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PageCacheCleared", 0), function(_v0) {
            return A2($mdgriffith$elm_codegen$Elm$tuple, model, $author$project$Press$Model$effectNone);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Preload", $elm$core$Basics$identity)), function(pageId) {
            var pageInit = A3(getPageInit.bD, pageId, A2($mdgriffith$elm_codegen$Elm$get, "stores", model), A2($mdgriffith$elm_codegen$Elm$get, "states", model));
            return A2($mdgriffith$elm_codegen$Elm$Op$pipe, A2($mdgriffith$elm_codegen$Elm$apply, loadPage.jt, _List_fromArray([config, model, pageId])), pageInit);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "initialization", $author$project$Press$Model$types.g2), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Loaded", $elm$core$Tuple$pair))), function(_v1) {
            var pageId = _v1.a;
            var initialization = _v1.b;
            return A4(loadPage.bD, config, model, pageId, initialization);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "broadcastMsg", $author$project$Press$Model$types.kh), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Broadcast", $elm$core$Basics$identity)), function(broadcastMsg) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "pageMsgList", A2($author$project$Gen$Listen$broadcastListeners, broadcastMsg, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("getSubscriptions"), _List_fromArray([config, model]))), $mdgriffith$elm_codegen$Elm$Let$letIn(function(pageMsgList) {
              return A3($author$project$Gen$List$call_.eo, A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("pageMsg"), A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("innerModel"), $mdgriffith$elm_codegen$Elm$Arg$var("innerEffect")), F2(function(pageMsg, _v2) {
                var innerModel = _v2.a;
                var innerEffect = _v2.b;
                return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newModel"), $mdgriffith$elm_codegen$Elm$Arg$var("newEffect")), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("update"), _List_fromArray([config, pageMsg, innerModel])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v3) {
                  var newModel = _v3.a;
                  var newEffect = _v3.b;
                  return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, $author$project$Press$Model$effectBatch(_List_fromArray([newEffect, innerEffect])));
                })));
              })), A2($mdgriffith$elm_codegen$Elm$tuple, model, $author$project$Press$Model$effectNone), pageMsgList);
            })));
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "operation", $author$project$Press$Model$types.hB), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ViewUpdated", $elm$core$Basics$identity)), function(regionOperation) {
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "stores", A2($mdgriffith$elm_codegen$Elm$get, "stores", model), A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newRegions"), $mdgriffith$elm_codegen$Elm$Arg$var("regionDiff")), A2($author$project$Press$Generate$Regions$values.mZ, regionOperation, A2($mdgriffith$elm_codegen$Elm$get, "viewing", A2($mdgriffith$elm_codegen$Elm$get, "stores", model))), $mdgriffith$elm_codegen$Elm$Let$letIn(F2(function(_v4, liveStores) {
              var newRegions = _v4.a;
              var regionDiff = _v4.b;
              return A3($author$project$Gen$List$call_.eo, A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("pageId"), $mdgriffith$elm_codegen$Elm$Arg$var("inner"), F2(function(pageId, existingTuple) {
                return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("innerModel"), $mdgriffith$elm_codegen$Elm$Arg$var("innerEffect")), existingTuple, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v5) {
                  var innerModel = _v5.a;
                  var innerEffect = _v5.b;
                  var pageInit = A3(getPageInit.bD, pageId, A2($mdgriffith$elm_codegen$Elm$get, "stores", innerModel), A2($mdgriffith$elm_codegen$Elm$get, "states", innerModel));
                  var preloadedTuple = A2($mdgriffith$elm_codegen$Elm$Op$pipe, A2($mdgriffith$elm_codegen$Elm$apply, loadPage.jt, _List_fromArray([config, innerModel, pageId])), pageInit);
                  return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("preloadedModel"), $mdgriffith$elm_codegen$Elm$Arg$var("preloadedEffect")), preloadedTuple, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v6) {
                    var preloadedModel = _v6.a;
                    var preloadedEffect = _v6.b;
                    return A2($mdgriffith$elm_codegen$Elm$tuple, preloadedModel, $author$project$Press$Model$effectBatch(_List_fromArray([innerEffect, preloadedEffect])));
                  })));
                })));
              })), A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2("stores", A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                  _Utils_Tuple2("viewing", newRegions)
                ]), liveStores))
              ]), model), $author$project$Press$Model$effectNone), A2($mdgriffith$elm_codegen$Elm$get, "added", regionDiff));
            })))));
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "message", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "SubscriptionEventIgnored", $elm$core$Basics$identity)), function(_v7) {
            return A2($mdgriffith$elm_codegen$Elm$tuple, model, $author$project$Press$Model$effectNone);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "appMsg", $mdgriffith$elm_codegen$Elm$Annotation$var("appMsg")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Global", $elm$core$Basics$identity)), function(appMsg) {
            var updatedFrame = A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "update", config), _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$get, "stores", model),
              appMsg,
              A2($mdgriffith$elm_codegen$Elm$get, "app", model)
            ]));
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$unpack, A2($mdgriffith$elm_codegen$Elm$Arg$tuple, $mdgriffith$elm_codegen$Elm$Arg$var("newFrame"), $mdgriffith$elm_codegen$Elm$Arg$var("frameEffect")), updatedFrame, $mdgriffith$elm_codegen$Elm$Let$letIn(function(_v8) {
              var newFrame = _v8.a;
              var frameEffect = _v8.b;
              return A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2("app", newFrame)
              ]), model), A2($author$project$Press$Model$effectMap, $mdgriffith$elm_codegen$Elm$val("Global"), frameEffect));
            })));
          })
        ]), _Utils_ap(A4($author$project$Press$Model$updateStoreBranches, stores, config, A2($mdgriffith$elm_codegen$Elm$get, "stores", model), model), A4($author$project$Press$Model$updatePageBranches, routes, config, A2($mdgriffith$elm_codegen$Elm$get, "stores", model), model)))));
      })));
    });
    var $author$project$Press$Generate$Engine$view = function(routes) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "view", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "config", $author$project$Press$Model$types.lc), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "model", $author$project$Press$Model$types._), F2(function(config, model) {
        var frameView = function(pageView) {
          return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Gen$Browser$annotation_.a2($author$project$Press$Model$types.lM), A2($mdgriffith$elm_codegen$Elm$apply, A2($mdgriffith$elm_codegen$Elm$get, "view", config), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$get, "stores", model),
            $mdgriffith$elm_codegen$Elm$val("Global"),
            A2($mdgriffith$elm_codegen$Elm$get, "app", model),
            pageView
          ])));
        };
        return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "viewRegions", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Nothing,
          i: _List_fromArray(["App", "View", "Region"]),
          j: "mapRegion"
        }), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("viewPageModel"), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$get, "stores", model),
            A2($mdgriffith$elm_codegen$Elm$get, "states", model)
          ])),
          A2($mdgriffith$elm_codegen$Elm$get, "viewing", A2($mdgriffith$elm_codegen$Elm$get, "stores", model))
        ])), $mdgriffith$elm_codegen$Elm$Let$letIn(frameView)));
      })));
    };
    var $author$project$Gen$App$View$call_ = {
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View"]), "View", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View"]), "View", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ])))),
          i: _List_fromArray(["App", "View"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      })
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$result = F2(function(err, ok) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$typed, _List_Nil, "Result", _List_fromArray([err, ok]));
    });
    var $mdgriffith$elm_codegen$Elm$Case$result = F2(function(mainExpression, branches) {
      return A3($mdgriffith$elm_codegen$Elm$Case$custom, mainExpression, A2($mdgriffith$elm_codegen$Elm$Annotation$result, $mdgriffith$elm_codegen$Elm$Annotation$var("err"), $mdgriffith$elm_codegen$Elm$Annotation$var("result")), _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, $mdgriffith$elm_codegen$Elm$Arg$var(branches.gE.a), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Ok", $elm$core$Basics$identity)), function(val) {
          return A2($elm$core$Tuple$second, branches.gE, val);
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, $mdgriffith$elm_codegen$Elm$Arg$var(branches.d5.a), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Err", $elm$core$Basics$identity)), function(val) {
          return A2($elm$core$Tuple$second, branches.d5, val);
        })
      ]));
    });
    var $author$project$Press$Generate$Engine$routeToView = F4(function(stores, regionId, pageId, pageInfo) {
      var stateKey = pageInfo.e4;
      var pageMsgTypeName = $author$project$Press$Model$types.ch(pageInfo.e4);
      var pageModule = pageInfo.lK;
      return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageModel", A2($mdgriffith$elm_codegen$Elm$Annotation$named, pageModule, "Model")), A2($mdgriffith$elm_codegen$Elm$Arg$customType, stateKey, $elm$core$Basics$identity)), function(pageState) {
        return A3($author$project$Press$Model$withPageHelper, $mdgriffith$elm_codegen$Elm$value({ h: $elm$core$Maybe$Nothing, i: pageModule, j: "page" }), "view", function(pageView) {
          return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "pageViewResult", A2($mdgriffith$elm_codegen$Elm$apply, pageView, _List_fromArray([regionId, stores, pageState])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(pageViewResult) {
            return A2($mdgriffith$elm_codegen$Elm$Case$result, pageViewResult, {
              d5: _Utils_Tuple2("pageError", function(pageError) {
                return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Error"), _List_fromArray([pageError]));
              }),
              gE: _Utils_Tuple2("pageViewSuccess", function(pageViewSuccess) {
                return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("View"), _List_fromArray([
                  A2($author$project$Gen$App$View$call_.fV, A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("innerMsg"), function(innerMsg) {
                    return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(pageMsgTypeName), _List_fromArray([pageId, innerMsg]));
                  }), pageViewSuccess)
                ]));
              })
            });
          })));
        });
      });
    });
    var $author$project$Press$Generate$Engine$viewPageModel = function(pages) {
      return A2($mdgriffith$elm_codegen$Elm$declaration, "viewPageModel", $mdgriffith$elm_codegen$Elm$fnDone(A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Model$types.mg), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "states", $author$project$Press$Model$types.mF), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "stores", $author$project$Press$Model$storesType), $mdgriffith$elm_codegen$Elm$fnBuilder(F4(function(stores, states, regionId, pageId) {
        var pageKey = A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("toPageKey"), _List_fromArray([pageId]));
        return A2($mdgriffith$elm_codegen$Elm$withType, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "View", _List_fromArray([$author$project$Press$Model$appMsg])), A2($mdgriffith$elm_codegen$Elm$Case$maybe, A2($author$project$Gen$App$State$call_.eD, pageKey, states), {
          ft: _Utils_Tuple2("currentState", function(current) {
            return A3($mdgriffith$elm_codegen$Elm$Case$custom, current, $author$project$Press$Model$types.g3, A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageError", $author$project$Gen$App$Page$Error$annotation_.a4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PageError_", $elm$core$Basics$identity)), function(err) {
              return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Error"), _List_fromArray([err]));
            }), A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "loadingPageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PageLoading_", $elm$core$Basics$identity)), function(loadingPageId) {
              return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Loading"), _List_fromArray([loadingPageId]));
            }), A2($elm$core$List$map, A3($author$project$Press$Generate$Engine$routeToView, stores, regionId, pageId), pages))));
          }),
          gy: $mdgriffith$elm_codegen$Elm$val("NotFound")
        }));
      }))))))));
    };
    var $author$project$Gen$App$View$moduleName_ = _List_fromArray(["App", "View"]);
    var $author$project$Gen$App$View$annotation_ = {
      m4: function(viewArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$App$View$moduleName_, "View", _List_fromArray([viewArg0]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("title", $mdgriffith$elm_codegen$Elm$Annotation$string),
          _Utils_Tuple2("body", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ])));
      }
    };
    var $author$project$Press$Generate$Engine$viewType = $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "View", _List_fromArray([
      A2($mdgriffith$elm_codegen$Elm$variantWith, "NotFound", _List_Nil),
      A2($mdgriffith$elm_codegen$Elm$variantWith, "Loading", _List_fromArray([$author$project$Press$Model$types.A])),
      A2($mdgriffith$elm_codegen$Elm$variantWith, "Error", _List_fromArray([$author$project$Gen$App$Page$Error$annotation_.a4])),
      A2($mdgriffith$elm_codegen$Elm$variantWith, "View", _List_fromArray([
        $author$project$Gen$App$View$annotation_.m4($mdgriffith$elm_codegen$Elm$Annotation$var("appMsg"))
      ]))
    ])));
    var $author$project$Press$Generate$Engine$generate = F2(function(stores, allPageDefinitions) {
      var pageUsages = A2($elm$core$List$filter, function(pageInfo) {
        return !pageInfo.m$;
      }, allPageDefinitions);
      var loadPage = $author$project$Press$Model$loadPage(pageUsages);
      var getPageInit = $author$project$Press$Model$getPageInit(pageUsages);
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["App"]), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$alias, "App", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Program", _List_fromArray([
            $author$project$Gen$Json$Encode$annotation_.jt,
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Model", _List_fromArray([
              $author$project$Gen$Browser$Navigation$annotation_.lv,
              $mdgriffith$elm_codegen$Elm$Annotation$var("model")
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Msg", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ])))),
          A3($author$project$Press$Generate$Engine$app, pageUsages, getPageInit, loadPage)
        ])),
        $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$alias, "CmdOptions", $author$project$Press$Model$types.kv)),
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$alias, "SubOptions", $author$project$Press$Model$types.mI))
        ])),
        $author$project$Press$Generate$Engine$toEmptyStores(stores),
        $author$project$Press$Generate$Engine$toPageKey(pageUsages),
        $author$project$Press$Generate$Engine$toPageGroupKey(pageUsages),
        $author$project$Press$Generate$Engine$toPageLimit(pageUsages),
        $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$alias, "Model", $author$project$Press$Model$types.lI),
          A2($author$project$Press$Generate$Engine$msgType, stores, pageUsages),
          A4($author$project$Press$Generate$Engine$update, stores, pageUsages, getPageInit, loadPage)
        ])),
        A2($mdgriffith$elm_codegen$Elm$customType, "State", function() {
          var routeVariants = A2($elm$core$List$map, function(pageInfo) {
            return A2($mdgriffith$elm_codegen$Elm$variantWith, pageInfo.e4, _List_fromArray([
              A2($mdgriffith$elm_codegen$Elm$Annotation$named, pageInfo.lK, "Model")
            ]));
          }, pageUsages);
          return A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$variantWith, "PageError_", _List_fromArray([$author$project$Gen$App$Page$Error$annotation_.a4])), A2($elm$core$List$cons, A2($mdgriffith$elm_codegen$Elm$variantWith, "PageLoading_", _List_fromArray([$author$project$Press$Model$types.A])), routeVariants));
        }()),
        $author$project$Press$Generate$Engine$viewType,
        $author$project$Press$Generate$Engine$viewPageModel(pageUsages),
        $author$project$Press$Generate$Engine$syncStoresToLocalStorage(stores),
        getPageInit.kJ,
        loadPage.kJ,
        $author$project$Press$Generate$Engine$view(pageUsages),
        A2($author$project$Press$Generate$Engine$getSubscriptions, stores, pageUsages),
        $author$project$Press$Generate$Engine$subscriptions(pageUsages),
        $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          $author$project$Press$Generate$Engine$testAlias,
          A2($author$project$Press$Generate$Engine$test, getPageInit, loadPage)
        ]))
      ]));
    });
    var $author$project$Press$Generate$generatePageId = function(pageUsages) {
      var paramAliases = A2($elm$core$List$filterMap, function(page) {
        return page.m$ ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(function() {
          var _v3 = page.mr;
          if (_v3.$ === 1) {
            return A2($mdgriffith$elm_codegen$Elm$alias, $author$project$Options$App$toParamTypeString(page.e4), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_Nil));
          } else {
            var parsedRoute = _v3.a;
            var _v4 = $author$project$Generate$Route$checkForErrors(_List_fromArray([parsedRoute]));
            if (_v4.$ === 1) {
              return A2($mdgriffith$elm_codegen$Elm$alias, $author$project$Options$App$toParamTypeString(page.e4), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_Nil));
            } else {
              if (_v4.a.b && !_v4.a.b.b) {
                var _v5 = _v4.a;
                var route = _v5.a;
                return A2($mdgriffith$elm_codegen$Elm$alias, $author$project$Options$App$toParamTypeString(page.e4), A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Route"]), $author$project$Options$App$toParamTypeString(page.e4)));
              } else {
                return A2($mdgriffith$elm_codegen$Elm$alias, $author$project$Options$App$toParamTypeString(page.e4), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_Nil));
              }
            }
          }
        }());
      }, pageUsages);
      var pageIdType = A2($mdgriffith$elm_codegen$Elm$customType, "Id", A2($elm$core$List$filterMap, function(page) {
        return page.m$ ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$variantWith, A3($elm$core$String$replace, ".", "", page.e4), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, $author$project$Options$App$toParamTypeString(page.e4))
        ])));
      }, pageUsages));
      var fromRoute = A2($mdgriffith$elm_codegen$Elm$declaration, "fromRoute", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "route", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Route"]), "Route")), function(route) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$maybe(A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Id")), A3($mdgriffith$elm_codegen$Elm$Case$custom, route, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Route"]), "Route"), A2($elm$core$List$filterMap, function(page) {
          var _v0 = page.mr;
          if (_v0.$ === 1) {
            return $elm$core$Maybe$Nothing;
          } else {
            var parsedRoute = _v0.a;
            var _v1 = $author$project$Generate$Route$checkForErrors(_List_fromArray([parsedRoute]));
            if (_v1.$ === 1) {
              return $elm$core$Maybe$Nothing;
            } else {
              if (_v1.a.b && !_v1.a.b.b) {
                var _v2 = _v1.a;
                var pageRoute = _v2.a;
                return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "params", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["App", "Route"]), $author$project$Options$App$toParamTypeString(pageRoute.e4))), A2($mdgriffith$elm_codegen$Elm$Arg$customType, A3($elm$core$String$replace, ".", "", pageRoute.e4), $elm$core$Basics$identity)), function(params) {
                  return page.m$ ? $mdgriffith$elm_codegen$Elm$nothing : $mdgriffith$elm_codegen$Elm$just(A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val(A3($elm$core$String$replace, ".", "", pageRoute.e4)), _List_fromArray([params])));
                }));
              } else {
                return $elm$core$Maybe$Nothing;
              }
            }
          }
        }, pageUsages)));
      }));
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["App", "Page", "Id"]), A2($elm$core$List$cons, pageIdType, A2($elm$core$List$cons, fromRoute, paramAliases)));
    };
    var $author$project$Press$Generate$generateStores = function(stores) {
      var viewingStore = _Utils_Tuple2("viewing", $author$project$Press$Model$regionsRecord);
      var userDefinedStores = A2($elm$core$List$map, function(store) {
        return _Utils_Tuple2(store.e4, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_fromArray(["Store", store.e4]), "Model"));
      }, stores);
      return _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["App", "Stores"]), _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$alias, "Stores", $mdgriffith$elm_codegen$Elm$Annotation$record(A2($elm$core$List$cons, viewingStore, userDefinedStores)))
        ]))
      ]);
    };
    var $author$project$Press$Generate$generate = function(options) {
      var routes = A2($elm$core$List$filterMap, function($2) {
        return $2.mr;
      }, options.l6);
      var _v0 = $author$project$Generate$Route$generate(routes);
      if (_v0.$ === 1) {
        var err = _v0.a;
        return $elm$core$Result$Err(err);
      } else {
        var routeFile = _v0.a;
        return $elm$core$Result$Ok(A2($elm$core$List$cons, A2($author$project$Press$Generate$Engine$generate, options.mG, options.l6), A2($elm$core$List$cons, $author$project$Press$Generate$generatePageId(options.l6), A2($elm$core$List$cons, routeFile, $author$project$Press$Generate$generateStores(options.mG)))));
      }
    };
    var $author$project$Press$Generate$Regions$capitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toUpper(top), remain);
    };
    var $author$project$Press$Generate$Regions$types = {
      da: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Changes", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("view")
      ])),
      e4: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Id"),
      aV: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Operation", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("view")
      ])),
      gO: function(str) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Operation", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var(str)
        ]));
      },
      P: A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Region"),
      Q: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Regions", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("view")
      ])),
      hC: function(_var) {
        return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["App", "View", "Region"]), "Regions", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var(_var)
        ]));
      }
    };
    var $author$project$Press$Generate$Regions$allRegionsDeclaration = function(regions) {
      var allRegions = regions.F;
      return A2($mdgriffith$elm_codegen$Elm$declaration, "allRegions", $mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, function(_v0) {
        var regionName = _v0.a;
        return $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just($author$project$Press$Generate$Regions$types.P),
          i: _List_Nil,
          j: $author$project$Press$Generate$Regions$capitalize(regionName)
        });
      }, regions.F)));
    };
    var $author$project$Press$Generate$Regions$clearRegion = function(regions) {
      var allRegions = regions.F;
      return A2($mdgriffith$elm_codegen$Elm$declaration, "clearRegion", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewRegions", $author$project$Press$Generate$Regions$types.Q), F2(function(region, viewRegions) {
        return A3($mdgriffith$elm_codegen$Elm$Case$custom, region, $author$project$Press$Generate$Regions$types.P, A2($elm$core$List$map, function(_v0) {
          var field = _v0.a;
          var regionType = _v0.b;
          return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, field, 0), function(_v1) {
            return A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
              _Utils_Tuple2(field, function() {
                if (!regionType) {
                  return $mdgriffith$elm_codegen$Elm$nothing;
                } else {
                  return $mdgriffith$elm_codegen$Elm$list(_List_Nil);
                }
              }())
            ]), viewRegions);
          });
        }, allRegions));
      })));
    };
    var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = 2;
    var $mdgriffith$elm_codegen$Elm$Op$equal = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "==", 2, 4), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([
      $mdgriffith$elm_codegen$Internal$Types$var("a"),
      $mdgriffith$elm_codegen$Internal$Types$var("a")
    ]), $mdgriffith$elm_codegen$Internal$Types$bool));
    var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3(function(a, b, c) {
      return { $: 4, a, b, c };
    });
    var $mdgriffith$elm_codegen$Elm$ifThen = F3(function(condition, thenBranch, elseBranch) {
      return function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, index, condition);
        var condIndex = _v0.a;
        var cond = _v0.b;
        var _v1 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, condIndex, thenBranch);
        var thenIndex = _v1.a;
        var thenB = _v1.b;
        var _v2 = A2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails, thenIndex, elseBranch);
        var elseB = _v2.b;
        return {
          h: thenB.h,
          c: A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, $mdgriffith$elm_codegen$Internal$Compiler$nodify(cond.c), $mdgriffith$elm_codegen$Internal$Compiler$nodify(thenB.c), $mdgriffith$elm_codegen$Internal$Compiler$nodify(elseB.c)),
          d: _Utils_ap(cond.d, _Utils_ap(thenB.d, elseB.d))
        };
      };
    });
    var $author$project$Press$Generate$Regions$toRegionIdType = function(base) {
      return $author$project$Press$Generate$Regions$capitalize(base) + "Id";
    };
    var $author$project$Press$Generate$Regions$clearRegionAt = function(regions) {
      var allRegions = regions.F;
      return A2($mdgriffith$elm_codegen$Elm$declaration, "clearRegionAt", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewRegions", $author$project$Press$Generate$Regions$types.Q), F2(function(regionId, viewRegions) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Generate$Regions$types.Q, A3($mdgriffith$elm_codegen$Elm$Case$custom, regionId, $author$project$Press$Generate$Regions$types.e4, A2($elm$core$List$map, function(_v0) {
          var field = _v0.a;
          var regionType = _v0.b;
          if (!regionType) {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Press$Generate$Regions$toRegionIdType(field), 0), function(_v2) {
              return A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, $mdgriffith$elm_codegen$Elm$nothing)
              ]), viewRegions);
            });
          } else {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "index", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Press$Generate$Regions$toRegionIdType(field), $elm$core$Basics$identity)), function(index) {
              return A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, $author$project$Gen$List$call_.dn(A2($author$project$Gen$List$call_.fa, A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "itemIndex", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $mdgriffith$elm_codegen$Elm$Annotation$string), F2(function(itemIndex, pageId) {
                  return A3($mdgriffith$elm_codegen$Elm$ifThen, A2($mdgriffith$elm_codegen$Elm$Op$equal, itemIndex, index), $mdgriffith$elm_codegen$Elm$list(_List_Nil), $mdgriffith$elm_codegen$Elm$list(_List_fromArray([pageId])));
                })), A2($mdgriffith$elm_codegen$Elm$get, field, viewRegions))))
              ]), viewRegions);
            });
          }
        }, allRegions)));
      })));
    };
    var $author$project$Press$Generate$Regions$initViewRegions = function(regions) {
      var regionFields = A2($elm$core$List$map, function(_v0) {
        var field = _v0.a;
        var regionType = _v0.b;
        return _Utils_Tuple2(field, function() {
          if (!regionType) {
            return $mdgriffith$elm_codegen$Elm$nothing;
          } else {
            return $mdgriffith$elm_codegen$Elm$list(_List_Nil);
          }
        }());
      }, regions.F);
      return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Generate$Regions$types.Q, $mdgriffith$elm_codegen$Elm$record(regionFields));
    };
    var $author$project$Press$Generate$Regions$mapOperation = $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "mapOperation", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "fn", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
      $mdgriffith$elm_codegen$Elm$Annotation$var("view")
    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "operation", $author$project$Press$Generate$Regions$types.aV), F2(function(fn, operation) {
      return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Generate$Regions$types.gO("b"), A3($mdgriffith$elm_codegen$Elm$Case$custom, operation, $author$project$Press$Generate$Regions$types.aV, _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Push", $elm$core$Tuple$pair))), function(_v0) {
          var region = _v0.a;
          var pageId = _v0.b;
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("Push"), _List_fromArray([
            region,
            A2($mdgriffith$elm_codegen$Elm$apply, fn, _List_fromArray([pageId]))
          ]));
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "route", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PushTo", $elm$core$Tuple$pair))), function(_v1) {
          var regionId = _v1.a;
          var pageId = _v1.b;
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("PushTo"), _List_fromArray([
            regionId,
            A2($mdgriffith$elm_codegen$Elm$apply, fn, _List_fromArray([pageId]))
          ]));
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $author$project$Press$Model$types.A), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ReplaceAt", $elm$core$Tuple$pair))), function(_v2) {
          var regionId = _v2.a;
          var pageId = _v2.b;
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("ReplaceAt"), _List_fromArray([
            regionId,
            A2($mdgriffith$elm_codegen$Elm$apply, fn, _List_fromArray([pageId]))
          ]));
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Clear", 0), function(_v3) {
          return $mdgriffith$elm_codegen$Elm$val("Clear");
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ClearRegion", $elm$core$Basics$identity)), function(region) {
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("ClearRegion"), _List_fromArray([region]));
        }),
        A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ClearView", $elm$core$Basics$identity)), function(regionId) {
          return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("ClearView"), _List_fromArray([regionId]));
        })
      ])));
    }))));
    var $author$project$Press$Generate$Regions$mapRegion = function(regions) {
      var allRegions = regions.F;
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "mapRegion", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "fn", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
        $author$project$Press$Generate$Regions$types.e4,
        $mdgriffith$elm_codegen$Elm$Annotation$var("view")
      ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regions", $author$project$Press$Generate$Regions$types.Q), F2(function(fn, viewRegions) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Generate$Regions$types.hC("b"), $mdgriffith$elm_codegen$Elm$record(A2($elm$core$List$map, function(_v0) {
          var fieldName = _v0.a;
          var regionType = _v0.b;
          var idName = $author$project$Press$Generate$Regions$capitalize(fieldName) + "Id";
          var regionId = $mdgriffith$elm_codegen$Elm$value({
            h: $elm$core$Maybe$Just($author$project$Press$Generate$Regions$types.e4),
            i: _List_Nil,
            j: idName
          });
          return _Utils_Tuple2(fieldName, function() {
            if (!regionType) {
              return A2($author$project$Gen$Maybe$call_.fV, A2($mdgriffith$elm_codegen$Elm$apply, fn, _List_fromArray([regionId])), A2($mdgriffith$elm_codegen$Elm$get, fieldName, viewRegions));
            } else {
              return A2($author$project$Gen$List$call_.fa, A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "index", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), F2(function(index, pageId) {
                return A2($mdgriffith$elm_codegen$Elm$apply, fn, _List_fromArray([
                  A2($mdgriffith$elm_codegen$Elm$apply, regionId, _List_fromArray([index])),
                  pageId
                ]));
              })), A2($mdgriffith$elm_codegen$Elm$get, fieldName, viewRegions));
            }
          }());
        }, allRegions)));
      }))));
    };
    var $mdgriffith$elm_codegen$Elm$Op$or = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "||", 1, 2), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([$mdgriffith$elm_codegen$Internal$Types$bool, $mdgriffith$elm_codegen$Internal$Types$bool]), $mdgriffith$elm_codegen$Internal$Types$bool));
    var $author$project$Press$Generate$Regions$setRegion = function(regions) {
      var allRegions = regions.F;
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "setRegion", A4($mdgriffith$elm_codegen$Elm$fn3, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "contentId", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewRegions", $author$project$Press$Generate$Regions$types.Q), F3(function(region, contentId, viewRegions) {
        return A3($mdgriffith$elm_codegen$Elm$Case$custom, region, $author$project$Press$Generate$Regions$types.P, A2($elm$core$List$map, function(_v0) {
          var field = _v0.a;
          var regionType = _v0.b;
          return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Press$Generate$Regions$capitalize(field), 0), function(_v1) {
            return A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
              _Utils_Tuple2(field, function() {
                if (!regionType) {
                  return $mdgriffith$elm_codegen$Elm$just(contentId);
                } else {
                  return $mdgriffith$elm_codegen$Elm$list(_List_fromArray([contentId]));
                }
              }())
            ]), viewRegions);
          });
        }, allRegions));
      }))));
    };
    var $mdgriffith$elm_codegen$Elm$Op$cons = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "::", 1, 5), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([
      $mdgriffith$elm_codegen$Internal$Types$var("a"),
      $mdgriffith$elm_codegen$Internal$Types$list($mdgriffith$elm_codegen$Internal$Types$var("a"))
    ]), $mdgriffith$elm_codegen$Internal$Types$list($mdgriffith$elm_codegen$Internal$Types$var("a"))));
    var $mdgriffith$elm_codegen$Internal$Types$comparable = $mdgriffith$elm_codegen$Internal$Types$var("comparable");
    var $mdgriffith$elm_codegen$Elm$Op$gt = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, ">", 2, 4), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([$mdgriffith$elm_codegen$Internal$Types$comparable, $mdgriffith$elm_codegen$Internal$Types$comparable]), $mdgriffith$elm_codegen$Internal$Types$bool));
    var $mdgriffith$elm_codegen$Elm$Op$lte = A3($mdgriffith$elm_codegen$Elm$Op$applyInfix, _List_Nil, A3($mdgriffith$elm_codegen$Elm$Op$BinOp, "<=", 2, 4), A2($mdgriffith$elm_codegen$Internal$Types$function, _List_fromArray([$mdgriffith$elm_codegen$Internal$Types$comparable, $mdgriffith$elm_codegen$Internal$Types$comparable]), $mdgriffith$elm_codegen$Internal$Types$bool));
    var $author$project$Press$Generate$Regions$setRegionItem = function(regions) {
      var allRegions = regions.F;
      return A2($mdgriffith$elm_codegen$Elm$declaration, "setRegionItem", $mdgriffith$elm_codegen$Elm$fnDone(A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "replaceExisting", $mdgriffith$elm_codegen$Elm$Annotation$bool), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewRegions", $author$project$Press$Generate$Regions$types.Q), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "contentId", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$fnArg, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), $mdgriffith$elm_codegen$Elm$fnBuilder(F4(function(regionId, contentId, viewRegions, replaceExisting) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Press$Generate$Regions$types.Q, A3($mdgriffith$elm_codegen$Elm$Case$custom, regionId, $author$project$Press$Generate$Regions$types.e4, A2($elm$core$List$map, function(_v0) {
          var field = _v0.a;
          var regionType = _v0.b;
          if (!regionType) {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Press$Generate$Regions$toRegionIdType(field), 0), function(_v2) {
              return A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, $mdgriffith$elm_codegen$Elm$just(contentId))
              ]), viewRegions);
            });
          } else {
            return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "index", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Press$Generate$Regions$toRegionIdType(field), $elm$core$Basics$identity)), function(index) {
              return A3($mdgriffith$elm_codegen$Elm$ifThen, A2($mdgriffith$elm_codegen$Elm$Op$lte, index, $mdgriffith$elm_codegen$Elm$int(0)), A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, A2($mdgriffith$elm_codegen$Elm$Op$cons, contentId, A2($mdgriffith$elm_codegen$Elm$get, field, viewRegions)))
              ]), viewRegions), A3($mdgriffith$elm_codegen$Elm$ifThen, A2($mdgriffith$elm_codegen$Elm$Op$gt, index, $author$project$Gen$List$call_.fG(A2($mdgriffith$elm_codegen$Elm$get, field, viewRegions))), A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, A2($mdgriffith$elm_codegen$Elm$Op$append, A2($mdgriffith$elm_codegen$Elm$get, field, viewRegions), $mdgriffith$elm_codegen$Elm$list(_List_fromArray([contentId]))))
              ]), viewRegions), A2($mdgriffith$elm_codegen$Elm$updateRecord, _List_fromArray([
                _Utils_Tuple2(field, $author$project$Gen$List$call_.dn(A2($author$project$Gen$List$call_.fa, A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "itemIndex", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "pageId", $mdgriffith$elm_codegen$Elm$Annotation$string), F2(function(itemIndex, pageId) {
                  return A3($mdgriffith$elm_codegen$Elm$ifThen, A2($mdgriffith$elm_codegen$Elm$Op$equal, itemIndex, index), $mdgriffith$elm_codegen$Elm$list(_List_fromArray([contentId, pageId])), $mdgriffith$elm_codegen$Elm$list(_List_fromArray([pageId])));
                })), A2($mdgriffith$elm_codegen$Elm$get, field, viewRegions))))
              ]), viewRegions)));
            });
          }
        }, allRegions)));
      }))))))));
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function(a) {
      return { $: 21, a };
    };
    var $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast = function(lst) {
      var _v0 = $elm$core$List$reverse(lst);
      if (!_v0.b) {
        return $elm$core$Maybe$Nothing;
      } else {
        var _v1 = _v0.a;
        var last = _v1.b;
        var initReverse = _v0.b;
        return $elm$core$Maybe$Just(_Utils_Tuple2($elm$core$List$reverse(initReverse), last));
      }
    };
    var $mdgriffith$elm_codegen$Elm$betaReduce = function(e) {
      betaReduce:
        while (true) {
          var extractLastArg = function(argExpression) {
            extractLastArg:
              while (true) {
                _v0$2:
                  while (true) {
                    switch (argExpression.$) {
                      case 3:
                        if (!argExpression.a.b) {
                          var n = argExpression.b;
                          return $elm$core$Maybe$Just(n);
                        } else {
                          break _v0$2;
                        }
                      case 14:
                        var _v1 = argExpression.a;
                        var p = _v1.b;
                        var $temp$argExpression = p;
                        argExpression = $temp$argExpression;
                        continue extractLastArg;
                      default:
                        break _v0$2;
                    }
                  }
                return $elm$core$Maybe$Nothing;
              }
          };
          if (e.$ === 17) {
            var args = e.a.cF;
            var expression = e.a.c;
            var _v3 = $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast(args);
            if (!_v3.$ && _v3.a.b.$ === 11) {
              var _v4 = _v3.a;
              var initLambdaArgs = _v4.a;
              var lastLambdaArg = _v4.b.a;
              var _v5 = $mdgriffith$elm_codegen$Internal$Compiler$denode(expression);
              switch (_v5.$) {
                case 20:
                  var _v6 = _v5.a;
                  var argVal = _v6.b;
                  var _v7 = _v5.b;
                  var fieldName = _v7.b;
                  if (argVal.$ === 3 && !argVal.a.b) {
                    var argName = argVal.b;
                    return _Utils_eq(argName, lastLambdaArg) ? $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction("." + fieldName) : e;
                  } else {
                    return e;
                  }
                case 1:
                  var applicationArgs = _v5.a;
                  var _v9 = $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast(applicationArgs);
                  if (!_v9.$) {
                    if (!_v9.a.a.b) {
                      var _v10 = _v9.a;
                      var uniqueApplicationArg = _v10.b;
                      return _Utils_eq(extractLastArg(uniqueApplicationArg), $elm$core$Maybe$Just(lastLambdaArg)) ? A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, "identity") : e;
                    } else {
                      var _v11 = _v9.a;
                      var initApplicationArgs = _v11.a;
                      var lastApplicationArg = _v11.b;
                      if (_Utils_eq(extractLastArg(lastApplicationArg), $elm$core$Maybe$Just(lastLambdaArg))) {
                        if ($elm$core$List$isEmpty(initLambdaArgs)) {
                          if (initApplicationArgs.b && !initApplicationArgs.b.b) {
                            var _v13 = initApplicationArgs.a;
                            var s = _v13.b;
                            var $temp$e = s;
                            e = $temp$e;
                            continue betaReduce;
                          } else {
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(initApplicationArgs);
                          }
                        } else {
                          return $mdgriffith$elm_codegen$Elm$betaReduce($stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                            cF: initLambdaArgs,
                            c: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$Application(initApplicationArgs))
                          }));
                        }
                      } else {
                        return e;
                      }
                    }
                  } else {
                    return e;
                  }
                default:
                  return e;
              }
            } else {
              return e;
            }
          } else {
            return e;
          }
        }
    };
    var $mdgriffith$elm_codegen$Elm$functionReduced = F2(function(argBaseName, toExpression) {
      return $mdgriffith$elm_codegen$Internal$Compiler$expression(function(index) {
        var _v0 = A2($mdgriffith$elm_codegen$Internal$Index$getName, argBaseName, index);
        var arg1Name = _v0.a;
        var newIndex = _v0.b;
        var argType = $mdgriffith$elm_codegen$Elm$Annotation$var(arg1Name);
        var arg1 = $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(argType),
          i: _List_Nil,
          j: arg1Name
        });
        var _v1 = toExpression(arg1);
        var toExpr = _v1;
        var _return = toExpr(newIndex);
        return {
          h: function() {
            var _v2 = _return.h;
            if (_v2.$ === 1) {
              return _return.h;
            } else {
              var returnAnnotation = _v2.a;
              return $elm$core$Result$Ok({
                jQ: returnAnnotation.jQ,
                g: returnAnnotation.g,
                ji: A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(arg1Name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify(returnAnnotation.ji))
              });
            }
          }(),
          c: $mdgriffith$elm_codegen$Elm$betaReduce($stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
            cF: _List_fromArray([
              $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(arg1Name))
            ]),
            c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return.c)
          })),
          d: _return.d
        };
      });
    });
    var $author$project$Gen$Maybe$map = F2(function(mapArg_, mapArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("b")))),
        i: _List_fromArray(["Maybe"]),
        j: "map"
      }), _List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$functionReduced, "mapUnpack", mapArg_),
        mapArg_0
      ]));
    });
    var $author$project$Gen$Maybe$withDefault = F2(function(withDefaultArg_, withDefaultArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
          $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("a"))),
        i: _List_fromArray(["Maybe"]),
        j: "withDefault"
      }), _List_fromArray([withDefaultArg_, withDefaultArg_0]));
    });
    var $author$project$Press$Generate$Regions$toList = function(regions) {
      var allRegions = regions.F;
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "toList", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "viewRegions", $author$project$Press$Generate$Regions$types.Q), function(viewRegions) {
        return A2($mdgriffith$elm_codegen$Elm$withType, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("view")), $author$project$Gen$List$call_.dn($mdgriffith$elm_codegen$Elm$list(A2($elm$core$List$map, function(_v0) {
          var typename = _v0.a;
          var regionType = _v0.b;
          if (!regionType) {
            return A2($author$project$Gen$Maybe$withDefault, $mdgriffith$elm_codegen$Elm$list(_List_Nil), A2($author$project$Gen$Maybe$map, function(x2) {
              return $mdgriffith$elm_codegen$Elm$list(_List_fromArray([x2]));
            }, A2($mdgriffith$elm_codegen$Elm$get, typename, viewRegions)));
          } else {
            return A2($mdgriffith$elm_codegen$Elm$get, typename, viewRegions);
          }
        }, allRegions))));
      })));
    };
    var $author$project$Press$Generate$Regions$added = function(val) {
      return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
        _Utils_Tuple2("added", $mdgriffith$elm_codegen$Elm$list(_List_fromArray([val]))),
        _Utils_Tuple2("removed", $mdgriffith$elm_codegen$Elm$list(_List_Nil))
      ]));
    };
    var $author$project$Press$Generate$Regions$noChanges = $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
      _Utils_Tuple2("added", $mdgriffith$elm_codegen$Elm$list(_List_Nil)),
      _Utils_Tuple2("removed", $mdgriffith$elm_codegen$Elm$list(_List_Nil))
    ]));
    var $author$project$Press$Generate$Regions$update = function(regions) {
      var allRegions = regions.F;
      return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "update", A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "operation", $author$project$Press$Generate$Regions$types.aV), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regions", $author$project$Press$Generate$Regions$types.Q), F2(function(operation, model) {
        return A2($mdgriffith$elm_codegen$Elm$withType, A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $author$project$Press$Generate$Regions$types.Q, $author$project$Press$Generate$Regions$types.da), A3($mdgriffith$elm_codegen$Elm$Case$custom, operation, $author$project$Press$Generate$Regions$types.aV, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "val", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Push", $elm$core$Tuple$pair))), function(_v0) {
            var region = _v0.a;
            var pageId = _v0.b;
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "modelWithRegionSet", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("setRegion"), _List_fromArray([region, pageId, model])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(newModel) {
              return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, $author$project$Press$Generate$Regions$added(pageId));
            })));
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "val", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "PushTo", $elm$core$Tuple$pair))), function(_v1) {
            var regionId = _v1.a;
            var pageId = _v1.b;
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "modelWithRegionSet", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("setRegionItem"), _List_fromArray([
              regionId,
              pageId,
              model,
              $mdgriffith$elm_codegen$Elm$bool(false)
            ])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(newModel) {
              return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, $author$project$Press$Generate$Regions$added(pageId));
            })));
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "val", $mdgriffith$elm_codegen$Elm$Annotation$var("view")), A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ReplaceAt", $elm$core$Tuple$pair))), function(_v2) {
            var regionId = _v2.a;
            var pageId = _v2.b;
            return $mdgriffith$elm_codegen$Elm$Let$toExpression(A3($mdgriffith$elm_codegen$Elm$Let$value, "modelWithRegionSet", A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("setRegionItem"), _List_fromArray([
              regionId,
              pageId,
              model,
              $mdgriffith$elm_codegen$Elm$bool(true)
            ])), $mdgriffith$elm_codegen$Elm$Let$letIn(function(newModel) {
              return A2($mdgriffith$elm_codegen$Elm$tuple, newModel, $author$project$Press$Generate$Regions$added(pageId));
            })));
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Clear", 0), function(_v3) {
            return A2($mdgriffith$elm_codegen$Elm$tuple, A3($author$project$Gen$List$call_.eo, $mdgriffith$elm_codegen$Elm$val("clearRegion"), model, $mdgriffith$elm_codegen$Elm$val("allRegions")), $author$project$Press$Generate$Regions$noChanges);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "region", $author$project$Press$Generate$Regions$types.P), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ClearRegion", $elm$core$Basics$identity)), function(region) {
            return A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("clearRegion"), _List_fromArray([region, model])), $author$project$Press$Generate$Regions$noChanges);
          }),
          A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$item, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regionId", $author$project$Press$Generate$Regions$types.e4), A2($mdgriffith$elm_codegen$Elm$Arg$customType, "ClearView", $elm$core$Basics$identity)), function(regionId) {
            return A2($mdgriffith$elm_codegen$Elm$tuple, A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("clearRegionAt"), _List_fromArray([regionId, model])), $author$project$Press$Generate$Regions$noChanges);
          })
        ])));
      }))));
    };
    var $author$project$Press$Generate$Regions$generateRegionIndex = function(viewRegions) {
      var route = $author$project$Press$Model$types.mt;
      var regionRecord = $mdgriffith$elm_codegen$Elm$Annotation$record(A2($elm$core$List$map, function(_v7) {
        var name = _v7.a;
        var regionType = _v7.b;
        if (!regionType) {
          return _Utils_Tuple2(name, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("view")));
        } else {
          return _Utils_Tuple2(name, $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("view")));
        }
      }, viewRegions.F));
      var regionEnum = A2($elm$core$List$map, function(_v6) {
        var name = _v6.a;
        var regionType = _v6.b;
        return $mdgriffith$elm_codegen$Elm$variant(name);
      }, viewRegions.F);
      var isVisible = A2($mdgriffith$elm_codegen$Elm$declaration, "isVisible", A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("view"), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "regions", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Regions", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("view")
      ]))), F2(function(view, regions) {
        return A2($elm$core$Maybe$withDefault, $mdgriffith$elm_codegen$Elm$bool(false), A3($elm$core$List$foldl, F2(function(_v2, maybeFound) {
          var name = _v2.a;
          var regionType = _v2.b;
          if (!maybeFound.$) {
            var found = maybeFound.a;
            if (!regionType) {
              return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Op$or, A2($mdgriffith$elm_codegen$Elm$Op$equal, $mdgriffith$elm_codegen$Elm$just(view), A2($mdgriffith$elm_codegen$Elm$get, name, regions)), found));
            } else {
              return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Op$or, A2($author$project$Gen$List$call_.gd, view, A2($mdgriffith$elm_codegen$Elm$get, name, regions)), found));
            }
          } else {
            if (!regionType) {
              return $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Op$equal, $mdgriffith$elm_codegen$Elm$just(view), A2($mdgriffith$elm_codegen$Elm$get, name, regions)));
            } else {
              return $elm$core$Maybe$Just(A2($author$project$Gen$List$call_.gd, view, A2($mdgriffith$elm_codegen$Elm$get, name, regions)));
            }
          }
        }), $elm$core$Maybe$Nothing, viewRegions.F));
      })));
      var idName = function(base) {
        return base + "Id";
      };
      var otherRegionIds = A2($elm$core$List$map, function(_v0) {
        var name = _v0.a;
        var regionType = _v0.b;
        if (!regionType) {
          return $mdgriffith$elm_codegen$Elm$variant(idName(name));
        } else {
          return A2($mdgriffith$elm_codegen$Elm$variantWith, idName(name), _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]));
        }
      }, viewRegions.F);
      return A3($mdgriffith$elm_codegen$Elm$fileWith, _List_fromArray(["App", "View", "Region"]), { jQ: _List_Nil, kU: "" }, _List_fromArray([
        $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$alias, "Regions", regionRecord)),
        $mdgriffith$elm_codegen$Elm$expose(isVisible),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "Region", regionEnum)),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "Id", otherRegionIds)),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$alias, "Changes", $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
          _Utils_Tuple2("added", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("view"))),
          _Utils_Tuple2("removed", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("view")))
        ])))),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "Operation", _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$variantWith, "Push", _List_fromArray([
            $author$project$Press$Generate$Regions$types.P,
            $mdgriffith$elm_codegen$Elm$Annotation$var("view")
          ])),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "PushTo", _List_fromArray([
            $author$project$Press$Generate$Regions$types.e4,
            $mdgriffith$elm_codegen$Elm$Annotation$var("view")
          ])),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "ReplaceAt", _List_fromArray([
            $author$project$Press$Generate$Regions$types.e4,
            $mdgriffith$elm_codegen$Elm$Annotation$var("view")
          ])),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "Clear", _List_Nil),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "ClearRegion", _List_fromArray([$author$project$Press$Generate$Regions$types.P])),
          A2($mdgriffith$elm_codegen$Elm$variantWith, "ClearView", _List_fromArray([$author$project$Press$Generate$Regions$types.e4]))
        ]))),
        $author$project$Press$Generate$Regions$mapOperation,
        $author$project$Press$Generate$Regions$update(viewRegions),
        $author$project$Press$Generate$Regions$setRegion(viewRegions),
        $author$project$Press$Generate$Regions$setRegionItem(viewRegions),
        $author$project$Press$Generate$Regions$clearRegion(viewRegions),
        $author$project$Press$Generate$Regions$clearRegionAt(viewRegions),
        $author$project$Press$Generate$Regions$toList(viewRegions),
        $author$project$Press$Generate$Regions$allRegionsDeclaration(viewRegions),
        $author$project$Press$Generate$Regions$mapRegion(viewRegions),
        $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "empty", $author$project$Press$Generate$Regions$initViewRegions(viewRegions)))
      ]));
    };
    var $author$project$Press$Generate$Regions$generate = function(viewRegions) {
      return $author$project$Press$Generate$Regions$generateRegionIndex(viewRegions);
    };
    var $author$project$Gen$Ui$rgb = F3(function(rgbArg_, rgbArg_0, rgbArg_1) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "rgb"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$int(rgbArg_),
        $mdgriffith$elm_codegen$Elm$int(rgbArg_0),
        $mdgriffith$elm_codegen$Elm$int(rgbArg_1)
      ]));
    });
    var $elm$core$Basics$round = _Basics_round;
    var $author$project$Theme$Generate$Ui$to255 = function(value) {
      return $elm$core$Basics$round(value * 255);
    };
    var $avh4$elm_color$Color$toRgba = function(_v0) {
      var r = _v0.a;
      var g2 = _v0.b;
      var b = _v0.c;
      var a = _v0.d;
      return { av: a, c_: b, eI: g2, hA: r };
    };
    var $author$project$Theme$Generate$Ui$toColor = F2(function(target, clr) {
      var rgb = $avh4$elm_color$Color$toRgba(clr);
      if (!target) {
        return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
          _Utils_Tuple2("red", $mdgriffith$elm_codegen$Elm$int($author$project$Theme$Generate$Ui$to255(rgb.hA))),
          _Utils_Tuple2("green", $mdgriffith$elm_codegen$Elm$int($author$project$Theme$Generate$Ui$to255(rgb.eI))),
          _Utils_Tuple2("blue", $mdgriffith$elm_codegen$Elm$int($author$project$Theme$Generate$Ui$to255(rgb.c_)))
        ]));
      } else {
        return A3($author$project$Gen$Ui$rgb, $author$project$Theme$Generate$Ui$to255(rgb.hA), $author$project$Theme$Generate$Ui$to255(rgb.eI), $author$project$Theme$Generate$Ui$to255(rgb.c_));
      }
    });
    var $author$project$Theme$Generate$Ui$generateElmColorPalette = function(theme) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Theme", "Color", "Palette"]), A3($elm$core$List$foldl, F2(function(colorInstance, list) {
        var _v0 = theme.iS;
        if (!_v0) {
          var _v1 = colorInstance.kw;
          if (!_v1.$) {
            var adjust = _v1.a;
            var clr = _v1.b;
            return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, $author$project$Theme$toColorName(colorInstance), A2($author$project$Theme$Generate$Ui$toColor, theme.iS, clr))), list);
          } else {
            return list;
          }
        } else {
          var _v2 = colorInstance.kw;
          if (!_v2.$) {
            var adjust = _v2.a;
            var clr = _v2.b;
            return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, $author$project$Theme$toColorName(colorInstance), A2($author$project$Theme$Generate$Ui$toColor, theme.iS, clr))), list);
          } else {
            return list;
          }
        }
      }), _List_Nil, theme.kx));
    };
    var $author$project$Theme$Generate$Ui$capitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toUpper(top), remain);
    };
    var $author$project$Gen$Html$Attributes$class = function(classArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Html", "Attributes"]),
        j: "class"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$string(classArg_)
      ]));
    };
    var $author$project$Theme$colorDefintionToCssClass = F3(function(theme, propName, colorDef) {
      return $elm$core$String$isEmpty(colorDef.j) ? theme.aR + ("-" + propName) : theme.aR + ("-" + (propName + ("-" + colorDef.j)));
    });
    var $mdgriffith$elm_codegen$Internal$Compiler$Comment = function(a) {
      return { $: 1, a };
    };
    var $mdgriffith$elm_codegen$Elm$comment = function(content) {
      return $mdgriffith$elm_codegen$Internal$Compiler$Comment("{- " + (content + " -}"));
    };
    var $author$project$Gen$Ui$htmlAttribute = function(htmlAttributeArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "htmlAttribute"
      }), _List_fromArray([htmlAttributeArg_]));
    };
    var $author$project$Theme$Generate$Ui$generateElmColorTheme = function(theme) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Theme", "Color"]), function() {
        var _v0 = theme.mQ;
        if (_v0.$ === 1) {
          return _List_Nil;
        } else {
          var themes = _v0.a;
          var toStyles = F2(function(propName, colorDefs) {
            return $mdgriffith$elm_codegen$Elm$group(A2($elm$core$List$map, $elm$core$Tuple$second, A2($elm$core$List$sortBy, $elm$core$Tuple$first, A2($elm$core$List$concatMap, function(colorDef) {
              var className = A3($author$project$Theme$colorDefintionToCssClass, theme, propName, colorDef);
              return _List_fromArray([
                _Utils_Tuple2(className, $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, _Utils_ap(propName, $author$project$Theme$Generate$Ui$capitalize(colorDef.j)), function() {
                  var _v1 = theme.iS;
                  if (!_v1) {
                    return $author$project$Gen$Html$Attributes$class(className);
                  } else {
                    return $author$project$Gen$Ui$htmlAttribute($author$project$Gen$Html$Attributes$class(className));
                  }
                }())))
              ]);
            }, colorDefs))));
          });
          return _List_fromArray([
            $mdgriffith$elm_codegen$Elm$comment(" Text "),
            A2(toStyles, "text", themes.dE.iW),
            $mdgriffith$elm_codegen$Elm$comment(" Backgrounds "),
            A2(toStyles, "background", themes.dE.bB),
            $mdgriffith$elm_codegen$Elm$comment(" Borders "),
            A2(toStyles, "border", themes.dE.c0)
          ]);
        }
      }());
    };
    var $author$project$Theme$Generate$Ui$addNamespace = F2(function(namespace, name) {
      return namespace === "" ? name : namespace + ("-" + name);
    });
    var $author$project$Gen$Html$moduleName_ = _List_fromArray(["Html"]);
    var $author$project$Gen$Html$annotation_ = {
      j1: function(attributeArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Html$moduleName_, "Attribute", _List_fromArray([attributeArg0]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["VirtualDom"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])));
      },
      ll: function(htmlArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Html$moduleName_, "Html", _List_fromArray([htmlArg0]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["VirtualDom"]), "Node", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])));
      }
    };
    var $author$project$Gen$Html$call_ = {
      cl: F2(function(aArg_, aArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "a"
        }), _List_fromArray([aArg_, aArg_0]));
      }),
      cm: F2(function(abbrArg_, abbrArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "abbr"
        }), _List_fromArray([abbrArg_, abbrArg_0]));
      }),
      cu: F2(function(addressArg_, addressArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "address"
        }), _List_fromArray([addressArg_, addressArg_0]));
      }),
      cH: F2(function(articleArg_, articleArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "article"
        }), _List_fromArray([articleArg_, articleArg_0]));
      }),
      cI: F2(function(asideArg_, asideArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "aside"
        }), _List_fromArray([asideArg_, asideArg_0]));
      }),
      cN: F2(function(audioArg_, audioArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "audio"
        }), _List_fromArray([audioArg_, audioArg_0]));
      }),
      cR: F2(function(bArg_, bArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "b"
        }), _List_fromArray([bArg_, bArg_0]));
      }),
      cU: F2(function(bdiArg_, bdiArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "bdi"
        }), _List_fromArray([bdiArg_, bdiArg_0]));
      }),
      cV: F2(function(bdoArg_, bdoArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "bdo"
        }), _List_fromArray([bdoArg_, bdoArg_0]));
      }),
      cZ: F2(function(blockquoteArg_, blockquoteArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "blockquote"
        }), _List_fromArray([blockquoteArg_, blockquoteArg_0]));
      }),
      c4: F2(function(brArg_, brArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "br"
        }), _List_fromArray([brArg_, brArg_0]));
      }),
      c6: F2(function(buttonArg_, buttonArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "button"
        }), _List_fromArray([buttonArg_, buttonArg_0]));
      }),
      c7: F2(function(canvasArg_, canvasArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "canvas"
        }), _List_fromArray([canvasArg_, canvasArg_0]));
      }),
      c8: F2(function(captionArg_, captionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "caption"
        }), _List_fromArray([captionArg_, captionArg_0]));
      }),
      dd: F2(function(citeArg_, citeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "cite"
        }), _List_fromArray([citeArg_, citeArg_0]));
      }),
      dh: F2(function(codeArg_, codeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "code"
        }), _List_fromArray([codeArg_, codeArg_0]));
      }),
      di: F2(function(colArg_, colArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "col"
        }), _List_fromArray([colArg_, colArg_0]));
      }),
      dj: F2(function(colgroupArg_, colgroupArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "colgroup"
        }), _List_fromArray([colgroupArg_, colgroupArg_0]));
      }),
      dx: F2(function(datalistArg_, datalistArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "datalist"
        }), _List_fromArray([datalistArg_, datalistArg_0]));
      }),
      dA: F2(function(ddArg_, ddArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "dd"
        }), _List_fromArray([ddArg_, ddArg_0]));
      }),
      dG: F2(function(delArg_, delArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "del"
        }), _List_fromArray([delArg_, delArg_0]));
      }),
      dI: F2(function(detailsArg_, detailsArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "details"
        }), _List_fromArray([detailsArg_, detailsArg_0]));
      }),
      dJ: F2(function(dfnArg_, dfnArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "dfn"
        }), _List_fromArray([dfnArg_, dfnArg_0]));
      }),
      dO: F2(function(divArg_, divArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "div"
        }), _List_fromArray([divArg_, divArg_0]));
      }),
      dP: F2(function(dlArg_, dlArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "dl"
        }), _List_fromArray([dlArg_, dlArg_0]));
      }),
      dY: F2(function(dtArg_, dtArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "dt"
        }), _List_fromArray([dtArg_, dtArg_0]));
      }),
      d0: F2(function(emArg_, emArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "em"
        }), _List_fromArray([emArg_, emArg_0]));
      }),
      d1: F2(function(embedArg_, embedArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "embed"
        }), _List_fromArray([embedArg_, embedArg_0]));
      }),
      eh: F2(function(fieldsetArg_, fieldsetArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "fieldset"
        }), _List_fromArray([fieldsetArg_, fieldsetArg_0]));
      }),
      ei: F2(function(figcaptionArg_, figcaptionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "figcaption"
        }), _List_fromArray([figcaptionArg_, figcaptionArg_0]));
      }),
      ej: F2(function(figureArg_, figureArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "figure"
        }), _List_fromArray([figureArg_, figureArg_0]));
      }),
      eq: F2(function(footerArg_, footerArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "footer"
        }), _List_fromArray([footerArg_, footerArg_0]));
      }),
      es: F2(function(formArg_, formArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "form"
        }), _List_fromArray([formArg_, formArg_0]));
      }),
      eK: F2(function(h1Arg_, h1Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h1"
        }), _List_fromArray([h1Arg_, h1Arg_0]));
      }),
      eL: F2(function(h2Arg_, h2Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h2"
        }), _List_fromArray([h2Arg_, h2Arg_0]));
      }),
      eM: F2(function(h3Arg_, h3Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h3"
        }), _List_fromArray([h3Arg_, h3Arg_0]));
      }),
      eN: F2(function(h4Arg_, h4Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h4"
        }), _List_fromArray([h4Arg_, h4Arg_0]));
      }),
      eO: F2(function(h5Arg_, h5Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h5"
        }), _List_fromArray([h5Arg_, h5Arg_0]));
      }),
      eP: F2(function(h6Arg_, h6Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "h6"
        }), _List_fromArray([h6Arg_, h6Arg_0]));
      }),
      eR: F2(function(headerArg_, headerArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "header"
        }), _List_fromArray([headerArg_, headerArg_0]));
      }),
      eX: F2(function(hrArg_, hrArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "hr"
        }), _List_fromArray([hrArg_, hrArg_0]));
      }),
      e3: F2(function(iArg_, iArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "i"
        }), _List_fromArray([iArg_, iArg_0]));
      }),
      e5: F2(function(iframeArg_, iframeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "iframe"
        }), _List_fromArray([iframeArg_, iframeArg_0]));
      }),
      e8: F2(function(imgArg_, imgArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "img"
        }), _List_fromArray([imgArg_, imgArg_0]));
      }),
      fh: F2(function(inputArg_, inputArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "input"
        }), _List_fromArray([inputArg_, inputArg_0]));
      }),
      fi: F2(function(insArg_, insArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "ins"
        }), _List_fromArray([insArg_, insArg_0]));
      }),
      fu: F2(function(kbdArg_, kbdArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "kbd"
        }), _List_fromArray([kbdArg_, kbdArg_0]));
      }),
      fz: F2(function(labelArg_, labelArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "label"
        }), _List_fromArray([labelArg_, labelArg_0]));
      }),
      fF: F2(function(legendArg_, legendArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "legend"
        }), _List_fromArray([legendArg_, legendArg_0]));
      }),
      fI: F2(function(liArg_, liArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "li"
        }), _List_fromArray([liArg_, liArg_0]));
      }),
      fT: F2(function(main_Arg_, main_Arg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "main_"
        }), _List_fromArray([main_Arg_, main_Arg_0]));
      }),
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      f7: F2(function(markArg_, markArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "mark"
        }), _List_fromArray([markArg_, markArg_0]));
      }),
      f8: F2(function(mathArg_, mathArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "math"
        }), _List_fromArray([mathArg_, mathArg_0]));
      }),
      ge: F2(function(menuArg_, menuArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "menu"
        }), _List_fromArray([menuArg_, menuArg_0]));
      }),
      gf: F2(function(menuitemArg_, menuitemArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "menuitem"
        }), _List_fromArray([menuitemArg_, menuitemArg_0]));
      }),
      gh: F2(function(meterArg_, meterArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "meter"
        }), _List_fromArray([meterArg_, meterArg_0]));
      }),
      gt: F2(function(navArg_, navArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "nav"
        }), _List_fromArray([navArg_, navArg_0]));
      }),
      gx: F3(function(nodeArg_, nodeArg_0, nodeArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "node"
        }), _List_fromArray([nodeArg_, nodeArg_0, nodeArg_1]));
      }),
      gC: F2(function(objectArg_, objectArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "object"
        }), _List_fromArray([objectArg_, objectArg_0]));
      }),
      gF: F2(function(olArg_, olArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "ol"
        }), _List_fromArray([olArg_, olArg_0]));
      }),
      gP: F2(function(optgroupArg_, optgroupArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "optgroup"
        }), _List_fromArray([optgroupArg_, optgroupArg_0]));
      }),
      gQ: F2(function(optionArg_, optionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "option"
        }), _List_fromArray([optionArg_, optionArg_0]));
      }),
      gS: F2(function(outputArg_, outputArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "output"
        }), _List_fromArray([outputArg_, outputArg_0]));
      }),
      gT: F2(function(pArg_, pArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "p"
        }), _List_fromArray([pArg_, pArg_0]));
      }),
      g5: F2(function(paramArg_, paramArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "param"
        }), _List_fromArray([paramArg_, paramArg_0]));
      }),
      hi: F2(function(preArg_, preArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "pre"
        }), _List_fromArray([preArg_, preArg_0]));
      }),
      ho: F2(function(progressArg_, progressArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "progress"
        }), _List_fromArray([progressArg_, progressArg_0]));
      }),
      hu: F2(function(qArg_, qArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "q"
        }), _List_fromArray([qArg_, qArg_0]));
      }),
      hY: F2(function(rpArg_, rpArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "rp"
        }), _List_fromArray([rpArg_, rpArg_0]));
      }),
      hZ: F2(function(rtArg_, rtArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "rt"
        }), _List_fromArray([rtArg_, rtArg_0]));
      }),
      h_: F2(function(rubyArg_, rubyArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "ruby"
        }), _List_fromArray([rubyArg_, rubyArg_0]));
      }),
      h$: F2(function(sArg_, sArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "s"
        }), _List_fromArray([sArg_, sArg_0]));
      }),
      h0: F2(function(sampArg_, sampArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "samp"
        }), _List_fromArray([sampArg_, sampArg_0]));
      }),
      h9: F2(function(sectionArg_, sectionArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "section"
        }), _List_fromArray([sectionArg_, sectionArg_0]));
      }),
      ib: F2(function(selectArg_, selectArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "select"
        }), _List_fromArray([selectArg_, selectArg_0]));
      }),
      ij: F2(function(smallArg_, smallArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "small"
        }), _List_fromArray([smallArg_, smallArg_0]));
      }),
      io: F2(function(sourceArg_, sourceArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "source"
        }), _List_fromArray([sourceArg_, sourceArg_0]));
      }),
      is: F2(function(spanArg_, spanArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "span"
        }), _List_fromArray([spanArg_, spanArg_0]));
      }),
      iD: F2(function(strongArg_, strongArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "strong"
        }), _List_fromArray([strongArg_, strongArg_0]));
      }),
      iG: F2(function(subArg_, subArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "sub"
        }), _List_fromArray([subArg_, subArg_0]));
      }),
      iK: F2(function(summaryArg_, summaryArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "summary"
        }), _List_fromArray([summaryArg_, summaryArg_0]));
      }),
      iL: F2(function(supArg_, supArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "sup"
        }), _List_fromArray([supArg_, supArg_0]));
      }),
      iN: F2(function(tableArg_, tableArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "table"
        }), _List_fromArray([tableArg_, tableArg_0]));
      }),
      iT: F2(function(tbodyArg_, tbodyArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "tbody"
        }), _List_fromArray([tbodyArg_, tbodyArg_0]));
      }),
      iU: F2(function(tdArg_, tdArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "td"
        }), _List_fromArray([tdArg_, tdArg_0]));
      }),
      iW: function(textArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "text"
        }), _List_fromArray([textArg_]));
      },
      iX: F2(function(textareaArg_, textareaArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "textarea"
        }), _List_fromArray([textareaArg_, textareaArg_0]));
      }),
      iY: F2(function(tfootArg_, tfootArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "tfoot"
        }), _List_fromArray([tfootArg_, tfootArg_0]));
      }),
      iZ: F2(function(thArg_, thArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "th"
        }), _List_fromArray([thArg_, thArg_0]));
      }),
      i_: F2(function(theadArg_, theadArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "thead"
        }), _List_fromArray([theadArg_, theadArg_0]));
      }),
      i0: F2(function(timeArg_, timeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "time"
        }), _List_fromArray([timeArg_, timeArg_0]));
      }),
      ja: F2(function(trArg_, trArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "tr"
        }), _List_fromArray([trArg_, trArg_0]));
      }),
      jb: F2(function(trackArg_, trackArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "track"
        }), _List_fromArray([trackArg_, trackArg_0]));
      }),
      jk: F2(function(uArg_, uArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "u"
        }), _List_fromArray([uArg_, uArg_0]));
      }),
      jl: F2(function(ulArg_, ulArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "ul"
        }), _List_fromArray([ulArg_, ulArg_0]));
      }),
      jv: F2(function(varArg_, varArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "var"
        }), _List_fromArray([varArg_, varArg_0]));
      }),
      jw: F2(function(videoArg_, videoArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "video"
        }), _List_fromArray([videoArg_, videoArg_0]));
      }),
      jz: F2(function(wbrArg_, wbrArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html"]),
          j: "wbr"
        }), _List_fromArray([wbrArg_, wbrArg_0]));
      })
    };
    var $author$project$Gen$Ui$call_ = {
      cn: function(aboveArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "above"
        }), _List_fromArray([aboveArg_]));
      },
      cK: F2(function(attrIfArg_, attrIfArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$bool,
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "attrIf"
        }), _List_fromArray([attrIfArg_, attrIfArg_0]));
      }),
      cM: function(attrsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "attrs"
        }), _List_fromArray([attrsArg_]));
      },
      bB: function(backgroundArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "background"
        }), _List_fromArray([backgroundArg_]));
      },
      cT: function(backgroundGradientArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "backgroundGradient"
        }), _List_fromArray([backgroundGradientArg_]));
      },
      cW: function(behindContentArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "behindContent"
        }), _List_fromArray([behindContentArg_]));
      },
      cX: function(belowArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "below"
        }), _List_fromArray([belowArg_]));
      },
      c0: function(borderArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "border"
        }), _List_fromArray([borderArg_]));
      },
      c1: function(borderColorArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "borderColor"
        }), _List_fromArray([borderColorArg_]));
      },
      c2: function(borderGradientArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("gradient", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil)),
              _Utils_Tuple2("background", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "borderGradient"
        }), _List_fromArray([borderGradientArg_]));
      },
      c3: function(borderWithArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Edges", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "borderWith"
        }), _List_fromArray([borderWithArg_]));
      },
      dm: F2(function(columnArg_, columnArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "column"
        }), _List_fromArray([columnArg_, columnArg_0]));
      }),
      dQ: function(downArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "down"
        }), _List_fromArray([downArg_]));
      },
      dR: function(downloadArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "download"
        }), _List_fromArray([downloadArg_]));
      },
      dS: function(downloadAsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("filename", $mdgriffith$elm_codegen$Elm$Annotation$string)
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "downloadAs"
        }), _List_fromArray([downloadAsArg_]));
      },
      d_: F2(function(elArg_, elArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "el"
        }), _List_fromArray([elArg_, elArg_0]));
      }),
      ea: function(explainArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Todo", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "explain"
        }), _List_fromArray([explainArg_]));
      },
      eT: function(heightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "height"
        }), _List_fromArray([heightArg_]));
      },
      eU: function(heightMaxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "heightMax"
        }), _List_fromArray([heightMaxArg_]));
      },
      eV: function(heightMinArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "heightMin"
        }), _List_fromArray([heightMinArg_]));
      },
      ll: function(htmlArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "html"
        }), _List_fromArray([htmlArg_]));
      },
      e_: function(htmlAttributeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "htmlAttribute"
        }), _List_fromArray([htmlAttributeArg_]));
      },
      e4: function(idArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "id"
        }), _List_fromArray([idArg_]));
      },
      e6: F2(function(imageArg_, imageArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("source", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("description", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("onLoad", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "image"
        }), _List_fromArray([imageArg_, imageArg_0]));
      }),
      e7: F2(function(imageWithFallbackArg_, imageWithFallbackArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("source", $mdgriffith$elm_codegen$Elm$Annotation$string),
              _Utils_Tuple2("fallback", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
              ])))
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "imageWithFallback"
        }), _List_fromArray([imageWithFallbackArg_, imageWithFallbackArg_0]));
      }),
      e9: function(inFrontArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "inFront"
        }), _List_fromArray([inFrontArg_]));
      },
      fC: F3(function(layoutArg_, layoutArg_0, layoutArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "layout"
        }), _List_fromArray([layoutArg_, layoutArg_0, layoutArg_1]));
      }),
      fE: function(leftArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "left"
        }), _List_fromArray([leftArg_]));
      },
      fM: function(linkArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "link"
        }), _List_fromArray([linkArg_]));
      },
      fN: function(linkNewTabArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "linkNewTab"
        }), _List_fromArray([linkNewTabArg_]));
      },
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      f1: F2(function(mapAttributeArg_, mapAttributeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("b")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "mapAttribute"
        }), _List_fromArray([mapAttributeArg_, mapAttributeArg_0]));
      }),
      go: function(moveArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "move"
        }), _List_fromArray([moveArg_]));
      },
      gx: F3(function(nodeArg_, nodeArg_0, nodeArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "node"
        }), _List_fromArray([nodeArg_, nodeArg_0, nodeArg_1]));
      }),
      gI: function(onLeftArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "onLeft"
        }), _List_fromArray([onLeftArg_]));
      },
      gK: function(onRightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "onRight"
        }), _List_fromArray([onRightArg_]));
      },
      gN: function(opacityArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "opacity"
        }), _List_fromArray([opacityArg_]));
      },
      gX: function(paddingArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "padding"
        }), _List_fromArray([paddingArg_]));
      },
      gY: function(paddingBottomArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingBottom"
        }), _List_fromArray([paddingBottomArg_]));
      },
      gZ: function(paddingLeftArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingLeft"
        }), _List_fromArray([paddingLeftArg_]));
      },
      g_: function(paddingRightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingRight"
        }), _List_fromArray([paddingRightArg_]));
      },
      g$: function(paddingTopArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingTop"
        }), _List_fromArray([paddingTopArg_]));
      },
      g0: function(paddingWithArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Edges", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingWith"
        }), _List_fromArray([paddingWithArg_]));
      },
      g1: F2(function(paddingXYArg_, paddingXYArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "paddingXY"
        }), _List_fromArray([paddingXYArg_, paddingXYArg_0]));
      }),
      hf: function(portionArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "portion"
        }), _List_fromArray([portionArg_]));
      },
      ht: function(pxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "px"
        }), _List_fromArray([pxArg_]));
      },
      hw: function(radiansArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "radians"
        }), _List_fromArray([radiansArg_]));
      },
      hQ: F3(function(rgbArg_, rgbArg_0, rgbArg_1) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "rgb"
        }), _List_fromArray([rgbArg_, rgbArg_0, rgbArg_1]));
      }),
      hR: F4(function(rgbaArg_, rgbaArg_0, rgbaArg_1, rgbaArg_2) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "rgba"
        }), _List_fromArray([rgbaArg_, rgbaArg_0, rgbaArg_1, rgbaArg_2]));
      }),
      hS: function(rightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "right"
        }), _List_fromArray([rightArg_]));
      },
      hT: function(rotateArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "rotate"
        }), _List_fromArray([rotateArg_]));
      },
      hU: function(roundedArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "rounded"
        }), _List_fromArray([roundedArg_]));
      },
      hV: function(roundedWithArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("topLeft", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("topRight", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("bottomLeft", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("bottomRight", $mdgriffith$elm_codegen$Elm$Annotation$int)
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "roundedWith"
        }), _List_fromArray([roundedWithArg_]));
      },
      mu: F2(function(rowArg_, rowArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))),
            $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "row"
        }), _List_fromArray([rowArg_, rowArg_0]));
      }),
      h5: function(scaleArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "scale"
        }), _List_fromArray([scaleArg_]));
      },
      iq: function(spacingArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "spacing"
        }), _List_fromArray([spacingArg_]));
      },
      ir: function(spacingWithArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("horizontal", $mdgriffith$elm_codegen$Elm$Annotation$int),
              _Utils_Tuple2("vertical", $mdgriffith$elm_codegen$Elm$Annotation$int)
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "spacingWith"
        }), _List_fromArray([spacingWithArg_]));
      },
      iW: function(textArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "text"
        }), _List_fromArray([textArg_]));
      },
      jh: function(turnsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "turns"
        }), _List_fromArray([turnsArg_]));
      },
      jq: function(upArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
          i: _List_fromArray(["Ui"]),
          j: "up"
        }), _List_fromArray([upArg_]));
      },
      jB: function(widthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "width"
        }), _List_fromArray([widthArg_]));
      },
      jC: function(widthMaxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "widthMax"
        }), _List_fromArray([widthMaxArg_]));
      },
      jD: function(widthMinArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "widthMin"
        }), _List_fromArray([widthMinArg_]));
      },
      jE: F2(function(withAnimationArg_, withAnimationArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
              _Utils_Tuple2("toMsg", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
                A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Msg", _List_Nil)
              ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))),
              _Utils_Tuple2("state", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "State", _List_Nil))
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "withAnimation"
        }), _List_fromArray([withAnimationArg_, withAnimationArg_0]));
      }),
      jF: F2(function(withBreakpointsArg_, withBreakpointsArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui", "Responsive"]), "Breakpoints", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("label")
            ])),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "withBreakpoints"
        }), _List_fromArray([withBreakpointsArg_, withBreakpointsArg_0]));
      }),
      jJ: function(withNoStylesheetArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Ui"]),
          j: "withNoStylesheet"
        }), _List_fromArray([withNoStylesheetArg_]));
      }
    };
    var $author$project$Theme$Generate$Ui$classAttr = F2(function(target, name) {
      if (!target) {
        return $author$project$Gen$Html$Attributes$class(name);
      } else {
        return $author$project$Gen$Ui$htmlAttribute($author$project$Gen$Html$Attributes$class(name));
      }
    });
    var $author$project$Gen$Ui$Accessibility$h1 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h1"
    });
    var $author$project$Gen$Ui$Accessibility$h2 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h2"
    });
    var $author$project$Gen$Ui$Accessibility$h3 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h3"
    });
    var $author$project$Gen$Ui$Accessibility$h4 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h4"
    });
    var $author$project$Gen$Ui$Accessibility$h5 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h5"
    });
    var $author$project$Gen$Ui$Accessibility$h6 = $mdgriffith$elm_codegen$Elm$value({
      h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
      ]))),
      i: _List_fromArray(["Ui", "Accessibility"]),
      j: "h6"
    });
    var $author$project$Theme$Generate$Ui$getHeaderAttr = function(cls) {
      return A3($elm$core$List$foldl, F2(function(val, found) {
        if (found.$ === 1) {
          switch (val) {
            case "h1":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h1);
            case "h2":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h2);
            case "h3":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h3);
            case "h4":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h4);
            case "h5":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h5);
            case "h6":
              return $elm$core$Maybe$Just($author$project$Gen$Ui$Accessibility$h6);
            default:
              return $elm$core$Maybe$Nothing;
          }
        } else {
          return found;
        }
      }), $elm$core$Maybe$Nothing, A2($elm$core$String$split, "-", cls));
    };
    var $author$project$Theme$nameToString = function(_v0) {
      var name = _v0;
      return name;
    };
    var $author$project$Theme$Generate$Ui$toHtmlHeaderNode = function(typeface) {
      var _v0 = $author$project$Theme$nameToString(typeface.j);
      switch (_v0) {
        case "h1":
          return $author$project$Gen$Html$call_.eK;
        case "h2":
          return $author$project$Gen$Html$call_.eL;
        case "h3":
          return $author$project$Gen$Html$call_.eM;
        case "h4":
          return $author$project$Gen$Html$call_.eN;
        case "h5":
          return $author$project$Gen$Html$call_.eO;
        case "h6":
          return $author$project$Gen$Html$call_.eP;
        default:
          return $author$project$Gen$Html$call_.dO;
      }
    };
    var $author$project$Theme$weightNameToString = function(weightName) {
      switch (weightName) {
        case 0:
          return "";
        case 1:
          return "-reg";
        case 2:
          return "-bold";
        default:
          return "-light";
      }
    };
    var $author$project$Theme$Generate$Ui$typographyClassName = F2(function(name, weight) {
      return "font-" + ($author$project$Theme$nameToString(name) + $author$project$Theme$weightNameToString(weight));
    });
    var $author$project$Theme$weightNameField = function(weightName) {
      switch (weightName) {
        case 0:
          return "default";
        case 1:
          return "regular";
        case 2:
          return "bold";
        default:
          return "light";
      }
    };
    var $author$project$Theme$Generate$Ui$generateTextElements = function(theme) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Theme", "Text"]), A3($elm$core$Dict$foldl, F3(function(name, fields, typographyRecord) {
        if (!fields.b) {
          return typographyRecord;
        } else {
          if (!fields.b.b) {
            var single = fields.a;
            return A2($elm$core$List$cons, $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, name, single.b)), typographyRecord);
          } else {
            var many = fields;
            var _new = $mdgriffith$elm_codegen$Elm$group(A2($elm$core$List$map, function(_v5) {
              var innerName = _v5.a;
              var body = _v5.b;
              return $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, _Utils_ap(name, $author$project$Theme$Generate$Ui$capitalize(innerName)), body));
            }, many));
            return A2($elm$core$List$cons, _new, typographyRecord);
          }
        }
      }), _List_Nil, A3($elm$core$List$foldr, F2(function(typeface, gathered) {
        var innerName = $author$project$Theme$weightNameField(typeface.lt.m6.a);
        var fullClassName = A2($author$project$Theme$Generate$Ui$addNamespace, theme.aR, A2($author$project$Theme$Generate$Ui$typographyClassName, typeface.j, typeface.lt.m6.a));
        var fullClassAttr = A2($author$project$Theme$Generate$Ui$classAttr, theme.iS, fullClassName);
        var basename = $author$project$Theme$nameToString(typeface.j);
        var addAcccessibilityAttrs = function(attrs) {
          var _v3 = $author$project$Theme$Generate$Ui$getHeaderAttr(fullClassName);
          if (_v3.$ === 1) {
            return attrs;
          } else {
            var headerAttr = _v3.a;
            return A2($mdgriffith$elm_codegen$Elm$Op$cons, headerAttr, attrs);
          }
        };
        var elFn = function() {
          var _v2 = theme.iS;
          if (!_v2) {
            return A3($mdgriffith$elm_codegen$Elm$fn2, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "attrs", $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Gen$Html$annotation_.j1($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "child", $mdgriffith$elm_codegen$Elm$Annotation$string), F2(function(attrs, child) {
              return A3($author$project$Theme$Generate$Ui$toHtmlHeaderNode, typeface, A2($mdgriffith$elm_codegen$Elm$Op$cons, fullClassAttr, attrs), $mdgriffith$elm_codegen$Elm$list(_List_fromArray([
                $author$project$Gen$Html$call_.iW(child)
              ])));
            }));
          } else {
            return A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "child", $mdgriffith$elm_codegen$Elm$Annotation$string), F2(function(attrs, child) {
              return A2($author$project$Gen$Ui$call_.d_, addAcccessibilityAttrs(A2($mdgriffith$elm_codegen$Elm$Op$cons, fullClassAttr, attrs)), $author$project$Gen$Ui$call_.iW(child));
            }));
          }
        }();
        var _v0 = typeface.lt.m6.a;
        if (!_v0) {
          return A3($elm$core$Dict$insert, basename, _List_fromArray([
            _Utils_Tuple2(innerName, elFn)
          ]), gathered);
        } else {
          return A3($elm$core$Dict$update, basename, function(maybe) {
            if (!maybe.$) {
              var fields = maybe.a;
              return $elm$core$Maybe$Just(A2($elm$core$List$cons, _Utils_Tuple2(innerName, elFn), fields));
            } else {
              return $elm$core$Maybe$Just(_List_fromArray([
                _Utils_Tuple2(innerName, elFn)
              ]));
            }
          }, gathered);
        }
      }), $elm$core$Dict$empty, theme.mW)));
    };
    var $author$project$Theme$Generate$Ui$All = 0;
    var $author$project$Theme$Generate$Ui$Bottom = 3;
    var $author$project$Theme$Generate$Ui$Left = 4;
    var $author$project$Theme$Generate$Ui$Right = 2;
    var $author$project$Theme$Generate$Ui$Top = 1;
    var $author$project$Gen$Ui$moduleName_ = _List_fromArray(["Ui"]);
    var $author$project$Gen$Ui$annotation_ = {
      jW: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Angle", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Style2"]), "Angle", _List_Nil)),
      j1: function(attributeArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Attribute", _List_fromArray([attributeArg0]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Model2"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])));
      },
      kw: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Color", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Style2"]), "Color", _List_Nil)),
      dZ: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Edges", _List_Nil, $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("top", $mdgriffith$elm_codegen$Elm$Annotation$int),
        _Utils_Tuple2("right", $mdgriffith$elm_codegen$Elm$Annotation$int),
        _Utils_Tuple2("bottom", $mdgriffith$elm_codegen$Elm$Annotation$int),
        _Utils_Tuple2("left", $mdgriffith$elm_codegen$Elm$Annotation$int)
      ]))),
      d$: function(elementArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Element", _List_fromArray([elementArg0]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Model2"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])));
      },
      eH: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Gradient", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Style2"]), "Gradient", _List_Nil)),
      fG: A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil),
      lM: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Msg", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Model2"]), "Msg", _List_Nil)),
      l2: function(optionsArg0) {
        return A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Options", _List_fromArray([optionsArg0]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Model2"]), "Options", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])));
      },
      hg: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "Position", _List_Nil, $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
        _Utils_Tuple2("x", $mdgriffith$elm_codegen$Elm$Annotation$int),
        _Utils_Tuple2("y", $mdgriffith$elm_codegen$Elm$Annotation$int),
        _Utils_Tuple2("z", $mdgriffith$elm_codegen$Elm$Annotation$int)
      ]))),
      iA: A4($mdgriffith$elm_codegen$Elm$Annotation$alias, $author$project$Gen$Ui$moduleName_, "State", _List_Nil, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Internal", "Model2"]), "State", _List_Nil))
    };
    var $author$project$Theme$Generate$Ui$attrType = function(target) {
      if (!target) {
        return $author$project$Gen$Html$annotation_.j1($mdgriffith$elm_codegen$Elm$Annotation$var("msg"));
      } else {
        return $author$project$Gen$Ui$annotation_.j1($mdgriffith$elm_codegen$Elm$Annotation$var("msg"));
      }
    };
    var $author$project$Theme$Generate$Ui$attrBorderWidthsType = function(target) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "BorderWidths", _List_fromArray([
        $author$project$Theme$Generate$Ui$attrType(target)
      ]));
    };
    var $author$project$Gen$Html$Attributes$call_ = {
      co: function(acceptArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "accept"
        }), _List_fromArray([acceptArg_]));
      },
      cp: function(acceptCharsetArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "acceptCharset"
        }), _List_fromArray([acceptCharsetArg_]));
      },
      cq: function(accesskeyArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "accesskey"
        }), _List_fromArray([accesskeyArg_]));
      },
      cr: function(actionArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "action"
        }), _List_fromArray([actionArg_]));
      },
      cv: function(alignArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "align"
        }), _List_fromArray([alignArg_]));
      },
      cx: function(altArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "alt"
        }), _List_fromArray([altArg_]));
      },
      j1: F2(function(attributeArg_, attributeArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "attribute"
        }), _List_fromArray([attributeArg_, attributeArg_0]));
      }),
      cO: function(autocompleteArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "autocomplete"
        }), _List_fromArray([autocompleteArg_]));
      },
      cP: function(autofocusArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "autofocus"
        }), _List_fromArray([autofocusArg_]));
      },
      cQ: function(autoplayArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "autoplay"
        }), _List_fromArray([autoplayArg_]));
      },
      db: function(checkedArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "checked"
        }), _List_fromArray([checkedArg_]));
      },
      dd: function(citeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "cite"
        }), _List_fromArray([citeArg_]));
      },
      de: function(classArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "class"
        }), _List_fromArray([classArg_]));
      },
      df: function(classListArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$list(A2($mdgriffith$elm_codegen$Elm$Annotation$tuple, $mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$bool))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "classList"
        }), _List_fromArray([classListArg_]));
      },
      dk: function(colsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "cols"
        }), _List_fromArray([colsArg_]));
      },
      dl: function(colspanArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "colspan"
        }), _List_fromArray([colspanArg_]));
      },
      dr: function(contenteditableArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "contenteditable"
        }), _List_fromArray([contenteditableArg_]));
      },
      dt: function(contextmenuArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "contextmenu"
        }), _List_fromArray([contextmenuArg_]));
      },
      du: function(controlsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "controls"
        }), _List_fromArray([controlsArg_]));
      },
      dv: function(coordsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "coords"
        }), _List_fromArray([coordsArg_]));
      },
      dy: function(datetimeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "datetime"
        }), _List_fromArray([datetimeArg_]));
      },
      dE: function(defaultArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "default"
        }), _List_fromArray([defaultArg_]));
      },
      dL: function(dirArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "dir"
        }), _List_fromArray([dirArg_]));
      },
      dM: function(disabledArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "disabled"
        }), _List_fromArray([disabledArg_]));
      },
      dR: function(downloadArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "download"
        }), _List_fromArray([downloadArg_]));
      },
      dT: function(draggableArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "draggable"
        }), _List_fromArray([draggableArg_]));
      },
      dX: function(dropzoneArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "dropzone"
        }), _List_fromArray([dropzoneArg_]));
      },
      d3: function(enctypeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "enctype"
        }), _List_fromArray([enctypeArg_]));
      },
      er: function(forArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "for"
        }), _List_fromArray([forArg_]));
      },
      es: function(formArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "form"
        }), _List_fromArray([formArg_]));
      },
      eS: function(headersArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "headers"
        }), _List_fromArray([headersArg_]));
      },
      eT: function(heightArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "height"
        }), _List_fromArray([heightArg_]));
      },
      eW: function(hiddenArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "hidden"
        }), _List_fromArray([hiddenArg_]));
      },
      eY: function(hrefArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "href"
        }), _List_fromArray([hrefArg_]));
      },
      eZ: function(hreflangArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "hreflang"
        }), _List_fromArray([hreflangArg_]));
      },
      e4: function(idArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "id"
        }), _List_fromArray([idArg_]));
      },
      fq: function(ismapArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "ismap"
        }), _List_fromArray([ismapArg_]));
      },
      fr: function(itempropArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "itemprop"
        }), _List_fromArray([itempropArg_]));
      },
      fy: function(kindArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "kind"
        }), _List_fromArray([kindArg_]));
      },
      fB: function(langArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "lang"
        }), _List_fromArray([langArg_]));
      },
      fO: function(listArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "list"
        }), _List_fromArray([listArg_]));
      },
      fS: function(loopArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "loop"
        }), _List_fromArray([loopArg_]));
      },
      fU: function(manifestArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "manifest"
        }), _List_fromArray([manifestArg_]));
      },
      fV: F2(function(mapArg_, mapArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg")),
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]))
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "map"
        }), _List_fromArray([mapArg_, mapArg_0]));
      }),
      lF: function(maxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "max"
        }), _List_fromArray([maxArg_]));
      },
      ga: function(maxlengthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "maxlength"
        }), _List_fromArray([maxlengthArg_]));
      },
      gc: function(mediaArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "media"
        }), _List_fromArray([mediaArg_]));
      },
      gi: function(methodArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "method"
        }), _List_fromArray([methodArg_]));
      },
      gj: function(minArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "min"
        }), _List_fromArray([minArg_]));
      },
      gl: function(minlengthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "minlength"
        }), _List_fromArray([minlengthArg_]));
      },
      gp: function(multipleArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "multiple"
        }), _List_fromArray([multipleArg_]));
      },
      j: function(nameArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "name"
        }), _List_fromArray([nameArg_]));
      },
      gz: function(novalidateArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "novalidate"
        }), _List_fromArray([novalidateArg_]));
      },
      g7: function(patternArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "pattern"
        }), _List_fromArray([patternArg_]));
      },
      hd: function(pingArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "ping"
        }), _List_fromArray([pingArg_]));
      },
      he: function(placeholderArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "placeholder"
        }), _List_fromArray([placeholderArg_]));
      },
      hh: function(posterArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "poster"
        }), _List_fromArray([posterArg_]));
      },
      hj: function(preloadArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "preload"
        }), _List_fromArray([preloadArg_]));
      },
      hp: F2(function(propertyArg_, propertyArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$string,
            A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
          ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "property"
        }), _List_fromArray([propertyArg_, propertyArg_0]));
      }),
      hq: function(pubdateArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "pubdate"
        }), _List_fromArray([pubdateArg_]));
      },
      hz: function(readonlyArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "readonly"
        }), _List_fromArray([readonlyArg_]));
      },
      hD: function(relArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "rel"
        }), _List_fromArray([relArg_]));
      },
      hL: function(requiredArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "required"
        }), _List_fromArray([requiredArg_]));
      },
      hP: function(reversedArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "reversed"
        }), _List_fromArray([reversedArg_]));
      },
      hW: function(rowsArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "rows"
        }), _List_fromArray([rowsArg_]));
      },
      hX: function(rowspanArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "rowspan"
        }), _List_fromArray([rowspanArg_]));
      },
      h1: function(sandboxArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "sandbox"
        }), _List_fromArray([sandboxArg_]));
      },
      h7: function(scopeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "scope"
        }), _List_fromArray([scopeArg_]));
      },
      ic: function(selectedArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "selected"
        }), _List_fromArray([selectedArg_]));
      },
      $8: function(shapeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "shape"
        }), _List_fromArray([shapeArg_]));
      },
      ih: function(sizeArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "size"
        }), _List_fromArray([sizeArg_]));
      },
      it: function(spellcheckArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "spellcheck"
        }), _List_fromArray([spellcheckArg_]));
      },
      iv: function(srcArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "src"
        }), _List_fromArray([srcArg_]));
      },
      iw: function(srcdocArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "srcdoc"
        }), _List_fromArray([srcdocArg_]));
      },
      ix: function(srclangArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "srclang"
        }), _List_fromArray([srclangArg_]));
      },
      iy: function(startArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "start"
        }), _List_fromArray([startArg_]));
      },
      iB: function(stepArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "step"
        }), _List_fromArray([stepArg_]));
      },
      iE: F2(function(styleArg_, styleArg_0) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "style"
        }), _List_fromArray([styleArg_, styleArg_0]));
      }),
      iM: function(tabindexArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "tabindex"
        }), _List_fromArray([tabindexArg_]));
      },
      iS: function(targetArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "target"
        }), _List_fromArray([targetArg_]));
      },
      mR: function(titleArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "title"
        }), _List_fromArray([titleArg_]));
      },
      ji: function(type_Arg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "type_"
        }), _List_fromArray([type_Arg_]));
      },
      js: function(usemapArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "usemap"
        }), _List_fromArray([usemapArg_]));
      },
      jt: function(valueArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "value"
        }), _List_fromArray([valueArg_]));
      },
      jB: function(widthArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "width"
        }), _List_fromArray([widthArg_]));
      },
      jM: function(wrapArg_) {
        return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
          h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))),
          i: _List_fromArray(["Html", "Attributes"]),
          j: "wrap"
        }), _List_fromArray([wrapArg_]));
      }
    };
    var $author$project$Theme$Generate$Ui$sideToString = function(side) {
      switch (side) {
        case 0:
          return "all";
        case 1:
          return "top";
        case 2:
          return "right";
        case 3:
          return "bottom";
        default:
          return "left";
      }
    };
    var $author$project$Theme$Generate$Ui$toBorder = F3(function(target, side, widthInt) {
      if (!target) {
        if (!side) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-" + ($author$project$Theme$Generate$Ui$sideToString(side) + "-width")), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px")));
        } else {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-" + ($author$project$Theme$Generate$Ui$sideToString(side) + "-width")), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px")));
        }
      } else {
        if (!side) {
          return $author$project$Gen$Ui$call_.c0(widthInt);
        } else {
          return $author$project$Gen$Ui$htmlAttribute(A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-" + ($author$project$Theme$Generate$Ui$sideToString(side) + "-width")), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px"))));
        }
      }
    });
    var $author$project$Theme$Generate$Ui$border = F2(function(target, side) {
      return A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "width", $mdgriffith$elm_codegen$Elm$Annotation$int), A2($author$project$Theme$Generate$Ui$toBorder, target, side));
    });
    var $author$project$Theme$Generate$Ui$toBorderRadius = F3(function(target, side, widthInt) {
      if (!target) {
        if (!side) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-width"), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px")));
        } else {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-" + ($author$project$Theme$Generate$Ui$sideToString(side) + "-width")), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px")));
        }
      } else {
        if (!side) {
          return $author$project$Gen$Ui$call_.c0(widthInt);
        } else {
          return $author$project$Gen$Ui$htmlAttribute(A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("border-" + ($author$project$Theme$Generate$Ui$sideToString(side) + "-width")), A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(widthInt), $mdgriffith$elm_codegen$Elm$string("px"))));
        }
      }
    });
    var $author$project$Theme$Generate$Ui$field = F2(function(named, toVal) {
      return _Utils_Tuple2($author$project$Theme$nameToString(named.j), toVal(named.lt));
    });
    var $author$project$Theme$Generate$Ui$toFields = F2(function(toExp, fields) {
      return A2($elm$core$List$map, function(item) {
        return A2($author$project$Theme$Generate$Ui$field, item, toExp);
      }, fields);
    });
    var $author$project$Theme$Generate$Ui$toFieldsType = F2(function(toType, fields) {
      return $mdgriffith$elm_codegen$Elm$Annotation$record(A2($elm$core$List$map, function(named) {
        return _Utils_Tuple2($author$project$Theme$nameToString(named.j), toType(named.lt));
      }, fields));
    });
    var $author$project$Theme$Generate$Ui$borders = function(theme) {
      return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$alias, "BorderWidths", A2($author$project$Theme$Generate$Ui$toFieldsType, function(_v0) {
          return $mdgriffith$elm_codegen$Elm$Annotation$var("item");
        }, theme.kc)),
        A2($mdgriffith$elm_codegen$Elm$declaration, "mapBorderWidths", A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("f"), function(f) {
          return $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(s) {
            return A2($mdgriffith$elm_codegen$Elm$apply, f, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$int(s)
            ]));
          }, theme.kc));
        })),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "borderWidth", $mdgriffith$elm_codegen$Elm$record($elm$core$List$concat(_List_fromArray([
          A2($author$project$Theme$Generate$Ui$toFields, function(_int) {
            return A3($author$project$Theme$Generate$Ui$toBorder, theme.iS, 0, $mdgriffith$elm_codegen$Elm$int(_int));
          }, theme.kc),
          _List_fromArray([
            _Utils_Tuple2("top", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrBorderWidthsType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapBorderWidths"), _List_fromArray([
              A2($author$project$Theme$Generate$Ui$border, theme.iS, 1)
            ])))),
            _Utils_Tuple2("right", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrBorderWidthsType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapBorderWidths"), _List_fromArray([
              A2($author$project$Theme$Generate$Ui$border, theme.iS, 2)
            ])))),
            _Utils_Tuple2("bottom", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrBorderWidthsType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapBorderWidths"), _List_fromArray([
              A2($author$project$Theme$Generate$Ui$border, theme.iS, 3)
            ])))),
            _Utils_Tuple2("left", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrBorderWidthsType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapBorderWidths"), _List_fromArray([
              A2($author$project$Theme$Generate$Ui$border, theme.iS, 4)
            ]))))
          ])
        ]))))),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "borderRadius", $mdgriffith$elm_codegen$Elm$record($elm$core$List$concat(_List_fromArray([
          A2($author$project$Theme$Generate$Ui$toFields, function(_int) {
            return A3($author$project$Theme$Generate$Ui$toBorderRadius, theme.iS, 0, $mdgriffith$elm_codegen$Elm$int(_int));
          }, theme.kb),
          _List_fromArray([
            _Utils_Tuple2("top", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(radii) {
              return A3($author$project$Theme$Generate$Ui$toBorderRadius, theme.iS, 1, $mdgriffith$elm_codegen$Elm$int(radii));
            }, theme.kb))),
            _Utils_Tuple2("right", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(radii) {
              return A3($author$project$Theme$Generate$Ui$toBorderRadius, theme.iS, 2, $mdgriffith$elm_codegen$Elm$int(radii));
            }, theme.kb))),
            _Utils_Tuple2("bottom", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(radii) {
              return A3($author$project$Theme$Generate$Ui$toBorderRadius, theme.iS, 3, $mdgriffith$elm_codegen$Elm$int(radii));
            }, theme.kb))),
            _Utils_Tuple2("left", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(radii) {
              return A3($author$project$Theme$Generate$Ui$toBorderRadius, theme.iS, 4, $mdgriffith$elm_codegen$Elm$int(radii));
            }, theme.kb)))
          ])
        ])))))
      ]));
    };
    var $author$project$Theme$Generate$Ui$helpers = function(theme) {
      var themeList = _List_fromArray([
        $elm$core$Maybe$Nothing,
        $elm$core$Maybe$Just("darkmode")
      ]);
      return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$customType, "Mode", A2($elm$core$List$map, function(maybe) {
          if (maybe.$ === 1) {
            return $mdgriffith$elm_codegen$Elm$variant("Default");
          } else {
            var name = maybe.a;
            return $mdgriffith$elm_codegen$Elm$variant($author$project$Theme$Generate$Ui$capitalize(name));
          }
        }, themeList))),
        $mdgriffith$elm_codegen$Elm$expose(A2($mdgriffith$elm_codegen$Elm$declaration, "setMode", A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "mode", A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Mode")), function(mode) {
          return A3($mdgriffith$elm_codegen$Elm$Case$custom, mode, A2($mdgriffith$elm_codegen$Elm$Annotation$named, _List_Nil, "Mode"), A2($elm$core$List$map, function(maybe) {
            if (maybe.$ === 1) {
              return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, "Default", 0), function(_v2) {
                return $author$project$Gen$Html$Attributes$class(theme.aR + "-automode");
              });
            } else {
              var modeName = maybe.a;
              return A2($mdgriffith$elm_codegen$Elm$Case$branch, A2($mdgriffith$elm_codegen$Elm$Arg$customType, $author$project$Theme$Generate$Ui$capitalize(modeName), 0), function(_v3) {
                return $author$project$Gen$Html$Attributes$class(theme.aR + ("-" + modeName));
              });
            }
          }, themeList));
        })))
      ]));
    };
    var $author$project$Gen$Ui$spacing = function(spacingArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "spacing"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$int(spacingArg_)
      ]));
    };
    var $author$project$Gen$Html$Attributes$style = F2(function(styleArg_, styleArg_0) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Html", "Attributes"]),
        j: "style"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$string(styleArg_),
        $mdgriffith$elm_codegen$Elm$string(styleArg_0)
      ]));
    });
    var $author$project$Theme$Generate$Ui$toSpacing = F2(function(target, _int) {
      if (!target) {
        return A2($author$project$Gen$Html$Attributes$style, "gap", $elm$core$String$fromInt(_int) + "px");
      } else {
        return $author$project$Gen$Ui$spacing(_int);
      }
    });
    var $author$project$Gen$Ui$values_ = {
      cn: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "above"
      }),
      jR: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "alignBottom"
      }),
      jS: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "alignLeft"
      }),
      jT: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "alignRight"
      }),
      jU: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "alignTop"
      }),
      cK: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$bool,
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "attrIf"
      }),
      cM: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "attrs"
      }),
      bB: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "background"
      }),
      cT: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "backgroundGradient"
      }),
      cW: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "behindContent"
      }),
      cX: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "below"
      }),
      c0: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "border"
      }),
      c1: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "borderColor"
      }),
      c2: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("gradient", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil)),
            _Utils_Tuple2("background", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Gradient", _List_Nil))
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "borderGradient"
      }),
      c3: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Edges", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "borderWith"
      }),
      km: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "centerX"
      }),
      kn: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "centerY"
      }),
      kp: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "circle"
      }),
      kq: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "clip"
      }),
      kr: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "clipWithEllipsis"
      }),
      ks: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "clipX"
      }),
      kt: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "clipY"
      }),
      dm: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "column"
      }),
      kB: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentBottom"
      }),
      kC: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentCenterX"
      }),
      kD: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentCenterY"
      }),
      kE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentLeft"
      }),
      kF: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentRight"
      }),
      kG: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "contentTop"
      }),
      dE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "default"
      }),
      dQ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "down"
      }),
      dR: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "download"
      }),
      dS: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
            _Utils_Tuple2("filename", $mdgriffith$elm_codegen$Elm$Annotation$string)
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "downloadAs"
      }),
      d_: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "el"
      }),
      ea: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Todo", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "explain"
      }),
      k4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)),
        i: _List_fromArray(["Ui"]),
        j: "fill"
      }),
      le: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "grab"
      }),
      lf: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "grabbing"
      }),
      eT: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "height"
      }),
      eU: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "heightMax"
      }),
      eV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "heightMin"
      }),
      ll: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "html"
      }),
      e_: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "htmlAttribute"
      }),
      e4: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "id"
      }),
      e6: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("source", $mdgriffith$elm_codegen$Elm$Annotation$string),
            _Utils_Tuple2("description", $mdgriffith$elm_codegen$Elm$Annotation$string),
            _Utils_Tuple2("onLoad", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("msg")))
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "image"
      }),
      e7: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("source", $mdgriffith$elm_codegen$Elm$Annotation$string),
            _Utils_Tuple2("fallback", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
              $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
            ])))
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "imageWithFallback"
      }),
      e9: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "inFront"
      }),
      fC: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])),
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Html"]), "Html", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "layout"
      }),
      fE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "left"
      }),
      fM: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "link"
      }),
      fN: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "linkNewTab"
      }),
      fV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("b")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "map"
      }),
      f1: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("b")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "mapAttribute"
      }),
      go: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "move"
      }),
      lP: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "noAttr"
      }),
      gx: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$string,
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "node"
      }),
      bW: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "none"
      }),
      gI: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "onLeft"
      }),
      gK: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "onRight"
      }),
      gN: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "opacity"
      }),
      gX: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "padding"
      }),
      gY: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingBottom"
      }),
      gZ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingLeft"
      }),
      g_: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingRight"
      }),
      g$: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingTop"
      }),
      g0: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Edges", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingWith"
      }),
      g1: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "paddingXY"
      }),
      l8: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "pointer"
      }),
      hf: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "portion"
      }),
      ht: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "px"
      }),
      hw: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "radians"
      }),
      hQ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "rgb"
      }),
      hR: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Color", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "rgba"
      }),
      hS: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "right"
      }),
      hT: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "rotate"
      }),
      hU: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "rounded"
      }),
      hV: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("topLeft", $mdgriffith$elm_codegen$Elm$Annotation$int),
            _Utils_Tuple2("topRight", $mdgriffith$elm_codegen$Elm$Annotation$int),
            _Utils_Tuple2("bottomLeft", $mdgriffith$elm_codegen$Elm$Annotation$int),
            _Utils_Tuple2("bottomRight", $mdgriffith$elm_codegen$Elm$Annotation$int)
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "roundedWith"
      }),
      mu: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))),
          $mdgriffith$elm_codegen$Elm$Annotation$list(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ])))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "row"
      }),
      h5: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "scale"
      }),
      mv: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "scrollable"
      }),
      mw: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "scrollableAll"
      }),
      mx: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "scrollableX"
      }),
      mB: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)),
        i: _List_fromArray(["Ui"]),
        j: "shrink"
      }),
      mD: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "spaceEvenly"
      }),
      iq: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "spacing"
      }),
      ir: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("horizontal", $mdgriffith$elm_codegen$Elm$Annotation$int),
            _Utils_Tuple2("vertical", $mdgriffith$elm_codegen$Elm$Annotation$int)
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "spacingWith"
      }),
      iW: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Element", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "text"
      }),
      jh: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Angle", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "turns"
      }),
      jq: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Position", _List_Nil))),
        i: _List_fromArray(["Ui"]),
        j: "up"
      }),
      jB: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Length", _List_Nil)
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "width"
      }),
      jC: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "widthMax"
      }),
      jD: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "widthMin"
      }),
      jE: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("toMsg", A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
              A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Msg", _List_Nil)
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("msg"))),
            _Utils_Tuple2("state", A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "State", _List_Nil))
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "withAnimation"
      }),
      jF: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui", "Responsive"]), "Breakpoints", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("label")
          ])),
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "withBreakpoints"
      }),
      jJ: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([
          A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
            $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
          ]))
        ]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Options", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "withNoStylesheet"
      }),
      jM: $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ]))),
        i: _List_fromArray(["Ui"]),
        j: "wrap"
      })
    };
    var $author$project$Theme$Generate$Ui$layout = function(theme) {
      var _v0 = theme.iS;
      if (!_v0) {
        return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "el", A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), $mdgriffith$elm_codegen$Elm$Arg$var("child"), F2(function(attrs, child) {
            return A2($author$project$Gen$Html$call_.dO, attrs, $mdgriffith$elm_codegen$Elm$list(_List_fromArray([child])));
          })))),
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "row", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(space) {
            return A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), $mdgriffith$elm_codegen$Elm$Arg$var("children"), F2(function(attrs, children) {
              return A2($author$project$Gen$Html$call_.dO, A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Gen$Html$Attributes$style, "flex-direction", "row"), A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Gen$Html$Attributes$style, "display", "flex"), A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Theme$Generate$Ui$toSpacing, theme.iS, space), attrs))), children);
            }));
          }, theme.iq)))),
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "column", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(space) {
            return A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), $mdgriffith$elm_codegen$Elm$Arg$var("children"), F2(function(attrs, children) {
              return A2($author$project$Gen$Html$call_.dO, A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Gen$Html$Attributes$style, "flex-direction", "column"), A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Gen$Html$Attributes$style, "display", "flex"), A2($mdgriffith$elm_codegen$Elm$Op$cons, A2($author$project$Theme$Generate$Ui$toSpacing, theme.iS, space), attrs))), children);
            }));
          }, theme.iq))))
        ]));
      } else {
        return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "el", $author$project$Gen$Ui$values_.d_)),
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "row", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(space) {
            return A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), $mdgriffith$elm_codegen$Elm$Arg$var("children"), F2(function(attrs, children) {
              return A2($author$project$Gen$Ui$call_.mu, A2($mdgriffith$elm_codegen$Elm$Op$cons, $author$project$Gen$Ui$spacing(space), attrs), children);
            }));
          }, theme.iq)))),
          $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "column", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(space) {
            return A3($mdgriffith$elm_codegen$Elm$fn2, $mdgriffith$elm_codegen$Elm$Arg$var("attrs"), $mdgriffith$elm_codegen$Elm$Arg$var("children"), F2(function(attrs, children) {
              return A2($author$project$Gen$Ui$call_.dm, A2($mdgriffith$elm_codegen$Elm$Op$cons, $author$project$Gen$Ui$spacing(space), attrs), children);
            }));
          }, theme.iq))))
        ]));
      }
    };
    var $author$project$Theme$Generate$Ui$attr = F2(function(target, a) {
      return A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrType(target), a);
    });
    var $author$project$Theme$Generate$Ui$attrSpacingType = function(target) {
      return A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Spaced", _List_fromArray([
        $author$project$Theme$Generate$Ui$attrType(target)
      ]));
    };
    var $author$project$Theme$Generate$Ui$callPx = function(p) {
      return A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Gen$String$call_.ew(p), $mdgriffith$elm_codegen$Elm$string("px"));
    };
    var $author$project$Theme$Generate$Ui$padBottom = function(target) {
      if (!target) {
        return A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("px"), function(v) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("padding-bottom"), $author$project$Theme$Generate$Ui$callPx(v));
        });
      } else {
        return $author$project$Gen$Ui$values_.gY;
      }
    };
    var $author$project$Theme$Generate$Ui$padLeft = function(target) {
      if (!target) {
        return A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("px"), function(v) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("padding-left"), $author$project$Theme$Generate$Ui$callPx(v));
        });
      } else {
        return $author$project$Gen$Ui$values_.gZ;
      }
    };
    var $author$project$Theme$Generate$Ui$padRight = function(target) {
      if (!target) {
        return A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("px"), function(v) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("padding-right"), $author$project$Theme$Generate$Ui$callPx(v));
        });
      } else {
        return $author$project$Gen$Ui$values_.g_;
      }
    };
    var $author$project$Theme$Generate$Ui$padTop = function(target) {
      if (!target) {
        return A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("px"), function(v) {
          return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("padding-top"), $author$project$Theme$Generate$Ui$callPx(v));
        });
      } else {
        return $author$project$Gen$Ui$values_.g$;
      }
    };
    var $author$project$Gen$Ui$padding = function(paddingArg_) {
      return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$value({
        h: $elm$core$Maybe$Just(A2($mdgriffith$elm_codegen$Elm$Annotation$function, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_fromArray(["Ui"]), "Attribute", _List_fromArray([
          $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
        ])))),
        i: _List_fromArray(["Ui"]),
        j: "padding"
      }), _List_fromArray([
        $mdgriffith$elm_codegen$Elm$int(paddingArg_)
      ]));
    };
    var $author$project$Theme$Generate$Ui$px = function(p) {
      return $elm$core$String$fromInt(p) + "px";
    };
    var $author$project$Theme$Generate$Ui$padding = F2(function(target, _int) {
      if (!target) {
        return A2($author$project$Gen$Html$Attributes$style, "padding", $author$project$Theme$Generate$Ui$px(_int));
      } else {
        return $author$project$Gen$Ui$padding(_int);
      }
    });
    var $author$project$Theme$Generate$Ui$toPaddingXY = F3(function(target, x2, y2) {
      if (!target) {
        return A2($author$project$Gen$Html$Attributes$call_.iE, $mdgriffith$elm_codegen$Elm$string("padding"), A2($mdgriffith$elm_codegen$Elm$Op$append, A2($mdgriffith$elm_codegen$Elm$Op$append, $author$project$Theme$Generate$Ui$callPx(y2), $mdgriffith$elm_codegen$Elm$string(" ")), $author$project$Theme$Generate$Ui$callPx(x2)));
      } else {
        return A2($author$project$Gen$Ui$call_.g1, x2, y2);
      }
    });
    var $author$project$Theme$Generate$Ui$spacing = function(theme) {
      return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
        A2($mdgriffith$elm_codegen$Elm$declaration, "space", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, $mdgriffith$elm_codegen$Elm$int, theme.iq))),
        A2($mdgriffith$elm_codegen$Elm$declaration, "mapSpace", A2($mdgriffith$elm_codegen$Elm$fn, $mdgriffith$elm_codegen$Elm$Arg$var("f"), function(f) {
          return $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, function(s) {
            return A2($mdgriffith$elm_codegen$Elm$apply, f, _List_fromArray([
              $mdgriffith$elm_codegen$Elm$int(s)
            ]));
          }, theme.iq));
        })),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "gap", $mdgriffith$elm_codegen$Elm$record(A2($author$project$Theme$Generate$Ui$toFields, A2($elm$core$Basics$composeL, $author$project$Theme$Generate$Ui$attr(theme.iS), $author$project$Theme$Generate$Ui$toSpacing(theme.iS)), theme.iq)))),
        A2($mdgriffith$elm_codegen$Elm$alias, "Spaced", A2($author$project$Theme$Generate$Ui$toFieldsType, function(_v0) {
          return $mdgriffith$elm_codegen$Elm$Annotation$var("item");
        }, theme.iq)),
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "pad", $mdgriffith$elm_codegen$Elm$record(_Utils_ap(A2($author$project$Theme$Generate$Ui$toFields, A2($elm$core$Basics$composeL, $author$project$Theme$Generate$Ui$attr(theme.iS), $author$project$Theme$Generate$Ui$padding(theme.iS)), theme.iq), _List_fromArray([
          _Utils_Tuple2("xy", A2($mdgriffith$elm_codegen$Elm$withType, A3($mdgriffith$elm_codegen$Elm$Annotation$namedWith, _List_Nil, "Spaced", _List_fromArray([
            $author$project$Theme$Generate$Ui$attrSpacingType(theme.iS)
          ])), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
            A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "spacingX", $mdgriffith$elm_codegen$Elm$Annotation$int), function(spacingX) {
              return A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
                A2($mdgriffith$elm_codegen$Elm$fn, A2($mdgriffith$elm_codegen$Elm$Arg$varWith, "spacingY", $mdgriffith$elm_codegen$Elm$Annotation$int), function(spacingY) {
                  return A3($author$project$Theme$Generate$Ui$toPaddingXY, theme.iS, spacingX, spacingY);
                })
              ]));
            })
          ])))),
          _Utils_Tuple2("top", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrSpacingType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
            $author$project$Theme$Generate$Ui$padTop(theme.iS)
          ])))),
          _Utils_Tuple2("right", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrSpacingType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
            $author$project$Theme$Generate$Ui$padRight(theme.iS)
          ])))),
          _Utils_Tuple2("bottom", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrSpacingType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
            $author$project$Theme$Generate$Ui$padBottom(theme.iS)
          ])))),
          _Utils_Tuple2("left", A2($mdgriffith$elm_codegen$Elm$withType, $author$project$Theme$Generate$Ui$attrSpacingType(theme.iS), A2($mdgriffith$elm_codegen$Elm$apply, $mdgriffith$elm_codegen$Elm$val("mapSpace"), _List_fromArray([
            $author$project$Theme$Generate$Ui$padLeft(theme.iS)
          ]))))
        ])))))
      ]));
    };
    var $author$project$Theme$Generate$Ui$typography = function(theme) {
      return $mdgriffith$elm_codegen$Elm$group(_List_fromArray([
        $mdgriffith$elm_codegen$Elm$exposeConstructor(A2($mdgriffith$elm_codegen$Elm$declaration, "font", $mdgriffith$elm_codegen$Elm$record(A3($elm$core$Dict$foldl, F3(function(name, fields, typographyRecord) {
          if (!fields.b) {
            return typographyRecord;
          } else {
            if (!fields.b.b) {
              var single = fields.a;
              return A2($elm$core$List$cons, _Utils_Tuple2(name, single.b), typographyRecord);
            } else {
              var many = fields;
              return A2($elm$core$List$cons, _Utils_Tuple2(name, $mdgriffith$elm_codegen$Elm$record(many)), typographyRecord);
            }
          }
        }), _List_Nil, A3($elm$core$List$foldl, F2(function(typeface, gathered) {
          var innerName = $author$project$Theme$weightNameField(typeface.lt.m6.a);
          var fullClassName = A2($author$project$Theme$Generate$Ui$classAttr, theme.iS, A2($author$project$Theme$Generate$Ui$addNamespace, theme.aR, A2($author$project$Theme$Generate$Ui$typographyClassName, typeface.j, typeface.lt.m6.a)));
          var basename = $author$project$Theme$nameToString(typeface.j);
          var _v0 = typeface.lt.m6.a;
          if (!_v0) {
            return A3($elm$core$Dict$insert, basename, _List_fromArray([
              _Utils_Tuple2(innerName, fullClassName)
            ]), gathered);
          } else {
            return A3($elm$core$Dict$update, basename, function(maybe) {
              if (!maybe.$) {
                var fields = maybe.a;
                return $elm$core$Maybe$Just(A2($elm$core$List$cons, _Utils_Tuple2(innerName, fullClassName), fields));
              } else {
                return $elm$core$Maybe$Just(_List_fromArray([
                  _Utils_Tuple2(innerName, fullClassName)
                ]));
              }
            }, gathered);
          }
        }), $elm$core$Dict$empty, theme.mW)))))
      ]));
    };
    var $author$project$Theme$Generate$Ui$generateTheme = function(theme) {
      return A2($mdgriffith$elm_codegen$Elm$file, _List_fromArray(["Theme"]), _List_fromArray([
        $author$project$Theme$Generate$Ui$helpers(theme),
        $author$project$Theme$Generate$Ui$typography(theme),
        $author$project$Theme$Generate$Ui$layout(theme),
        $author$project$Theme$Generate$Ui$spacing(theme),
        $author$project$Theme$Generate$Ui$borders(theme)
      ]));
    };
    var $author$project$Theme$Generate$Stylesheet$ClassAll = function(a) {
      return { $: 3, a };
    };
    var $author$project$Theme$Generate$Stylesheet$Rule = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$classAll = F2(function(name, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, $author$project$Theme$Generate$Stylesheet$ClassAll(name), rules);
    });
    var $author$project$Theme$Generate$Stylesheet$Root = { $: 0 };
    var $author$project$Theme$Generate$Stylesheet$root = function(rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, $author$project$Theme$Generate$Stylesheet$Root, rules);
    };
    var $author$project$Theme$Generate$Stylesheet$Prop = function(a) {
      return { $: 2, a };
    };
    var $author$project$Theme$Generate$Stylesheet$Str = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$string = F2(function(key, value) {
      return $author$project$Theme$Generate$Stylesheet$Prop(A2($author$project$Theme$Generate$Stylesheet$Str, key, value));
    });
    var $avh4$elm_color$Color$toCssString = function(_v0) {
      var r = _v0.a;
      var g2 = _v0.b;
      var b = _v0.c;
      var a = _v0.d;
      var roundTo = function(x2) {
        return $elm$core$Basics$round(x2 * 1000) / 1000;
      };
      var pct = function(x2) {
        return $elm$core$Basics$round(x2 * 1e4) / 100;
      };
      return $elm$core$String$concat(_List_fromArray([
        "rgba(",
        $elm$core$String$fromFloat(pct(r)),
        "%,",
        $elm$core$String$fromFloat(pct(g2)),
        "%,",
        $elm$core$String$fromFloat(pct(b)),
        "%,",
        $elm$core$String$fromFloat(roundTo(a)),
        ")"
      ]));
    };
    var $author$project$Theme$Color$toCssStringBase = function(colorVal) {
      if (!colorVal.$) {
        var clr = colorVal.b;
        return $avh4$elm_color$Color$toCssString(clr);
      } else {
        var gradient = colorVal.a;
        return gradient;
      }
    };
    var $elm$core$Dict$values = function(dict) {
      return A3($elm$core$Dict$foldr, F3(function(key, value, valueList) {
        return A2($elm$core$List$cons, value, valueList);
      }), _List_Nil, dict);
    };
    var $author$project$Theme$Generate$Ui$colorVars = function(colors) {
      return $author$project$Theme$Generate$Stylesheet$root($elm$core$Dict$values(A3($elm$core$List$foldl, F2(function(clr, dict) {
        var varName = "--" + clr.j;
        return !A2($elm$core$Dict$member, varName, dict) ? A3($elm$core$Dict$insert, varName, A2($author$project$Theme$Generate$Stylesheet$string, varName, $author$project$Theme$Color$toCssStringBase(clr.kw)), dict) : dict;
      }), $elm$core$Dict$empty, colors)));
    };
    var $author$project$Theme$Generate$Stylesheet$Darkmode = 0;
    var $author$project$Theme$Generate$Stylesheet$darkmode = 0;
    var $author$project$Theme$Generate$Stylesheet$Active = 0;
    var $author$project$Theme$Generate$Stylesheet$Class = function(a) {
      return { $: 2, a };
    };
    var $author$project$Theme$Generate$Stylesheet$Pseudo = F2(function(a, b) {
      return { $: 5, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$active = F2(function(name, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, A2($author$project$Theme$Generate$Stylesheet$Pseudo, 0, $author$project$Theme$Generate$Stylesheet$Class(name)), rules);
    });
    var $author$project$Theme$Generate$Stylesheet$class = F2(function(name, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, $author$project$Theme$Generate$Stylesheet$Class(name), rules);
    });
    var $author$project$Theme$colorDefintionToCssClassNoNamespace = F2(function(propName, colorDef) {
      return $elm$core$String$isEmpty(colorDef.j) ? propName : propName + ("-" + colorDef.j);
    });
    var $author$project$Theme$Generate$Stylesheet$Hover = 2;
    var $author$project$Theme$Generate$Stylesheet$hover = F2(function(name, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, A2($author$project$Theme$Generate$Stylesheet$Pseudo, 2, $author$project$Theme$Generate$Stylesheet$Class(name)), rules);
    });
    var $author$project$Theme$Generate$Stylesheet$NoProp = { $: 2 };
    var $author$project$Theme$Generate$Stylesheet$none = $author$project$Theme$Generate$Stylesheet$Prop($author$project$Theme$Generate$Stylesheet$NoProp);
    var $author$project$Theme$Generate$Stylesheet$RuleList = function(a) {
      return { $: 1, a };
    };
    var $author$project$Theme$Generate$Stylesheet$ruleList = $author$project$Theme$Generate$Stylesheet$RuleList;
    var $author$project$Theme$decapitalize = function(str) {
      var top = A2($elm$core$String$left, 1, str);
      var remain = A2($elm$core$String$dropLeft, 1, str);
      return _Utils_ap($elm$core$String$toLower(top), remain);
    };
    var $author$project$Theme$toColorVar = function(colorInstance) {
      var _var = "var(--" + ($author$project$Theme$decapitalize(colorInstance.j) + ")");
      var _v0 = colorInstance.as;
      if (!_v0.$) {
        var variant = _v0.a;
        return "oklch(from " + (_var + (" " + ($elm$core$String$fromInt(variant) + "% c h)")));
      } else {
        return _var;
      }
    };
    var $author$project$Theme$Generate$Ui$generateColorClasses = F2(function(fullTheme, theme) {
      var genColorClass = F3(function(colorType, propName, colors) {
        return $author$project$Theme$Generate$Stylesheet$ruleList(A2($elm$core$List$map, function(colorDef) {
          var className = A2($author$project$Theme$colorDefintionToCssClassNoNamespace, colorType, colorDef);
          return $author$project$Theme$Generate$Stylesheet$ruleList(_List_fromArray([
            A2($author$project$Theme$Generate$Stylesheet$class, className, _List_fromArray([
              A2($author$project$Theme$Generate$Stylesheet$string, propName, $author$project$Theme$toColorVar(colorDef.kw))
            ])),
            function() {
              var _v0 = colorDef.lk;
              if (_v0.$ === 1) {
                return $author$project$Theme$Generate$Stylesheet$none;
              } else {
                var hoverColor = _v0.a;
                return A2($author$project$Theme$Generate$Stylesheet$hover, className, _List_fromArray([
                  A2($author$project$Theme$Generate$Stylesheet$string, propName, $author$project$Theme$toColorVar(hoverColor))
                ]));
              }
            }(),
            function() {
              var _v1 = colorDef.jO;
              if (_v1.$ === 1) {
                return $author$project$Theme$Generate$Stylesheet$none;
              } else {
                var activeColor = _v1.a;
                return A2($author$project$Theme$Generate$Stylesheet$active, className, _List_fromArray([
                  A2($author$project$Theme$Generate$Stylesheet$string, propName, $author$project$Theme$toColorVar(activeColor))
                ]));
              }
            }(),
            function() {
              var _v2 = colorDef.k6;
              if (_v2.$ === 1) {
                return $author$project$Theme$Generate$Stylesheet$none;
              } else {
                var focusColor = _v2.a;
                return A2($author$project$Theme$Generate$Stylesheet$active, className, _List_fromArray([
                  A2($author$project$Theme$Generate$Stylesheet$string, propName, $author$project$Theme$toColorVar(focusColor))
                ]));
              }
            }()
          ]));
        }, colors));
      });
      return _List_fromArray([
        A3(genColorClass, "text", "color", theme.iW),
        A3(genColorClass, "background", "background-color", theme.bB),
        A3(genColorClass, "border", "border-color", theme.c0)
      ]);
    });
    var $author$project$Theme$Generate$Stylesheet$Media = function(a) {
      return { $: 10, a };
    };
    var $author$project$Theme$Generate$Stylesheet$mediaToString = function(query) {
      return "(prefers-color-scheme: dark)";
    };
    var $author$project$Theme$Generate$Stylesheet$media = F2(function(query, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, $author$project$Theme$Generate$Stylesheet$Media($author$project$Theme$Generate$Stylesheet$mediaToString(query)), rules);
    });
    var $elm$core$List$partition = F2(function(pred, list) {
      var step = F2(function(x2, _v0) {
        var trues = _v0.a;
        var falses = _v0.b;
        return pred(x2) ? _Utils_Tuple2(A2($elm$core$List$cons, x2, trues), falses) : _Utils_Tuple2(trues, A2($elm$core$List$cons, x2, falses));
      });
      return A3($elm$core$List$foldr, step, _Utils_Tuple2(_List_Nil, _List_Nil), list);
    });
    var $author$project$Theme$Generate$Ui$colorStyles = function(theme) {
      var _v0 = theme.mQ;
      if (_v0.$ === 1) {
        return _List_Nil;
      } else {
        var themes = _v0.a;
        var defaultColorRules = A2($author$project$Theme$Generate$Ui$generateColorClasses, theme, themes.dE);
        var _v1 = A2($elm$core$List$partition, function(t) {
          return $author$project$Theme$nameToString(t.j) === "darkmode";
        }, themes.jV);
        var darkModeThemes = _v1.a;
        var otherThemes = _v1.b;
        var darkModeColorRules = function() {
          if (darkModeThemes.b) {
            var darkTheme = darkModeThemes.a;
            return A2($author$project$Theme$Generate$Ui$generateColorClasses, theme, darkTheme.lt);
          } else {
            return _List_Nil;
          }
        }();
        var darkModeMediaQuery = $elm$core$List$isEmpty(darkModeColorRules) ? $author$project$Theme$Generate$Stylesheet$none : A2($author$project$Theme$Generate$Stylesheet$media, $author$project$Theme$Generate$Stylesheet$darkmode, _List_fromArray([
          A2($author$project$Theme$Generate$Stylesheet$classAll, "automode", darkModeColorRules)
        ]));
        return _List_fromArray([
          $author$project$Theme$Generate$Ui$colorVars(theme.kx),
          $author$project$Theme$Generate$Stylesheet$ruleList(defaultColorRules),
          A2($author$project$Theme$Generate$Stylesheet$classAll, "darkmode", darkModeColorRules),
          $author$project$Theme$Generate$Stylesheet$ruleList(A2($elm$core$List$map, function(other) {
            var themeName = $author$project$Theme$nameToString(other.j);
            return A2($author$project$Theme$Generate$Stylesheet$classAll, themeName, A2($author$project$Theme$Generate$Ui$generateColorClasses, theme, other.lt));
          }, otherThemes)),
          darkModeMediaQuery
        ]);
      }
    };
    var $author$project$Theme$Generate$Stylesheet$SingleLine = 0;
    var $author$project$Theme$Generate$Stylesheet$empty = { aa: _List_Nil, ab: _List_Nil };
    var $author$project$Theme$Generate$Stylesheet$AllChildren = F2(function(a, b) {
      return { $: 7, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$Child = F2(function(a, b) {
      return { $: 6, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$Compiled = F2(function(a, b) {
      return { $: 0, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$CompiledMedia = F2(function(a, b) {
      return { $: 1, a, b };
    });
    var $author$project$Theme$Generate$Stylesheet$Raw = function(a) {
      return { $: 1, a };
    };
    var $author$project$Theme$Generate$Stylesheet$pseudoToString = function(pseudo) {
      switch (pseudo) {
        case 0:
          return "active";
        case 1:
          return "focus";
        default:
          return "hover";
      }
    };
    var $author$project$Theme$Generate$Stylesheet$withNamespace = F2(function(maybeNamespace, name) {
      if (!maybeNamespace.$) {
        var namespace = maybeNamespace.a;
        return namespace + ("-" + name);
      } else {
        return name;
      }
    });
    var $author$project$Theme$Generate$Stylesheet$selectorToString = F2(function(maybeNamespace, selector) {
      switch (selector.$) {
        case 0:
          return ":root";
        case 1:
          var rawSelector = selector.a;
          return rawSelector;
        case 2:
          var name = selector.a;
          return "." + A2($author$project$Theme$Generate$Stylesheet$withNamespace, maybeNamespace, name);
        case 3:
          var name = selector.a;
          return "." + A2($author$project$Theme$Generate$Stylesheet$withNamespace, maybeNamespace, name);
        case 4:
          var name = selector.a;
          return "#" + A2($author$project$Theme$Generate$Stylesheet$withNamespace, maybeNamespace, name);
        case 5:
          var pseudo = selector.a;
          var inner = selector.b;
          return A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, inner) + (":" + $author$project$Theme$Generate$Stylesheet$pseudoToString(pseudo));
        case 6:
          var parent = selector.a;
          var child = selector.b;
          return A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, parent) + (" > " + A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, child));
        case 7:
          var parent = selector.a;
          var child = selector.b;
          return A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, parent) + (" " + A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, child));
        case 8:
          var inner = selector.a;
          return A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, inner) + "::after";
        case 9:
          var inner = selector.a;
          return A2($author$project$Theme$Generate$Stylesheet$selectorToString, maybeNamespace, inner) + "::before";
        default:
          var query = selector.a;
          return "@media " + query;
      }
    });
    var $author$project$Theme$Generate$Stylesheet$flatten = F3(function(maybeParentSelector, rules, cursor) {
      return A3($elm$core$List$foldr, $author$project$Theme$Generate$Stylesheet$flattenRule(maybeParentSelector), cursor, rules);
    });
    var $author$project$Theme$Generate$Stylesheet$flattenRule = F3(function(maybeParentSelector, rule, cursor) {
      switch (rule.$) {
        case 0:
          if (rule.a.$ === 10) {
            var q = rule.a.a;
            var rules = rule.b;
            var gathered = A3($author$project$Theme$Generate$Stylesheet$flatten, maybeParentSelector, rules, $author$project$Theme$Generate$Stylesheet$empty);
            var newRule = A2($author$project$Theme$Generate$Stylesheet$CompiledMedia, q, gathered.ab);
            return {
              aa: cursor.aa,
              ab: A2($elm$core$List$cons, newRule, cursor.ab)
            };
          } else {
            var selector = rule.a;
            var rules = rule.b;
            var newSelector = function() {
              if (maybeParentSelector.$ === 1) {
                return selector;
              } else {
                switch (maybeParentSelector.a.$) {
                  case 3:
                    var cls = maybeParentSelector.a.a;
                    return A2($author$project$Theme$Generate$Stylesheet$AllChildren, $author$project$Theme$Generate$Stylesheet$Class(cls), selector);
                  case 1:
                    var rawSelector = maybeParentSelector.a.a;
                    return $author$project$Theme$Generate$Stylesheet$Raw(_Utils_ap(rawSelector, A2($author$project$Theme$Generate$Stylesheet$selectorToString, $elm$core$Maybe$Nothing, selector)));
                  default:
                    var parentSelector = maybeParentSelector.a;
                    return A2($author$project$Theme$Generate$Stylesheet$Child, parentSelector, selector);
                }
              }
            }();
            var gathered = A3($author$project$Theme$Generate$Stylesheet$flatten, $elm$core$Maybe$Just(newSelector), rules, $author$project$Theme$Generate$Stylesheet$empty);
            var newRule = A2($author$project$Theme$Generate$Stylesheet$Compiled, newSelector, gathered.aa);
            return {
              aa: cursor.aa,
              ab: _Utils_ap(gathered.ab, A2($elm$core$List$cons, newRule, cursor.ab))
            };
          }
        case 1:
          var rules = rule.a;
          return A3($author$project$Theme$Generate$Stylesheet$flatten, maybeParentSelector, rules, cursor);
        default:
          var prop = rule.a;
          return _Utils_update(cursor, {
            aa: A2($elm$core$List$cons, prop, cursor.aa)
          });
      }
    });
    var $author$project$Theme$Generate$Stylesheet$Multiline = 1;
    var $author$project$Theme$Generate$Stylesheet$propToString = function(prop) {
      switch (prop.$) {
        case 0:
          var key = prop.a;
          var clr = prop.b;
          return key + (": " + ($avh4$elm_color$Color$toCssString(clr) + ";"));
        case 1:
          var key = prop.a;
          var value = prop.b;
          return key + (": " + (value + ";"));
        default:
          return "";
      }
    };
    var $author$project$Theme$Generate$Stylesheet$renderProps = F3(function(separator, props, rendered) {
      renderProps:
        while (true) {
          if (!props.b) {
            return rendered;
          } else {
            if (props.a.$ === 2) {
              var _v1 = props.a;
              var rest = props.b;
              var $temp$separator = separator, $temp$props = rest, $temp$rendered = rendered;
              separator = $temp$separator;
              props = $temp$props;
              rendered = $temp$rendered;
              continue renderProps;
            } else {
              var prop = props.a;
              var rest = props.b;
              if ($elm$core$String$isEmpty(rendered)) {
                var $temp$separator = separator, $temp$props = rest, $temp$rendered = _Utils_ap($author$project$Theme$Generate$Stylesheet$propToString(prop), separator);
                separator = $temp$separator;
                props = $temp$props;
                rendered = $temp$rendered;
                continue renderProps;
              } else {
                var $temp$separator = separator, $temp$props = rest, $temp$rendered = rendered + ("  " + ($author$project$Theme$Generate$Stylesheet$propToString(prop) + separator));
                separator = $temp$separator;
                props = $temp$props;
                rendered = $temp$rendered;
                continue renderProps;
              }
            }
          }
        }
    });
    var $author$project$Theme$Generate$Stylesheet$ruleToString = F4(function(namespace, indentSize, compiled, _v0) {
      var previousSize = _v0.a;
      var rendered = _v0.b;
      if (compiled.$ === 1) {
        var q = compiled.a;
        var innerRules = compiled.b;
        var _v2 = A3($elm$core$List$foldl, A2($author$project$Theme$Generate$Stylesheet$ruleToString, namespace, 2), _Utils_Tuple2(0, ""), innerRules);
        var innerRuleSize = _v2.a;
        var innerRulesRendered = _v2.b;
        return _Utils_Tuple2(1, rendered + (`

@media ` + (q + (` {
` + (innerRulesRendered + `
}`)))));
      } else {
        var selector = compiled.a;
        var props = compiled.b;
        var indent = A2($elm$core$String$repeat, indentSize, " ");
        var addToRendered = F2(function(size, rule) {
          if ($elm$core$String$isEmpty(rendered)) {
            return _Utils_Tuple2(size, rule);
          } else {
            if (!previousSize) {
              if (!size) {
                return _Utils_Tuple2(size, rendered + (`
` + rule));
              } else {
                return _Utils_Tuple2(size, rendered + (`

` + rule));
              }
            } else {
              return _Utils_Tuple2(size, rendered + (`

` + rule));
            }
          }
        });
        if ($elm$core$List$length(props) > 1) {
          var renderedProps = A3($author$project$Theme$Generate$Stylesheet$renderProps, `
`, props, "");
          var renderedRule = indent + (A2($author$project$Theme$Generate$Stylesheet$selectorToString, namespace, selector) + (` {
  ` + (renderedProps + "}")));
          return $elm$core$String$isEmpty(renderedProps) ? _Utils_Tuple2(previousSize, rendered) : A2(addToRendered, 1, renderedRule);
        } else {
          var renderedProps = A3($author$project$Theme$Generate$Stylesheet$renderProps, "", props, "");
          var renderedRule = indent + (A2($author$project$Theme$Generate$Stylesheet$selectorToString, namespace, selector) + (" { " + (renderedProps + " }")));
          return $elm$core$String$isEmpty(renderedProps) ? _Utils_Tuple2(previousSize, rendered) : A2(addToRendered, 0, renderedRule);
        }
      }
    });
    var $author$project$Theme$Generate$Stylesheet$toString = F2(function(namespace, rules) {
      return A3($elm$core$List$foldl, A2($author$project$Theme$Generate$Stylesheet$ruleToString, namespace, 0), _Utils_Tuple2(0, ""), A3($author$project$Theme$Generate$Stylesheet$flatten, $elm$core$Maybe$Nothing, rules, $author$project$Theme$Generate$Stylesheet$empty).ab).b;
    });
    var $author$project$Theme$Generate$Stylesheet$file = F3(function(namespace, path, rules) {
      return {
        ds: A2($author$project$Theme$Generate$Stylesheet$toString, namespace, rules),
        l7: A2($elm$core$String$join, "/", path),
        jy: _List_Nil
      };
    });
    var $author$project$Theme$Generate$Stylesheet$After = function(a) {
      return { $: 8, a };
    };
    var $author$project$Theme$Generate$Stylesheet$Before = function(a) {
      return { $: 9, a };
    };
    var $author$project$Theme$Generate$Ui$captureVariants = F4(function(textTransform, italic, variants, vars) {
      captureVariants:
        while (true) {
          if (!vars.b) {
            return _Utils_Tuple3(textTransform, italic, variants);
          } else {
            var _var = vars.a;
            var rest = vars.b;
            switch (_var) {
              case "italic":
                var $temp$textTransform = textTransform, $temp$italic = true, $temp$variants = variants, $temp$vars = rest;
                textTransform = $temp$textTransform;
                italic = $temp$italic;
                variants = $temp$variants;
                vars = $temp$vars;
                continue captureVariants;
              case "uppercase":
                var $temp$textTransform = $elm$core$Maybe$Just("uppercase"), $temp$italic = italic, $temp$variants = variants, $temp$vars = rest;
                textTransform = $temp$textTransform;
                italic = $temp$italic;
                variants = $temp$variants;
                vars = $temp$vars;
                continue captureVariants;
              case "lowercase":
                var $temp$textTransform = $elm$core$Maybe$Just("lowercase"), $temp$italic = italic, $temp$variants = variants, $temp$vars = rest;
                textTransform = $temp$textTransform;
                italic = $temp$italic;
                variants = $temp$variants;
                vars = $temp$vars;
                continue captureVariants;
              case "capitalize":
                var $temp$textTransform = $elm$core$Maybe$Just("capitalize"), $temp$italic = italic, $temp$variants = variants, $temp$vars = rest;
                textTransform = $temp$textTransform;
                italic = $temp$italic;
                variants = $temp$variants;
                vars = $temp$vars;
                continue captureVariants;
              default:
                var $temp$textTransform = textTransform, $temp$italic = italic, $temp$variants = A2($elm$core$List$cons, _var, variants), $temp$vars = rest;
                textTransform = $temp$textTransform;
                italic = $temp$italic;
                variants = $temp$variants;
                vars = $temp$vars;
                continue captureVariants;
            }
          }
        }
    });
    var $author$project$Theme$Generate$Stylesheet$custom = F2(function(selector, rules) {
      return A2($author$project$Theme$Generate$Stylesheet$Rule, selector, rules);
    });
    var $author$project$Theme$Generate$Stylesheet$float = F2(function(key, value) {
      return $author$project$Theme$Generate$Stylesheet$Prop(A2($author$project$Theme$Generate$Stylesheet$Str, key, $elm$core$String$fromFloat(value)));
    });
    var $author$project$Theme$Generate$Ui$fontFamily = function(fonts) {
      return A2($elm$core$String$join, ", ", A2($elm$core$List$map, function(f) {
        return '"' + (f + '"');
      }, fonts));
    };
    var $author$project$Theme$Generate$Stylesheet$fontSizeInPxAsRem = function(value) {
      var rem = value / 16;
      return $author$project$Theme$Generate$Stylesheet$Prop(A2($author$project$Theme$Generate$Stylesheet$Str, "font-size", $elm$core$String$fromFloat(rem) + "rem"));
    };
    var $author$project$Theme$Generate$Stylesheet$int = F2(function(key, value) {
      return $author$project$Theme$Generate$Stylesheet$Prop(A2($author$project$Theme$Generate$Stylesheet$Str, key, $elm$core$String$fromInt(value)));
    });
    var $author$project$Theme$Generate$Ui$typographyStyles = function(theme) {
      return A2($elm$core$List$concatMap, function(_v0) {
        var name = _v0.j;
        var item = _v0.lt;
        var fontSize = function() {
          var _v5 = A2($elm$core$Maybe$andThen, function($2) {
            return $2.k7;
          }, item.kk);
          if (_v5.$ === 1) {
            return item.ih;
          } else {
            var ratio = _v5.a;
            return item.ih * ratio;
          }
        }();
        var fontClass = A2($author$project$Theme$Generate$Ui$typographyClassName, name, item.m6.a);
        var capitalSizingStyles = function() {
          var _v4 = item.kk;
          if (_v4.$ === 1) {
            return $author$project$Theme$Generate$Stylesheet$none;
          } else {
            var capitalSizing = _v4.a;
            return !theme.iS ? $author$project$Theme$Generate$Stylesheet$none : $author$project$Theme$Generate$Stylesheet$ruleList(_List_fromArray([
              A2($author$project$Theme$Generate$Stylesheet$custom, $author$project$Theme$Generate$Stylesheet$After(A2($author$project$Theme$Generate$Stylesheet$AllChildren, $author$project$Theme$Generate$Stylesheet$Class(fontClass), $author$project$Theme$Generate$Stylesheet$Class("p"))), _List_fromArray([
                A2($author$project$Theme$Generate$Stylesheet$string, "content", '" "'),
                A2($author$project$Theme$Generate$Stylesheet$string, "margin-top", "calc(1em * " + ($elm$core$String$fromFloat(capitalSizing.kd) + ")")),
                A2($author$project$Theme$Generate$Stylesheet$string, "display", "table")
              ])),
              A2($author$project$Theme$Generate$Stylesheet$custom, $author$project$Theme$Generate$Stylesheet$Before(A2($author$project$Theme$Generate$Stylesheet$AllChildren, $author$project$Theme$Generate$Stylesheet$Class(fontClass), $author$project$Theme$Generate$Stylesheet$Class("p"))), _List_fromArray([
                A2($author$project$Theme$Generate$Stylesheet$string, "content", '" "'),
                A2($author$project$Theme$Generate$Stylesheet$string, "margin-bottom", "calc(1em * " + ($elm$core$String$fromFloat(capitalSizing.mT) + ")")),
                A2($author$project$Theme$Generate$Stylesheet$string, "display", "table")
              ])),
              A2($author$project$Theme$Generate$Stylesheet$custom, $author$project$Theme$Generate$Stylesheet$After(A2($author$project$Theme$Generate$Stylesheet$AllChildren, $author$project$Theme$Generate$Stylesheet$Class(fontClass), $author$project$Theme$Generate$Stylesheet$Class("t"))), _List_fromArray([
                A2($author$project$Theme$Generate$Stylesheet$string, "content", '" "'),
                A2($author$project$Theme$Generate$Stylesheet$string, "margin-top", "calc(1em * " + ($elm$core$String$fromFloat(capitalSizing.kd) + ")")),
                A2($author$project$Theme$Generate$Stylesheet$string, "display", "table")
              ])),
              A2($author$project$Theme$Generate$Stylesheet$custom, $author$project$Theme$Generate$Stylesheet$Before(A2($author$project$Theme$Generate$Stylesheet$AllChildren, $author$project$Theme$Generate$Stylesheet$Class(fontClass), $author$project$Theme$Generate$Stylesheet$Class("t"))), _List_fromArray([
                A2($author$project$Theme$Generate$Stylesheet$string, "content", '" "'),
                A2($author$project$Theme$Generate$Stylesheet$string, "margin-bottom", "calc(1em * " + ($elm$core$String$fromFloat(capitalSizing.mT) + ")")),
                A2($author$project$Theme$Generate$Stylesheet$string, "display", "table")
              ]))
            ]));
          }
        }();
        var _v1 = A4($author$project$Theme$Generate$Ui$captureVariants, $elm$core$Maybe$Nothing, false, _List_Nil, item.m1);
        var textTransform = _v1.a;
        var italic = _v1.b;
        var variants = _v1.c;
        return _List_fromArray([
          A2($author$project$Theme$Generate$Stylesheet$class, fontClass, _List_fromArray([
            A2($author$project$Theme$Generate$Stylesheet$string, "font-family", $author$project$Theme$Generate$Ui$fontFamily(A2($elm$core$List$cons, item.k$, item.k1))),
            A2($author$project$Theme$Generate$Stylesheet$int, "font-weight", item.m6.b),
            $author$project$Theme$Generate$Stylesheet$fontSizeInPxAsRem(fontSize),
            A2($author$project$Theme$Generate$Stylesheet$float, "line-height", item.lA),
            italic ? A2($author$project$Theme$Generate$Stylesheet$string, "font-style", "italic") : $author$project$Theme$Generate$Stylesheet$none,
            function() {
              if (!textTransform.$) {
                var transform = textTransform.a;
                return A2($author$project$Theme$Generate$Stylesheet$string, "text-transform", transform);
              } else {
                return $author$project$Theme$Generate$Stylesheet$none;
              }
            }(),
            function() {
              if (!variants.b) {
                return $author$project$Theme$Generate$Stylesheet$none;
              } else {
                return A2($author$project$Theme$Generate$Stylesheet$string, "font-variant", A2($elm$core$String$join, " ", variants));
              }
            }()
          ])),
          capitalSizingStyles
        ]);
      }, theme.mW);
    };
    var $author$project$Theme$Generate$Ui$stylesheet = function(theme) {
      return A3($author$project$Theme$Generate$Stylesheet$file, $elm$core$Maybe$Just(theme.aR), _List_fromArray(["elm-ui.css"]), $elm$core$List$concat(_List_fromArray([
        $author$project$Theme$Generate$Ui$colorStyles(theme),
        $author$project$Theme$Generate$Ui$typographyStyles(theme)
      ])));
    };
    var $author$project$Theme$Generate$Ui$generate = function(theme) {
      return _List_fromArray([
        $author$project$Theme$Generate$Ui$stylesheet(theme),
        $author$project$Theme$Generate$Ui$generateElmColorPalette(theme),
        $author$project$Theme$Generate$Ui$generateElmColorTheme(theme),
        $author$project$Theme$Generate$Ui$generateTextElements(theme),
        $author$project$Theme$Generate$Ui$generateTheme(theme)
      ]);
    };
    var $author$project$Theme$Generate$generate = function(theme) {
      return $author$project$Theme$Generate$Ui$generate(theme);
    };
    var $elm$core$Platform$Cmd$batch = _Platform_batch;
    var $elm$json$Json$Encode$list = F2(function(func, entries) {
      return _Json_wrap(A3($elm$core$List$foldl, _Json_addEntry(func), _Json_emptyArray(0), entries));
    });
    var $elm$json$Json$Encode$object = function(pairs) {
      return _Json_wrap(A3($elm$core$List$foldl, F2(function(_v0, obj) {
        var k2 = _v0.a;
        var v = _v0.b;
        return A3(_Json_addField, k2, v, obj);
      }), _Json_emptyObject(0), pairs));
    };
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $author$project$Gen$CodeGen$Generate$onFailureSend = _Platform_outgoingPort("onFailureSend", $elm$json$Json$Encode$list(function($2) {
      return $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("description", $elm$json$Json$Encode$string($2.a1)),
        _Utils_Tuple2("title", $elm$json$Json$Encode$string($2.mR))
      ]));
    }));
    var $author$project$Gen$CodeGen$Generate$error = function(errs) {
      return $author$project$Gen$CodeGen$Generate$onFailureSend(errs);
    };
    var $author$project$Gen$CodeGen$Generate$onSuccessSend = _Platform_outgoingPort("onSuccessSend", $elm$json$Json$Encode$list(function($2) {
      return $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("contents", $elm$json$Json$Encode$string($2.ds)),
        _Utils_Tuple2("path", $elm$json$Json$Encode$string($2.l7)),
        _Utils_Tuple2("warnings", $elm$json$Json$Encode$list(function($3) {
          return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("declaration", $elm$json$Json$Encode$string($3.kJ)),
            _Utils_Tuple2("warning", $elm$json$Json$Encode$string($3.m5))
          ]));
        })($2.jy))
      ]));
    }));
    var $author$project$Gen$CodeGen$Generate$files = function(list) {
      return $author$project$Gen$CodeGen$Generate$onSuccessSend(list);
    };
    var $author$project$Gen$CodeGen$Generate$onInfoSend = _Platform_outgoingPort("onInfoSend", $elm$json$Json$Encode$string);
    var $author$project$Gen$CodeGen$Generate$info = function(err) {
      return $author$project$Gen$CodeGen$Generate$onInfoSend(err);
    };
    var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
    var $elm$core$Platform$Sub$batch = _Platform_batch;
    var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
    var $elm$core$Platform$worker = _Platform_worker;
    var $author$project$Gen$CodeGen$Generate$withFeedback = function(f) {
      return $elm$core$Platform$worker({
        bb: function(flags) {
          return _Utils_Tuple2(0, function() {
            var _v0 = f(flags);
            if (!_v0.$) {
              var result = _v0.a;
              return $elm$core$Platform$Cmd$batch(_Utils_ap(A2($elm$core$List$map, $author$project$Gen$CodeGen$Generate$info, result.lo), _List_fromArray([
                $author$project$Gen$CodeGen$Generate$files(result.ek)
              ])));
            } else {
              var errors = _v0.a;
              return $author$project$Gen$CodeGen$Generate$error(errors);
            }
          }());
        },
        mK: function(_v1) {
          return $elm$core$Platform$Sub$none;
        },
        mZ: F2(function(_v2, model) {
          return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
        })
      });
    };
    var $author$project$Run$main = $author$project$Gen$CodeGen$Generate$withFeedback(function(flags) {
      var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Run$decodePlugin, flags);
      if (!_v0.$) {
        var runs = _v0.a;
        var themeResult = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(theme) {
          return $author$project$Theme$Generate$generate(theme);
        }, runs.i$));
        var docsResult = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(docs) {
          return $author$project$Generate$Docs$generate(docs);
        }, runs.kU));
        var assetsResult = A2($elm$core$Maybe$withDefault, _List_Nil, A2($elm$core$Maybe$map, function(assets) {
          return $author$project$Generate$Assets$generate(assets);
        }, runs.j_));
        var appViewResult = function() {
          var viewRegions = A2($elm$core$Maybe$withDefault, {
            F: _List_fromArray([
              _Utils_Tuple2("primary", 0)
            ])
          }, runs.cC);
          return _List_fromArray([
            $author$project$Press$Generate$Regions$generate(viewRegions)
          ]);
        }();
        var _v1 = A2($elm$core$Maybe$withDefault, _Utils_Tuple2(_List_Nil, _List_Nil), A2($elm$core$Maybe$map, function(pageUsages) {
          var _v2 = $author$project$Press$Generate$generate(pageUsages);
          if (!_v2.$) {
            var output = _v2.a;
            return _Utils_Tuple2(output, _List_Nil);
          } else {
            var errorList = _v2.a;
            return _Utils_Tuple2(_List_Nil, A2($elm$core$List$map, $author$project$Press$Generate$errorToDetails, errorList));
          }
        }, runs.cA));
        var appGeneratedFiles = _v1.a;
        var appGeneratedErrors = _v1.b;
        return $elm$core$List$isEmpty(appGeneratedErrors) ? $elm$core$Result$Ok({
          ek: $elm$core$List$concat(_List_fromArray([appGeneratedFiles, appViewResult, assetsResult, themeResult, docsResult])),
          lo: _List_Nil
        }) : $elm$core$Result$Err(appGeneratedErrors);
      } else {
        var errors = _v0.a;
        return $elm$core$Result$Err(_List_fromArray([
          {
            a1: $elm$json$Json$Decode$errorToString(errors),
            mR: "Error decoding flags"
          }
        ]));
      }
    });
    _Platform_export({ Run: { init: $author$project$Run$main($elm$json$Json$Decode$value)(0) } });
  })(exports);
});

// node:path
var L = Object.create;
var h = Object.defineProperty;
var D = Object.getOwnPropertyDescriptor;
var T = Object.getOwnPropertyNames;
var _ = Object.getPrototypeOf;
var E = Object.prototype.hasOwnProperty;
var R = (s, e) => () => (e || s((e = { exports: {} }).exports, e), e.exports);
var N = (s, e, r, t) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let i of T(e))
      !E.call(s, i) && i !== r && h(s, i, { get: () => e[i], enumerable: !(t = D(e, i)) || t.enumerable });
  return s;
};
var j = (s, e, r) => (r = s != null ? L(_(s)) : {}, N(e || !s || !s.__esModule ? h(r, "default", { value: s, enumerable: true }) : r, s));
var k = R((W, w) => {
  function v(s) {
    if (typeof s != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(s));
  }
  function C(s, e) {
    for (var r = "", t = 0, i = -1, a = 0, n, l = 0;l <= s.length; ++l) {
      if (l < s.length)
        n = s.charCodeAt(l);
      else {
        if (n === 47)
          break;
        n = 47;
      }
      if (n === 47) {
        if (!(i === l - 1 || a === 1))
          if (i !== l - 1 && a === 2) {
            if (r.length < 2 || t !== 2 || r.charCodeAt(r.length - 1) !== 46 || r.charCodeAt(r.length - 2) !== 46) {
              if (r.length > 2) {
                var f = r.lastIndexOf("/");
                if (f !== r.length - 1) {
                  f === -1 ? (r = "", t = 0) : (r = r.slice(0, f), t = r.length - 1 - r.lastIndexOf("/")), i = l, a = 0;
                  continue;
                }
              } else if (r.length === 2 || r.length === 1) {
                r = "", t = 0, i = l, a = 0;
                continue;
              }
            }
            e && (r.length > 0 ? r += "/.." : r = "..", t = 2);
          } else
            r.length > 0 ? r += "/" + s.slice(i + 1, l) : r = s.slice(i + 1, l), t = l - i - 1;
        i = l, a = 0;
      } else
        n === 46 && a !== -1 ? ++a : a = -1;
    }
    return r;
  }
  function F(s, e) {
    var r = e.dir || e.root, t = e.base || (e.name || "") + (e.ext || "");
    return r ? r === e.root ? r + t : r + s + t : t;
  }
  var m = { resolve: function() {
    for (var e = "", r = false, t, i = arguments.length - 1;i >= -1 && !r; i--) {
      var a;
      i >= 0 ? a = arguments[i] : (t === undefined && (t = process.cwd()), a = t), v(a), a.length !== 0 && (e = a + "/" + e, r = a.charCodeAt(0) === 47);
    }
    return e = C(e, !r), r ? e.length > 0 ? "/" + e : "/" : e.length > 0 ? e : ".";
  }, normalize: function(e) {
    if (v(e), e.length === 0)
      return ".";
    var r = e.charCodeAt(0) === 47, t = e.charCodeAt(e.length - 1) === 47;
    return e = C(e, !r), e.length === 0 && !r && (e = "."), e.length > 0 && t && (e += "/"), r ? "/" + e : e;
  }, isAbsolute: function(e) {
    return v(e), e.length > 0 && e.charCodeAt(0) === 47;
  }, join: function() {
    if (arguments.length === 0)
      return ".";
    for (var e, r = 0;r < arguments.length; ++r) {
      var t = arguments[r];
      v(t), t.length > 0 && (e === undefined ? e = t : e += "/" + t);
    }
    return e === undefined ? "." : m.normalize(e);
  }, relative: function(e, r) {
    if (v(e), v(r), e === r || (e = m.resolve(e), r = m.resolve(r), e === r))
      return "";
    for (var t = 1;t < e.length && e.charCodeAt(t) === 47; ++t)
      ;
    for (var i = e.length, a = i - t, n = 1;n < r.length && r.charCodeAt(n) === 47; ++n)
      ;
    for (var l = r.length, f = l - n, c = a < f ? a : f, d = -1, o = 0;o <= c; ++o) {
      if (o === c) {
        if (f > c) {
          if (r.charCodeAt(n + o) === 47)
            return r.slice(n + o + 1);
          if (o === 0)
            return r.slice(n + o);
        } else
          a > c && (e.charCodeAt(t + o) === 47 ? d = o : o === 0 && (d = 0));
        break;
      }
      var A = e.charCodeAt(t + o), z = r.charCodeAt(n + o);
      if (A !== z)
        break;
      A === 47 && (d = o);
    }
    var b = "";
    for (o = t + d + 1;o <= i; ++o)
      (o === i || e.charCodeAt(o) === 47) && (b.length === 0 ? b += ".." : b += "/..");
    return b.length > 0 ? b + r.slice(n + d) : (n += d, r.charCodeAt(n) === 47 && ++n, r.slice(n));
  }, _makeLong: function(e) {
    return e;
  }, dirname: function(e) {
    if (v(e), e.length === 0)
      return ".";
    for (var r = e.charCodeAt(0), t = r === 47, i = -1, a = true, n = e.length - 1;n >= 1; --n)
      if (r = e.charCodeAt(n), r === 47) {
        if (!a) {
          i = n;
          break;
        }
      } else
        a = false;
    return i === -1 ? t ? "/" : "." : t && i === 1 ? "//" : e.slice(0, i);
  }, basename: function(e, r) {
    if (r !== undefined && typeof r != "string")
      throw new TypeError('"ext" argument must be a string');
    v(e);
    var t = 0, i = -1, a = true, n;
    if (r !== undefined && r.length > 0 && r.length <= e.length) {
      if (r.length === e.length && r === e)
        return "";
      var l = r.length - 1, f = -1;
      for (n = e.length - 1;n >= 0; --n) {
        var c = e.charCodeAt(n);
        if (c === 47) {
          if (!a) {
            t = n + 1;
            break;
          }
        } else
          f === -1 && (a = false, f = n + 1), l >= 0 && (c === r.charCodeAt(l) ? --l === -1 && (i = n) : (l = -1, i = f));
      }
      return t === i ? i = f : i === -1 && (i = e.length), e.slice(t, i);
    } else {
      for (n = e.length - 1;n >= 0; --n)
        if (e.charCodeAt(n) === 47) {
          if (!a) {
            t = n + 1;
            break;
          }
        } else
          i === -1 && (a = false, i = n + 1);
      return i === -1 ? "" : e.slice(t, i);
    }
  }, extname: function(e) {
    v(e);
    for (var r = -1, t = 0, i = -1, a = true, n = 0, l = e.length - 1;l >= 0; --l) {
      var f = e.charCodeAt(l);
      if (f === 47) {
        if (!a) {
          t = l + 1;
          break;
        }
        continue;
      }
      i === -1 && (a = false, i = l + 1), f === 46 ? r === -1 ? r = l : n !== 1 && (n = 1) : r !== -1 && (n = -1);
    }
    return r === -1 || i === -1 || n === 0 || n === 1 && r === i - 1 && r === t + 1 ? "" : e.slice(r, i);
  }, format: function(e) {
    if (e === null || typeof e != "object")
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof e);
    return F("/", e);
  }, parse: function(e) {
    v(e);
    var r = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return r;
    var t = e.charCodeAt(0), i = t === 47, a;
    i ? (r.root = "/", a = 1) : a = 0;
    for (var n = -1, l = 0, f = -1, c = true, d = e.length - 1, o = 0;d >= a; --d) {
      if (t = e.charCodeAt(d), t === 47) {
        if (!c) {
          l = d + 1;
          break;
        }
        continue;
      }
      f === -1 && (c = false, f = d + 1), t === 46 ? n === -1 ? n = d : o !== 1 && (o = 1) : n !== -1 && (o = -1);
    }
    return n === -1 || f === -1 || o === 0 || o === 1 && n === f - 1 && n === l + 1 ? f !== -1 && (l === 0 && i ? r.base = r.name = e.slice(1, f) : r.base = r.name = e.slice(l, f)) : (l === 0 && i ? (r.name = e.slice(1, n), r.base = e.slice(1, f)) : (r.name = e.slice(l, n), r.base = e.slice(l, f)), r.ext = e.slice(n, f)), l > 0 ? r.dir = e.slice(0, l - 1) : i && (r.dir = "/"), r;
  }, sep: "/", delimiter: ":", win32: null, posix: null };
  m.posix = m;
  w.exports = m;
});
var x = j(k());
var u = x;
var J = x;
var P = function(s) {
  return s;
};
var S = function() {
  throw new Error("Not implemented");
};
u.parse ??= S;
J.parse ??= S;
var g = { resolve: u.resolve.bind(u), normalize: u.normalize.bind(u), isAbsolute: u.isAbsolute.bind(u), join: u.join.bind(u), relative: u.relative.bind(u), toNamespacedPath: P, dirname: u.dirname.bind(u), basename: u.basename.bind(u), extname: u.extname.bind(u), format: u.format.bind(u), parse: u.parse.bind(u), sep: "/", delimiter: ":", win32: undefined, posix: undefined, _makeLong: P };
var y = { sep: "\\", delimiter: ";", win32: undefined, ...g, posix: g };
g.win32 = y.win32 = y;
g.posix = g;
var { resolve: B, normalize: G, isAbsolute: H, join: K, relative: Q, toNamespacedPath: U, dirname: V, basename: X, extname: Y, format: Z, parse: $, sep: I, delimiter: O } = g;

// index.ts
var ElmGenerator = require_generate();
async function run(outputDir, flags) {
  return new Promise((resolve, reject) => {
    const app = ElmGenerator.Elm.Run.init({ flags });
    if (app.ports.onSuccessSend) {
      app.ports.onSuccessSend.subscribe(resolve);
    }
    if (app.ports.onInfoSend) {
      app.ports.onInfoSend.subscribe((info) => console.log(info));
    }
    if (app.ports.onFailureSend) {
      app.ports.onFailureSend.subscribe(reject);
    }
  }).then((files) => {
    const generated = [];
    for (const file of files) {
      generated.push({
        outputDir,
        path: K(outputDir, file.path),
        contents: file.contents
      });
    }
    return { generated };
  }).catch((errorList) => {
    const errors = [];
    for (const error of errorList) {
      errors.push({
        title: error.title,
        description: error.description
      });
    }
    return { errors };
  });
}
var data = "";
process.stdin.setEncoding("utf-8");
process.stdin.on("data", (chunk) => {
  data += chunk;
});
process.stdin.on("end", async () => {
  try {
    const input = JSON.parse(data);
    if (!input.outputDir || !input.flags) {
      console.error('Input must contain "outputDir" and "flags" properties');
      process.exit(1);
    }
    const summary = await run(input.outputDir, input.flags).catch((err) => {
      console.error(err);
      process.exit(1);
    });
    console.log(JSON.stringify(summary));
  } catch (err) {
    console.error("Failed to parse JSON input:", err);
    process.exit(1);
  }
});
export {
  run
};
